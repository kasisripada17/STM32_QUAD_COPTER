
STM32_QUAD_COPTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a828  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800a9b8  0800a9b8  0001a9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ade4  0800ade4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adec  0800adec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adec  0800adec  0001adec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adf0  0800adf0  0001adf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800adf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200001e0  0800afd4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  0800afd4  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e8d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3a  00000000  00000000  0003a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  0003cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  0003e130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290b6  00000000  00000000  0003f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174b8  00000000  00000000  00068416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8012  00000000  00000000  0007f8ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001778e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062e8  00000000  00000000  00177934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9a0 	.word	0x0800a9a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a9a0 	.word	0x0800a9a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	00000000 	.word	0x00000000

08000f80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f84:	b090      	sub	sp, #64	; 0x40
 8000f86:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f88:	f002 f8c7 	bl	800311a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f8c:	f000 fcca 	bl	8001924 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f90:	f001 f896 	bl	80020c0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000f94:	f000 fd28 	bl	80019e8 <MX_I2C1_Init>
	MX_TIM1_Init();
 8000f98:	f000 fd66 	bl	8001a68 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000f9c:	f000 fe1e 	bl	8001bdc <MX_TIM2_Init>
	MX_TIM3_Init();
 8000fa0:	f000 fe98 	bl	8001cd4 <MX_TIM3_Init>
	MX_TIM15_Init();
 8000fa4:	f000 ffae 	bl	8001f04 <MX_TIM15_Init>
	MX_TIM8_Init();
 8000fa8:	f000 ff1e 	bl	8001de8 <MX_TIM8_Init>
	MX_UART4_Init();
 8000fac:	f001 f858 	bl	8002060 <MX_UART4_Init>
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);
	//HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4);
	/** Device Identification (Who am I) **/
//#define LSM6DS3_
	//receiver setup
	TIM3->CR1 |= TIM_CR1_CEN;
 8000fb0:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <main+0x1a8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a5c      	ldr	r2, [pc, #368]	; (8001128 <main+0x1a8>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]
	TIM3->DIER |= 0x18;
 8000fbc:	4b5a      	ldr	r3, [pc, #360]	; (8001128 <main+0x1a8>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	4a59      	ldr	r2, [pc, #356]	; (8001128 <main+0x1a8>)
 8000fc2:	f043 0318 	orr.w	r3, r3, #24
 8000fc6:	60d3      	str	r3, [r2, #12]
	TIM3->CCER |= 0x1100;
 8000fc8:	4b57      	ldr	r3, [pc, #348]	; (8001128 <main+0x1a8>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a56      	ldr	r2, [pc, #344]	; (8001128 <main+0x1a8>)
 8000fce:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8000fd2:	6213      	str	r3, [r2, #32]

	TIM2->CR1 |= TIM_CR1_CEN;
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]
	TIM2->DIER |= 0x18;
 8000fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fee:	f043 0318 	orr.w	r3, r3, #24
 8000ff2:	60d3      	str	r3, [r2, #12]
	TIM2->CCER |= 0x1100;
 8000ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffe:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8001002:	6213      	str	r3, [r2, #32]

	NVIC_EnableIRQ(TIM3_IRQn);
 8001004:	201d      	movs	r0, #29
 8001006:	f7ff ff9b 	bl	8000f40 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);
 800100a:	201c      	movs	r0, #28
 800100c:	f7ff ff98 	bl	8000f40 <__NVIC_EnableIRQ>

	HAL_StatusTypeDef ret = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	76fb      	strb	r3, [r7, #27]

	// SENSORS SETUP
	//set GYRO fullscale and ODR

	static uint8_t val;
	HAL_Delay(100);
 8001014:	2064      	movs	r0, #100	; 0x64
 8001016:	f002 f8f5 	bl	8003204 <HAL_Delay>
	uint8_t reg = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	707b      	strb	r3, [r7, #1]

	reg = 0x80;
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Mem_Write(&hi2c1, 0xD5, 0x12, 1, &reg, 1, HAL_MAX_DELAY);
 8001022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	1c7b      	adds	r3, r7, #1
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2212      	movs	r2, #18
 8001034:	21d5      	movs	r1, #213	; 0xd5
 8001036:	483d      	ldr	r0, [pc, #244]	; (800112c <main+0x1ac>)
 8001038:	f002 fc5a 	bl	80038f0 <HAL_I2C_Mem_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	76fb      	strb	r3, [r7, #27]
	HAL_Delay(100);
 8001040:	2064      	movs	r0, #100	; 0x64
 8001042:	f002 f8df 	bl	8003204 <HAL_Delay>

	reg = 0x74;
 8001046:	2374      	movs	r3, #116	; 0x74
 8001048:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Mem_Write(&hi2c1, 0xD5, 0x11, 1, &reg, 1, HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1c7b      	adds	r3, r7, #1
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	2211      	movs	r2, #17
 800105c:	21d5      	movs	r1, #213	; 0xd5
 800105e:	4833      	ldr	r0, [pc, #204]	; (800112c <main+0x1ac>)
 8001060:	f002 fc46 	bl	80038f0 <HAL_I2C_Mem_Write>
 8001064:	4603      	mov	r3, r0
 8001066:	76fb      	strb	r3, [r7, #27]
//
	reg = 0x7C;
 8001068:	237c      	movs	r3, #124	; 0x7c
 800106a:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Mem_Write(&hi2c1, 0xD5, 0x10, 1, &reg, 1, HAL_MAX_DELAY);
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2301      	movs	r3, #1
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	1c7b      	adds	r3, r7, #1
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2301      	movs	r3, #1
 800107c:	2210      	movs	r2, #16
 800107e:	21d5      	movs	r1, #213	; 0xd5
 8001080:	482a      	ldr	r0, [pc, #168]	; (800112c <main+0x1ac>)
 8001082:	f002 fc35 	bl	80038f0 <HAL_I2C_Mem_Write>
 8001086:	4603      	mov	r3, r0
 8001088:	76fb      	strb	r3, [r7, #27]

	reg = 0x44;
 800108a:	2344      	movs	r3, #68	; 0x44
 800108c:	707b      	strb	r3, [r7, #1]
	ret = HAL_I2C_Mem_Write(&hi2c1, 0xD5, 0x12, 1, &reg, 1, HAL_MAX_DELAY);
 800108e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2301      	movs	r3, #1
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	1c7b      	adds	r3, r7, #1
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2212      	movs	r2, #18
 80010a0:	21d5      	movs	r1, #213	; 0xd5
 80010a2:	4822      	ldr	r0, [pc, #136]	; (800112c <main+0x1ac>)
 80010a4:	f002 fc24 	bl	80038f0 <HAL_I2C_Mem_Write>
 80010a8:	4603      	mov	r3, r0
 80010aa:	76fb      	strb	r3, [r7, #27]

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80010ac:	2108      	movs	r1, #8
 80010ae:	4820      	ldr	r0, [pc, #128]	; (8001130 <main+0x1b0>)
 80010b0:	f004 fd64 	bl	8005b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80010b4:	210c      	movs	r1, #12
 80010b6:	481e      	ldr	r0, [pc, #120]	; (8001130 <main+0x1b0>)
 80010b8:	f004 fd60 	bl	8005b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80010bc:	2100      	movs	r1, #0
 80010be:	481d      	ldr	r0, [pc, #116]	; (8001134 <main+0x1b4>)
 80010c0:	f004 fd5c 	bl	8005b7c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80010c4:	210c      	movs	r1, #12
 80010c6:	481c      	ldr	r0, [pc, #112]	; (8001138 <main+0x1b8>)
 80010c8:	f004 fd58 	bl	8005b7c <HAL_TIM_PWM_Start>

	//set motor values to 1000 to stop spinning accidentally
	DriveMotors(1000, 1000, 1000, 1000);
 80010cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f001 fac8 	bl	8002670 <DriveMotors>

	rollPID.pGain = ROLL_P_GAIN;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <main+0x1bc>)
 80010e2:	4a17      	ldr	r2, [pc, #92]	; (8001140 <main+0x1c0>)
 80010e4:	605a      	str	r2, [r3, #4]
	rollPID.iGain = ROLL_I_GAIN;
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <main+0x1bc>)
 80010e8:	4a16      	ldr	r2, [pc, #88]	; (8001144 <main+0x1c4>)
 80010ea:	609a      	str	r2, [r3, #8]
	rollPID.dGain = ROLL_D_GAIN;
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <main+0x1bc>)
 80010ee:	4a16      	ldr	r2, [pc, #88]	; (8001148 <main+0x1c8>)
 80010f0:	60da      	str	r2, [r3, #12]

	pitchPID.pGain = PITCH_P_GAIN;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <main+0x1cc>)
 80010f4:	4a12      	ldr	r2, [pc, #72]	; (8001140 <main+0x1c0>)
 80010f6:	605a      	str	r2, [r3, #4]
	pitchPID.iGain = PITCH_I_GAIN;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <main+0x1cc>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <main+0x1c4>)
 80010fc:	609a      	str	r2, [r3, #8]
	pitchPID.dGain = PITCH_D_GAIN;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <main+0x1cc>)
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <main+0x1c8>)
 8001102:	60da      	str	r2, [r3, #12]

	yawPID.pGain = YAW_P_GAIN;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <main+0x1d0>)
 8001106:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800110a:	605a      	str	r2, [r3, #4]
	yawPID.iGain = YAW_I_GAIN;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <main+0x1d0>)
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <main+0x1d4>)
 8001110:	609a      	str	r2, [r3, #8]
	yawPID.dGain = YAW_D_GAIN;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <main+0x1d0>)
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	60da      	str	r2, [r3, #12]

	HAL_Delay(2000);
 800111a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800111e:	f002 f871 	bl	8003204 <HAL_Delay>
	for (int i = 0; i < 200; i++) {
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001126:	e046      	b.n	80011b6 <main+0x236>
 8001128:	40000400 	.word	0x40000400
 800112c:	2000032c 	.word	0x2000032c
 8001130:	20000510 	.word	0x20000510
 8001134:	20000378 	.word	0x20000378
 8001138:	200002e0 	.word	0x200002e0
 800113c:	20000268 	.word	0x20000268
 8001140:	3fa66666 	.word	0x3fa66666
 8001144:	3c23d70a 	.word	0x3c23d70a
 8001148:	40a00000 	.word	0x40a00000
 800114c:	20000288 	.word	0x20000288
 8001150:	200002a8 	.word	0x200002a8
 8001154:	3ca3d70a 	.word	0x3ca3d70a
		ReadGyroScopeData(&hi2c1, &Current_GyroData);
 8001158:	49d5      	ldr	r1, [pc, #852]	; (80014b0 <main+0x530>)
 800115a:	48d6      	ldr	r0, [pc, #856]	; (80014b4 <main+0x534>)
 800115c:	f001 fbe4 	bl	8002928 <ReadGyroScopeData>
		GyroDataBias.X += Current_GyroData.X;
 8001160:	4bd5      	ldr	r3, [pc, #852]	; (80014b8 <main+0x538>)
 8001162:	ed93 7a00 	vldr	s14, [r3]
 8001166:	4bd2      	ldr	r3, [pc, #840]	; (80014b0 <main+0x530>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001170:	4bd1      	ldr	r3, [pc, #836]	; (80014b8 <main+0x538>)
 8001172:	edc3 7a00 	vstr	s15, [r3]
		GyroDataBias.Y += Current_GyroData.Y;
 8001176:	4bd0      	ldr	r3, [pc, #832]	; (80014b8 <main+0x538>)
 8001178:	ed93 7a01 	vldr	s14, [r3, #4]
 800117c:	4bcc      	ldr	r3, [pc, #816]	; (80014b0 <main+0x530>)
 800117e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001186:	4bcc      	ldr	r3, [pc, #816]	; (80014b8 <main+0x538>)
 8001188:	edc3 7a01 	vstr	s15, [r3, #4]
		GyroDataBias.Z += Current_GyroData.Z;
 800118c:	4bca      	ldr	r3, [pc, #808]	; (80014b8 <main+0x538>)
 800118e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001192:	4bc7      	ldr	r3, [pc, #796]	; (80014b0 <main+0x530>)
 8001194:	edd3 7a02 	vldr	s15, [r3, #8]
 8001198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119c:	4bc6      	ldr	r3, [pc, #792]	; (80014b8 <main+0x538>)
 800119e:	edc3 7a02 	vstr	s15, [r3, #8]
		HAL_Delay(10);
 80011a2:	200a      	movs	r0, #10
 80011a4:	f002 f82e 	bl	8003204 <HAL_Delay>
		HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	48c4      	ldr	r0, [pc, #784]	; (80014bc <main+0x53c>)
 80011ac:	f002 faf6 	bl	800379c <HAL_GPIO_TogglePin>
	for (int i = 0; i < 200; i++) {
 80011b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b2:	3301      	adds	r3, #1
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	2bc7      	cmp	r3, #199	; 0xc7
 80011ba:	ddcd      	ble.n	8001158 <main+0x1d8>

	}

	GyroDataBias.X /= 200.0f;
 80011bc:	4bbe      	ldr	r3, [pc, #760]	; (80014b8 <main+0x538>)
 80011be:	ed93 7a00 	vldr	s14, [r3]
 80011c2:	eddf 6abf 	vldr	s13, [pc, #764]	; 80014c0 <main+0x540>
 80011c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ca:	4bbb      	ldr	r3, [pc, #748]	; (80014b8 <main+0x538>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]
	GyroDataBias.Y /= 200.0f;
 80011d0:	4bb9      	ldr	r3, [pc, #740]	; (80014b8 <main+0x538>)
 80011d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80011d6:	eddf 6aba 	vldr	s13, [pc, #744]	; 80014c0 <main+0x540>
 80011da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011de:	4bb6      	ldr	r3, [pc, #728]	; (80014b8 <main+0x538>)
 80011e0:	edc3 7a01 	vstr	s15, [r3, #4]
	GyroDataBias.Z /= 200.0f;
 80011e4:	4bb4      	ldr	r3, [pc, #720]	; (80014b8 <main+0x538>)
 80011e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80011ea:	eddf 6ab5 	vldr	s13, [pc, #724]	; 80014c0 <main+0x540>
 80011ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f2:	4bb1      	ldr	r3, [pc, #708]	; (80014b8 <main+0x538>)
 80011f4:	edc3 7a02 	vstr	s15, [r3, #8]

	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2120      	movs	r1, #32
 80011fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001200:	f002 fab4 	bl	800376c <HAL_GPIO_WritePin>
	/* USER CODE END 2 */
	float roll_copter = 0.0f;
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
	float pitch_copter = 0.0f;
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() - old_time >= 4) {
 8001210:	f001 ffec 	bl	80031ec <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	4bab      	ldr	r3, [pc, #684]	; (80014c4 <main+0x544>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b03      	cmp	r3, #3
 800121e:	d9f7      	bls.n	8001210 <main+0x290>

			ReadGyroScopeData(&hi2c1, &Current_GyroData);
 8001220:	49a3      	ldr	r1, [pc, #652]	; (80014b0 <main+0x530>)
 8001222:	48a4      	ldr	r0, [pc, #656]	; (80014b4 <main+0x534>)
 8001224:	f001 fb80 	bl	8002928 <ReadGyroScopeData>
			ReadAccelerometerData(&hi2c1, &Acc_Data);
 8001228:	49a7      	ldr	r1, [pc, #668]	; (80014c8 <main+0x548>)
 800122a:	48a2      	ldr	r0, [pc, #648]	; (80014b4 <main+0x534>)
 800122c:	f001 fb16 	bl	800285c <ReadAccelerometerData>

			float roll_acc  = 0.0f;
 8001230:	f04f 0300 	mov.w	r3, #0
 8001234:	623b      	str	r3, [r7, #32]
			float pitch_acc = 0.0f;
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
			float resultant_acceleration = sqrt(
					(Acc_Data.X * Acc_Data.X) + (Acc_Data.Y * Acc_Data.Y)
 800123c:	4ba2      	ldr	r3, [pc, #648]	; (80014c8 <main+0x548>)
 800123e:	ed93 7a00 	vldr	s14, [r3]
 8001242:	4ba1      	ldr	r3, [pc, #644]	; (80014c8 <main+0x548>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124c:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <main+0x548>)
 800124e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001252:	4b9d      	ldr	r3, [pc, #628]	; (80014c8 <main+0x548>)
 8001254:	edd3 7a01 	vldr	s15, [r3, #4]
 8001258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800125c:	ee37 7a27 	vadd.f32	s14, s14, s15
							+ (Acc_Data.Z * Acc_Data.Z)); //Calculate the total accelerometer vector.
 8001260:	4b99      	ldr	r3, [pc, #612]	; (80014c8 <main+0x548>)
 8001262:	edd3 6a02 	vldr	s13, [r3, #8]
 8001266:	4b98      	ldr	r3, [pc, #608]	; (80014c8 <main+0x548>)
 8001268:	edd3 7a02 	vldr	s15, [r3, #8]
 800126c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001270:	ee77 7a27 	vadd.f32	s15, s14, s15
			float resultant_acceleration = sqrt(
 8001274:	ee17 0a90 	vmov	r0, s15
 8001278:	f7ff f966 	bl	8000548 <__aeabi_f2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	ec43 2b10 	vmov	d0, r2, r3
 8001284:	f009 f87a 	bl	800a37c <sqrt>
 8001288:	ec53 2b10 	vmov	r2, r3, d0
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fc8a 	bl	8000ba8 <__aeabi_d2f>
 8001294:	4603      	mov	r3, r0
 8001296:	617b      	str	r3, [r7, #20]

			if (fabs(Acc_Data.Y) < resultant_acceleration) { //Prevent the asin function to produce a NaN
 8001298:	4b8b      	ldr	r3, [pc, #556]	; (80014c8 <main+0x548>)
 800129a:	edd3 7a01 	vldr	s15, [r3, #4]
 800129e:	eef0 7ae7 	vabs.f32	s15, s15
 80012a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ae:	dd1f      	ble.n	80012f0 <main+0x370>
				pitch_acc = asin((float) Acc_Data.Y / resultant_acceleration)
 80012b0:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <main+0x548>)
 80012b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80012b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012be:	ee16 0a90 	vmov	r0, s13
 80012c2:	f7ff f941 	bl	8000548 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f009 f81b 	bl	800a308 <asin>
 80012d2:	ec51 0b10 	vmov	r0, r1, d0
						* 57.296;          //Calculate the pitch angle.
 80012d6:	a370      	add	r3, pc, #448	; (adr r3, 8001498 <main+0x518>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f98c 	bl	80005f8 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
				pitch_acc = asin((float) Acc_Data.Y / resultant_acceleration)
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc5e 	bl	8000ba8 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	61fb      	str	r3, [r7, #28]
			}
			if (abs(Acc_Data.X) < resultant_acceleration) { //Prevent the asin function to produce a NaN
 80012f0:	4b75      	ldr	r3, [pc, #468]	; (80014c8 <main+0x548>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fa:	ee17 3a90 	vmov	r3, s15
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bfb8      	it	lt
 8001302:	425b      	neglt	r3, r3
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	dd1f      	ble.n	800135a <main+0x3da>
				roll_acc = asin((float) Acc_Data.X / resultant_acceleration)
 800131a:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <main+0x548>)
 800131c:	ed93 7a00 	vldr	s14, [r3]
 8001320:	edd7 7a05 	vldr	s15, [r7, #20]
 8001324:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001328:	ee16 0a90 	vmov	r0, s13
 800132c:	f7ff f90c 	bl	8000548 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	ec43 2b10 	vmov	d0, r2, r3
 8001338:	f008 ffe6 	bl	800a308 <asin>
 800133c:	ec51 0b10 	vmov	r0, r1, d0
						* -57.296;          //Calculate the roll angle.
 8001340:	a357      	add	r3, pc, #348	; (adr r3, 80014a0 <main+0x520>)
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	f7ff f957 	bl	80005f8 <__aeabi_dmul>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
				roll_acc = asin((float) Acc_Data.X / resultant_acceleration)
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc29 	bl	8000ba8 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	623b      	str	r3, [r7, #32]
			}


			GyroData.X = GyroData.X * 0.7f + (Current_GyroData.X - GyroDataBias.X) * 0.3f;
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <main+0x54c>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80014d0 <main+0x550>
 8001364:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <main+0x530>)
 800136a:	edd3 6a00 	vldr	s13, [r3]
 800136e:	4b52      	ldr	r3, [pc, #328]	; (80014b8 <main+0x538>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001378:	eddf 6a56 	vldr	s13, [pc, #344]	; 80014d4 <main+0x554>
 800137c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001384:	4b51      	ldr	r3, [pc, #324]	; (80014cc <main+0x54c>)
 8001386:	edc3 7a00 	vstr	s15, [r3]
			GyroData.Y = GyroData.Y * 0.7f + (Current_GyroData.Y - GyroDataBias.Y) * 0.3f;
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <main+0x54c>)
 800138c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001390:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80014d0 <main+0x550>
 8001394:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001398:	4b45      	ldr	r3, [pc, #276]	; (80014b0 <main+0x530>)
 800139a:	edd3 6a01 	vldr	s13, [r3, #4]
 800139e:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <main+0x538>)
 80013a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80013a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013a8:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80014d4 <main+0x554>
 80013ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	4b45      	ldr	r3, [pc, #276]	; (80014cc <main+0x54c>)
 80013b6:	edc3 7a01 	vstr	s15, [r3, #4]
			GyroData.Z = GyroData.Z * 0.7f + (Current_GyroData.Z - GyroDataBias.Z) * 0.3f;
 80013ba:	4b44      	ldr	r3, [pc, #272]	; (80014cc <main+0x54c>)
 80013bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80013c0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80014d0 <main+0x550>
 80013c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013c8:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <main+0x530>)
 80013ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80013ce:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <main+0x538>)
 80013d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80013d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013d8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80014d4 <main+0x554>
 80013dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <main+0x54c>)
 80013e6:	edc3 7a02 	vstr	s15, [r3, #8]

			pitch_copter += (-1.0*GyroData.X) * 0.004f;
 80013ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013ec:	f7ff f8ac 	bl	8000548 <__aeabi_f2d>
 80013f0:	4682      	mov	sl, r0
 80013f2:	468b      	mov	fp, r1
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <main+0x54c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f8a5 	bl	8000548 <__aeabi_f2d>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4614      	mov	r4, r2
 8001404:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001408:	a327      	add	r3, pc, #156	; (adr r3, 80014a8 <main+0x528>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	4620      	mov	r0, r4
 8001410:	4629      	mov	r1, r5
 8001412:	f7ff f8f1 	bl	80005f8 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4650      	mov	r0, sl
 800141c:	4659      	mov	r1, fp
 800141e:	f7fe ff35 	bl	800028c <__adddf3>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4610      	mov	r0, r2
 8001428:	4619      	mov	r1, r3
 800142a:	f7ff fbbd 	bl	8000ba8 <__aeabi_d2f>
 800142e:	4603      	mov	r3, r0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
			roll_copter  += (-1.0*GyroData.Y) * 0.004f;
 8001432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001434:	f7ff f888 	bl	8000548 <__aeabi_f2d>
 8001438:	4682      	mov	sl, r0
 800143a:	468b      	mov	fp, r1
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <main+0x54c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f881 	bl	8000548 <__aeabi_f2d>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4690      	mov	r8, r2
 800144c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001450:	a315      	add	r3, pc, #84	; (adr r3, 80014a8 <main+0x528>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	4640      	mov	r0, r8
 8001458:	4649      	mov	r1, r9
 800145a:	f7ff f8cd 	bl	80005f8 <__aeabi_dmul>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4650      	mov	r0, sl
 8001464:	4659      	mov	r1, fp
 8001466:	f7fe ff11 	bl	800028c <__adddf3>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fb99 	bl	8000ba8 <__aeabi_d2f>
 8001476:	4603      	mov	r3, r0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28



			roll_copter =  0.99f * roll_copter  + 0.01f  * roll_acc;
 800147a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800147e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80014d8 <main+0x558>
 8001482:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001486:	edd7 7a08 	vldr	s15, [r7, #32]
 800148a:	eddf 6a14 	vldr	s13, [pc, #80]	; 80014dc <main+0x55c>
 800148e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001492:	e025      	b.n	80014e0 <main+0x560>
 8001494:	f3af 8000 	nop.w
 8001498:	53f7ced9 	.word	0x53f7ced9
 800149c:	404ca5e3 	.word	0x404ca5e3
 80014a0:	53f7ced9 	.word	0x53f7ced9
 80014a4:	c04ca5e3 	.word	0xc04ca5e3
 80014a8:	e0000000 	.word	0xe0000000
 80014ac:	3f70624d 	.word	0x3f70624d
 80014b0:	20000234 	.word	0x20000234
 80014b4:	2000032c 	.word	0x2000032c
 80014b8:	2000024c 	.word	0x2000024c
 80014bc:	48000800 	.word	0x48000800
 80014c0:	43480000 	.word	0x43480000
 80014c4:	200002dc 	.word	0x200002dc
 80014c8:	20000240 	.word	0x20000240
 80014cc:	20000228 	.word	0x20000228
 80014d0:	3f333333 	.word	0x3f333333
 80014d4:	3e99999a 	.word	0x3e99999a
 80014d8:	3f7d70a4 	.word	0x3f7d70a4
 80014dc:	3c23d70a 	.word	0x3c23d70a
 80014e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			pitch_copter = 0.99f * pitch_copter + 0.01f  * pitch_acc;
 80014e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014ec:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80014d8 <main+0x558>
 80014f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014f8:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 80014dc <main+0x55c>
 80014fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24



			float pitch_level_adjust = roll_copter  * 15.0f; //Calculate the pitch angle correction
 8001508:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800150c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001514:	edc7 7a04 	vstr	s15, [r7, #16]
			float roll_level_adjust =  pitch_copter * 15.0f;
 8001518:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800151c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001524:	edc7 7a03 	vstr	s15, [r7, #12]


			if (throttle <= 1100 && yaw > 1800 && armed == 0) {
 8001528:	4bb6      	ldr	r3, [pc, #728]	; (8001804 <main+0x884>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	f240 424c 	movw	r2, #1100	; 0x44c
 8001530:	4293      	cmp	r3, r2
 8001532:	d80d      	bhi.n	8001550 <main+0x5d0>
 8001534:	4bb4      	ldr	r3, [pc, #720]	; (8001808 <main+0x888>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800153c:	d908      	bls.n	8001550 <main+0x5d0>
 800153e:	4bb3      	ldr	r3, [pc, #716]	; (800180c <main+0x88c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d104      	bne.n	8001550 <main+0x5d0>
				arm_counter += 1;
 8001546:	4bb2      	ldr	r3, [pc, #712]	; (8001810 <main+0x890>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	4ab0      	ldr	r2, [pc, #704]	; (8001810 <main+0x890>)
 800154e:	6013      	str	r3, [r2, #0]
			}

			if (arm_counter == 500) {
 8001550:	4baf      	ldr	r3, [pc, #700]	; (8001810 <main+0x890>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001558:	d11b      	bne.n	8001592 <main+0x612>
				arm_counter = 499;
 800155a:	4bad      	ldr	r3, [pc, #692]	; (8001810 <main+0x890>)
 800155c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001560:	601a      	str	r2, [r3, #0]
				armed = 1;
 8001562:	4baa      	ldr	r3, [pc, #680]	; (800180c <main+0x88c>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin,
 8001568:	2200      	movs	r2, #0
 800156a:	2120      	movs	r1, #32
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f002 f8fc 	bl	800376c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	48a6      	ldr	r0, [pc, #664]	; (8001814 <main+0x894>)
 800157a:	f002 f8f7 	bl	800376c <HAL_GPIO_WritePin>
				DriveMotors(MOTOR_MIN_SPEED, MOTOR_MIN_SPEED, MOTOR_MIN_SPEED,MOTOR_MIN_SPEED);          //SPIN MOTORS AT LOW SPEED
 800157e:	f240 437e 	movw	r3, #1150	; 0x47e
 8001582:	f240 427e 	movw	r2, #1150	; 0x47e
 8001586:	f240 417e 	movw	r1, #1150	; 0x47e
 800158a:	f240 407e 	movw	r0, #1150	; 0x47e
 800158e:	f001 f86f 	bl	8002670 <DriveMotors>

			}

			if (throttle <= 1100 && yaw <= 1200 && armed == 1) {
 8001592:	4b9c      	ldr	r3, [pc, #624]	; (8001804 <main+0x884>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	f240 424c 	movw	r2, #1100	; 0x44c
 800159a:	4293      	cmp	r3, r2
 800159c:	d80d      	bhi.n	80015ba <main+0x63a>
 800159e:	4b9a      	ldr	r3, [pc, #616]	; (8001808 <main+0x888>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80015a6:	d808      	bhi.n	80015ba <main+0x63a>
 80015a8:	4b98      	ldr	r3, [pc, #608]	; (800180c <main+0x88c>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d104      	bne.n	80015ba <main+0x63a>
				arm_counter -= 1;
 80015b0:	4b97      	ldr	r3, [pc, #604]	; (8001810 <main+0x890>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	4a96      	ldr	r2, [pc, #600]	; (8001810 <main+0x890>)
 80015b8:	6013      	str	r3, [r2, #0]

			}
			if (armed == 1 && arm_counter == 0) {
 80015ba:	4b94      	ldr	r3, [pc, #592]	; (800180c <main+0x88c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d11d      	bne.n	80015fe <main+0x67e>
 80015c2:	4b93      	ldr	r3, [pc, #588]	; (8001810 <main+0x890>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d119      	bne.n	80015fe <main+0x67e>

				DriveMotors(1000, 1000, 1000, 1000);
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015da:	f001 f849 	bl	8002670 <DriveMotors>
				armed = 0;
 80015de:	4b8b      	ldr	r3, [pc, #556]	; (800180c <main+0x88c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin,
 80015e4:	2201      	movs	r2, #1
 80015e6:	2120      	movs	r1, #32
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f002 f8be 	bl	800376c <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin,
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	4887      	ldr	r0, [pc, #540]	; (8001814 <main+0x894>)
 80015f6:	f002 f8b9 	bl	800376c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				reset_variables();
 80015fa:	f000 ff47 	bl	800248c <reset_variables>
			}

			float thr = (float) condition_values(1100, 1800, throttle);
 80015fe:	4b81      	ldr	r3, [pc, #516]	; (8001804 <main+0x884>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8001608:	f240 404c 	movw	r0, #1100	; 0x44c
 800160c:	f000 ff58 	bl	80024c0 <condition_values>
 8001610:	ee07 0a90 	vmov	s15, r0
 8001614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001618:	edc7 7a02 	vstr	s15, [r7, #8]

			//calculate roll, pitch and yaw pid outputs

			rollPID.input = GyroData.X;
 800161c:	4b7e      	ldr	r3, [pc, #504]	; (8001818 <main+0x898>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a7e      	ldr	r2, [pc, #504]	; (800181c <main+0x89c>)
 8001622:	6153      	str	r3, [r2, #20]
			pitchPID.input = -1* GyroData.Y;
 8001624:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <main+0x898>)
 8001626:	edd3 7a01 	vldr	s15, [r3, #4]
 800162a:	eef1 7a67 	vneg.f32	s15, s15
 800162e:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <main+0x8a0>)
 8001630:	edc3 7a05 	vstr	s15, [r3, #20]
			yawPID.input = GyroData.Z;
 8001634:	4b78      	ldr	r3, [pc, #480]	; (8001818 <main+0x898>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a7a      	ldr	r2, [pc, #488]	; (8001824 <main+0x8a4>)
 800163a:	6153      	str	r3, [r2, #20]



			if(rollPID.input > 500.0f)
 800163c:	4b77      	ldr	r3, [pc, #476]	; (800181c <main+0x89c>)
 800163e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001642:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001828 <main+0x8a8>
 8001646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800164a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164e:	dd02      	ble.n	8001656 <main+0x6d6>
			{
				rollPID.input = 500.0f	;
 8001650:	4b72      	ldr	r3, [pc, #456]	; (800181c <main+0x89c>)
 8001652:	4a76      	ldr	r2, [pc, #472]	; (800182c <main+0x8ac>)
 8001654:	615a      	str	r2, [r3, #20]
			}
			if(rollPID.input < -500.0f)
 8001656:	4b71      	ldr	r3, [pc, #452]	; (800181c <main+0x89c>)
 8001658:	edd3 7a05 	vldr	s15, [r3, #20]
 800165c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001830 <main+0x8b0>
 8001660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001668:	d502      	bpl.n	8001670 <main+0x6f0>
			{
				rollPID.input = -500.0f	;
 800166a:	4b6c      	ldr	r3, [pc, #432]	; (800181c <main+0x89c>)
 800166c:	4a71      	ldr	r2, [pc, #452]	; (8001834 <main+0x8b4>)
 800166e:	615a      	str	r2, [r3, #20]
			}
			if(pitchPID.input > 500.0f)
 8001670:	4b6b      	ldr	r3, [pc, #428]	; (8001820 <main+0x8a0>)
 8001672:	edd3 7a05 	vldr	s15, [r3, #20]
 8001676:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001828 <main+0x8a8>
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	dd02      	ble.n	800168a <main+0x70a>
			{
				pitchPID.input = 500.0f	;
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <main+0x8a0>)
 8001686:	4a69      	ldr	r2, [pc, #420]	; (800182c <main+0x8ac>)
 8001688:	615a      	str	r2, [r3, #20]
			}
			if(pitchPID.input < -500.0f)
 800168a:	4b65      	ldr	r3, [pc, #404]	; (8001820 <main+0x8a0>)
 800168c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001690:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001830 <main+0x8b0>
 8001694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	d502      	bpl.n	80016a4 <main+0x724>
			{
				pitchPID.input = -500.0f	;
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <main+0x8a0>)
 80016a0:	4a64      	ldr	r2, [pc, #400]	; (8001834 <main+0x8b4>)
 80016a2:	615a      	str	r2, [r3, #20]
			}
			if(yawPID.input > 500.0f)
 80016a4:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <main+0x8a4>)
 80016a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016aa:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001828 <main+0x8a8>
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	dd02      	ble.n	80016be <main+0x73e>
			{
				yawPID.input = 500.0f	;
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <main+0x8a4>)
 80016ba:	4a5c      	ldr	r2, [pc, #368]	; (800182c <main+0x8ac>)
 80016bc:	615a      	str	r2, [r3, #20]
			}
			if(yawPID.input < -500.0f)
 80016be:	4b59      	ldr	r3, [pc, #356]	; (8001824 <main+0x8a4>)
 80016c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80016c4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001830 <main+0x8b0>
 80016c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d0:	d502      	bpl.n	80016d8 <main+0x758>
			{
				yawPID.input = -500.0f	;
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <main+0x8a4>)
 80016d4:	4a57      	ldr	r2, [pc, #348]	; (8001834 <main+0x8b4>)
 80016d6:	615a      	str	r2, [r3, #20]
//
//			size = sprintf(buff, "\r\n%f, %f, %f", rollPID.input,pitchPID.input,yawPID.input );
//
//			HAL_UART_Transmit(&huart4, buff, size, 1000);

			uint16_t roll_in = roll;
 80016d8:	4b57      	ldr	r3, [pc, #348]	; (8001838 <main+0x8b8>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	80fb      	strh	r3, [r7, #6]
			uint16_t pitch_in = pitch;
 80016de:	4b57      	ldr	r3, [pc, #348]	; (800183c <main+0x8bc>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	80bb      	strh	r3, [r7, #4]
			uint16_t yaw_in  = yaw;
 80016e4:	4b48      	ldr	r3, [pc, #288]	; (8001808 <main+0x888>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	807b      	strh	r3, [r7, #2]

#ifdef ROLL_REVERSE
			 roll_in = map(roll, 1000, 2000, 2000, 1000);
 80016ea:	4b53      	ldr	r3, [pc, #332]	; (8001838 <main+0x8b8>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f6:	ed9f 2a52 	vldr	s4, [pc, #328]	; 8001840 <main+0x8c0>
 80016fa:	eddf 1a52 	vldr	s3, [pc, #328]	; 8001844 <main+0x8c4>
 80016fe:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8001844 <main+0x8c4>
 8001702:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8001840 <main+0x8c0>
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	f000 fe91 	bl	8002430 <map>
 800170e:	eef0 7a40 	vmov.f32	s15, s0
 8001712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001716:	ee17 3a90 	vmov	r3, s15
 800171a:	80fb      	strh	r3, [r7, #6]
#endif

#ifdef PITCH_REVERSE
			 pitch_in = map(pitch, 1000, 2000, 2000, 1000);
 800171c:	4b47      	ldr	r3, [pc, #284]	; (800183c <main+0x8bc>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001728:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8001840 <main+0x8c0>
 800172c:	eddf 1a45 	vldr	s3, [pc, #276]	; 8001844 <main+0x8c4>
 8001730:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8001844 <main+0x8c4>
 8001734:	eddf 0a42 	vldr	s1, [pc, #264]	; 8001840 <main+0x8c0>
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f000 fe78 	bl	8002430 <map>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001748:	ee17 3a90 	vmov	r3, s15
 800174c:	80bb      	strh	r3, [r7, #4]
#ifdef YAW_REVERSE
			 yaw_in = map(yaw, 1000, 2000, 2000, 1000);
#endif


			rollPID.setPoint = 0.0f;
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <main+0x89c>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	619a      	str	r2, [r3, #24]
			pitchPID.setPoint = 0.0f;
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <main+0x8a0>)
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
			yawPID.setPoint = 0.0f;
 800175e:	4b31      	ldr	r3, [pc, #196]	; (8001824 <main+0x8a4>)
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	619a      	str	r2, [r3, #24]




			if (roll_in > 1508) {
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800176c:	4293      	cmp	r3, r2
 800176e:	d90a      	bls.n	8001786 <main+0x806>
				rollPID.setPoint = roll_in - 1508;
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <main+0x89c>)
 8001780:	edc3 7a06 	vstr	s15, [r3, #24]
 8001784:	e00e      	b.n	80017a4 <main+0x824>

			} else if (roll_in < 1492) {
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	f240 52d3 	movw	r2, #1491	; 0x5d3
 800178c:	4293      	cmp	r3, r2
 800178e:	d809      	bhi.n	80017a4 <main+0x824>
				rollPID.setPoint = roll_in - 1492;
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <main+0x89c>)
 80017a0:	edc3 7a06 	vstr	s15, [r3, #24]

			}

			if (pitch_in > 1508) {
 80017a4:	88bb      	ldrh	r3, [r7, #4]
 80017a6:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d90a      	bls.n	80017c4 <main+0x844>
				pitchPID.setPoint = pitch_in - 1508;
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <main+0x8a0>)
 80017be:	edc3 7a06 	vstr	s15, [r3, #24]
 80017c2:	e00e      	b.n	80017e2 <main+0x862>

			} else if (pitch_in < 1492) {
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	f240 52d3 	movw	r2, #1491	; 0x5d3
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d809      	bhi.n	80017e2 <main+0x862>
				pitchPID.setPoint = pitch_in - 1492;
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <main+0x8a0>)
 80017de:	edc3 7a06 	vstr	s15, [r3, #24]
			}

			if (yaw_in > 1508) {
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d92d      	bls.n	8001848 <main+0x8c8>
				yawPID.setPoint = yaw_in - 1508;
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	f2a3 53e4 	subw	r3, r3, #1508	; 0x5e4
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <main+0x8a4>)
 80017fc:	edc3 7a06 	vstr	s15, [r3, #24]
 8001800:	e031      	b.n	8001866 <main+0x8e6>
 8001802:	bf00      	nop
 8001804:	20000260 	.word	0x20000260
 8001808:	20000266 	.word	0x20000266
 800180c:	200002cc 	.word	0x200002cc
 8001810:	200002c8 	.word	0x200002c8
 8001814:	48000800 	.word	0x48000800
 8001818:	20000228 	.word	0x20000228
 800181c:	20000268 	.word	0x20000268
 8001820:	20000288 	.word	0x20000288
 8001824:	200002a8 	.word	0x200002a8
 8001828:	43fa0000 	.word	0x43fa0000
 800182c:	43fa0000 	.word	0x43fa0000
 8001830:	c3fa0000 	.word	0xc3fa0000
 8001834:	c3fa0000 	.word	0xc3fa0000
 8001838:	20000264 	.word	0x20000264
 800183c:	20000262 	.word	0x20000262
 8001840:	447a0000 	.word	0x447a0000
 8001844:	44fa0000 	.word	0x44fa0000

			} else if (yaw_in < 1492) {
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	f240 52d3 	movw	r2, #1491	; 0x5d3
 800184e:	4293      	cmp	r3, r2
 8001850:	d809      	bhi.n	8001866 <main+0x8e6>
				yawPID.setPoint = yaw_in - 1492;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	f2a3 53d4 	subw	r3, r3, #1492	; 0x5d4
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <main+0x98c>)
 8001862:	edc3 7a06 	vstr	s15, [r3, #24]
			}

				rollPID.setPoint += roll_level_adjust;
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <main+0x990>)
 8001868:	ed93 7a06 	vldr	s14, [r3, #24]
 800186c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <main+0x990>)
 8001876:	edc3 7a06 	vstr	s15, [r3, #24]
			rollPID.setPoint = rollPID.setPoint / 3.0f;
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <main+0x990>)
 800187c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001880:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001884:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <main+0x990>)
 800188a:	edc3 7a06 	vstr	s15, [r3, #24]

				pitchPID.setPoint -= pitch_level_adjust;
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <main+0x994>)
 8001890:	ed93 7a06 	vldr	s14, [r3, #24]
 8001894:	edd7 7a04 	vldr	s15, [r7, #16]
 8001898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <main+0x994>)
 800189e:	edc3 7a06 	vstr	s15, [r3, #24]
			pitchPID.setPoint = pitchPID.setPoint / 3.0f;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <main+0x994>)
 80018a4:	ed93 7a06 	vldr	s14, [r3, #24]
 80018a8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80018ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <main+0x994>)
 80018b2:	edc3 7a06 	vstr	s15, [r3, #24]

			if (throttle > 1200) {
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <main+0x998>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80018be:	d90a      	bls.n	80018d6 <main+0x956>
				yawPID.setPoint = yawPID.setPoint / 5.0f;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <main+0x98c>)
 80018c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80018c6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80018ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <main+0x98c>)
 80018d0:	edc3 7a06 	vstr	s15, [r3, #24]
 80018d4:	e003      	b.n	80018de <main+0x95e>
			}
			else
			{
				yawPID.setPoint  = 0.0f;
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <main+0x98c>)
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]


//			size = sprintf(buff, "\r\n%f, %f, %f", rollPID.output,pitchPID.output,yawPID.output );
//
//			HAL_UART_Transmit(&huart4, buff, size, 1000);
			if (armed) {
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <main+0x99c>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00c      	beq.n	8001900 <main+0x980>
				calculate_pid_output(&rollPID);
 80018e6:	480a      	ldr	r0, [pc, #40]	; (8001910 <main+0x990>)
 80018e8:	f000 ff18 	bl	800271c <calculate_pid_output>
				calculate_pid_output(&pitchPID);
 80018ec:	4809      	ldr	r0, [pc, #36]	; (8001914 <main+0x994>)
 80018ee:	f000 ff15 	bl	800271c <calculate_pid_output>
				calculate_pid_output(&yawPID);
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <main+0x98c>)
 80018f4:	f000 ff12 	bl	800271c <calculate_pid_output>

				//calculate motor speed and drive motors
				CalculateOutput(thr);
 80018f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80018fc:	f000 fdfa 	bl	80024f4 <CalculateOutput>
			}
			old_time = HAL_GetTick();
 8001900:	f001 fc74 	bl	80031ec <HAL_GetTick>
 8001904:	4603      	mov	r3, r0
 8001906:	4a06      	ldr	r2, [pc, #24]	; (8001920 <main+0x9a0>)
 8001908:	6013      	str	r3, [r2, #0]
		if (HAL_GetTick() - old_time >= 4) {
 800190a:	e481      	b.n	8001210 <main+0x290>
 800190c:	200002a8 	.word	0x200002a8
 8001910:	20000268 	.word	0x20000268
 8001914:	20000288 	.word	0x20000288
 8001918:	20000260 	.word	0x20000260
 800191c:	200002cc 	.word	0x200002cc
 8001920:	200002dc 	.word	0x200002dc

08001924 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b096      	sub	sp, #88	; 0x58
 8001928:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	2244      	movs	r2, #68	; 0x44
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f006 f81e 	bl	8007974 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001938:	463b      	mov	r3, r7
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001946:	f44f 7000 	mov.w	r0, #512	; 0x200
 800194a:	f002 fd5b 	bl	8004404 <HAL_PWREx_ControlVoltageScaling>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001954:	f000 fe86 	bl	8002664 <Error_Handler>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001958:	f002 fd36 	bl	80043c8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800195c:	4b21      	ldr	r3, [pc, #132]	; (80019e4 <SystemClock_Config+0xc0>)
 800195e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001962:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <SystemClock_Config+0xc0>)
 8001964:	f023 0318 	bic.w	r3, r3, #24
 8001968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 800196c:	2314      	movs	r3, #20
 800196e:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001970:	2301      	movs	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800197c:	2360      	movs	r3, #96	; 0x60
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001980:	2302      	movs	r3, #2
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001984:	2301      	movs	r3, #1
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001988:	2301      	movs	r3, #1
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 800198c:	2328      	movs	r3, #40	; 0x28
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001990:	2307      	movs	r3, #7
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001994:	2302      	movs	r3, #2
 8001996:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001998:	2302      	movs	r3, #2
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fd85 	bl	80044b0 <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x8c>
		Error_Handler();
 80019ac:	f000 fe5a 	bl	8002664 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80019b0:	230f      	movs	r3, #15
 80019b2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b4:	2303      	movs	r3, #3
 80019b6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80019c4:	463b      	mov	r3, r7
 80019c6:	2104      	movs	r1, #4
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 f957 	bl	8004c7c <HAL_RCC_ClockConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0xb4>
		Error_Handler();
 80019d4:	f000 fe46 	bl	8002664 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80019d8:	f003 fe40 	bl	800565c <HAL_RCCEx_EnableMSIPLLMode>
}
 80019dc:	bf00      	nop
 80019de:	3758      	adds	r7, #88	; 0x58
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000

080019e8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_I2C1_Init+0x74>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <MX_I2C1_Init+0x78>)
 80019f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00702991;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_I2C1_Init+0x74>)
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <MX_I2C1_Init+0x7c>)
 80019f6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_I2C1_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a24:	f001 fed4 	bl	80037d0 <HAL_I2C_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001a2e:	f000 fe19 	bl	8002664 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a36:	f002 fc2f 	bl	8004298 <HAL_I2CEx_ConfigAnalogFilter>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001a40:	f000 fe10 	bl	8002664 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001a44:	2100      	movs	r1, #0
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_I2C1_Init+0x74>)
 8001a48:	f002 fc71 	bl	800432e <HAL_I2CEx_ConfigDigitalFilter>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001a52:	f000 fe07 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000032c 	.word	0x2000032c
 8001a60:	40005400 	.word	0x40005400
 8001a64:	00702991 	.word	0x00702991

08001a68 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b09a      	sub	sp, #104	; 0x68
 8001a6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	222c      	movs	r2, #44	; 0x2c
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 ff66 	bl	8007974 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001aa8:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001aaa:	4a4b      	ldr	r2, [pc, #300]	; (8001bd8 <MX_TIM1_Init+0x170>)
 8001aac:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100 - 1;
 8001aae:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001ab0:	2263      	movs	r2, #99	; 0x63
 8001ab2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2000 - 1;
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001abc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001ac0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b44      	ldr	r3, [pc, #272]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001ac8:	4b42      	ldr	r3, [pc, #264]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001ad4:	483f      	ldr	r0, [pc, #252]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001ad6:	f003 ffa3 	bl	8005a20 <HAL_TIM_Base_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001ae0:	f000 fdc0 	bl	8002664 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae8:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001aea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aee:	4619      	mov	r1, r3
 8001af0:	4838      	ldr	r0, [pc, #224]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001af2:	f004 fb5b 	bl	80061ac <HAL_TIM_ConfigClockSource>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM1_Init+0x98>
		Error_Handler();
 8001afc:	f000 fdb2 	bl	8002664 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001b00:	4834      	ldr	r0, [pc, #208]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001b02:	f003 ffe4 	bl	8005ace <HAL_TIM_PWM_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8001b0c:	f000 fdaa 	bl	8002664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001b1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b20:	4619      	mov	r1, r3
 8001b22:	482c      	ldr	r0, [pc, #176]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001b24:	f005 f960 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8001b2e:	f000 fd99 	bl	8002664 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b32:	2360      	movs	r3, #96	; 0x60
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 1000;
 8001b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001b50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b54:	2208      	movs	r2, #8
 8001b56:	4619      	mov	r1, r3
 8001b58:	481e      	ldr	r0, [pc, #120]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001b5a:	f004 fa13 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM1_Init+0x100>
			!= HAL_OK) {
		Error_Handler();
 8001b64:	f000 fd7e 	bl	8002664 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8001b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b6c:	220c      	movs	r2, #12
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4818      	ldr	r0, [pc, #96]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001b72:	f004 fa07 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM1_Init+0x118>
			!= HAL_OK) {
		Error_Handler();
 8001b7c:	f000 fd72 	bl	8002664 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b98:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4807      	ldr	r0, [pc, #28]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001bb6:	f005 f99f 	bl	8006ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM1_Init+0x15c>
			!= HAL_OK) {
		Error_Handler();
 8001bc0:	f000 fd50 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001bc4:	4803      	ldr	r0, [pc, #12]	; (8001bd4 <MX_TIM1_Init+0x16c>)
 8001bc6:	f001 f871 	bl	8002cac <HAL_TIM_MspPostInit>

}
 8001bca:	bf00      	nop
 8001bcc:	3768      	adds	r7, #104	; 0x68
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000510 	.word	0x20000510
 8001bd8:	40012c00 	.word	0x40012c00

08001bdc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	; 0x30
 8001be0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c0e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 79;
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c12:	224f      	movs	r2, #79	; 0x4f
 8001c14:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001c30:	4827      	ldr	r0, [pc, #156]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c32:	f003 fef5 	bl	8005a20 <HAL_TIM_Base_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM2_Init+0x64>
		Error_Handler();
 8001c3c:	f000 fd12 	bl	8002664 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001c46:	f107 0320 	add.w	r3, r7, #32
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4820      	ldr	r0, [pc, #128]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c4e:	f004 faad 	bl	80061ac <HAL_TIM_ConfigClockSource>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM2_Init+0x80>
		Error_Handler();
 8001c58:	f000 fd04 	bl	8002664 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001c5c:	481c      	ldr	r0, [pc, #112]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c5e:	f004 f893 	bl	8005d88 <HAL_TIM_IC_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM2_Init+0x90>
		Error_Handler();
 8001c68:	f000 fcfc 	bl	8002664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001c7c:	f005 f8b4 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM2_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8001c86:	f000 fced 	bl	8002664 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001ca2:	f004 f8d2 	bl	8005e4a <HAL_TIM_IC_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM2_Init+0xd4>
		Error_Handler();
 8001cac:	f000 fcda 	bl	8002664 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <MX_TIM2_Init+0xf4>)
 8001cb8:	f004 f8c7 	bl	8005e4a <HAL_TIM_IC_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM2_Init+0xea>
		Error_Handler();
 8001cc2:	f000 fccf 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	3730      	adds	r7, #48	; 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200005e0 	.word	0x200005e0

08001cd4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08c      	sub	sp, #48	; 0x30
 8001cd8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	__HAL_RCC_TIM3_CLK_ENABLE();
 8001cda:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <MX_TIM3_Init+0x108>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a3f      	ldr	r2, [pc, #252]	; (8001ddc <MX_TIM3_Init+0x108>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <MX_TIM3_Init+0x108>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001cf2:	f107 0320 	add.w	r3, r7, #32
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d1a:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <MX_TIM3_Init+0x110>)
 8001d1c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 79;
 8001d1e:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d20:	224f      	movs	r2, #79	; 0x4f
 8001d22:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001d2a:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d30:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d38:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001d3e:	4828      	ldr	r0, [pc, #160]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d40:	f003 fe6e 	bl	8005a20 <HAL_TIM_Base_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x7a>
		Error_Handler();
 8001d4a:	f000 fc8b 	bl	8002664 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d52:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4821      	ldr	r0, [pc, #132]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d5c:	f004 fa26 	bl	80061ac <HAL_TIM_ConfigClockSource>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM3_Init+0x96>
		Error_Handler();
 8001d66:	f000 fc7d 	bl	8002664 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8001d6a:	481d      	ldr	r0, [pc, #116]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d6c:	f004 f80c 	bl	8005d88 <HAL_TIM_IC_Init>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM3_Init+0xa6>
		Error_Handler();
 8001d76:	f000 fc75 	bl	8002664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4815      	ldr	r0, [pc, #84]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001d8a:	f005 f82d 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM3_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001d94:	f000 fc66 	bl	8002664 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2208      	movs	r2, #8
 8001dac:	4619      	mov	r1, r3
 8001dae:	480c      	ldr	r0, [pc, #48]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001db0:	f004 f84b 	bl	8005e4a <HAL_TIM_IC_ConfigChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM3_Init+0xea>
		Error_Handler();
 8001dba:	f000 fc53 	bl	8002664 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	220c      	movs	r2, #12
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4806      	ldr	r0, [pc, #24]	; (8001de0 <MX_TIM3_Init+0x10c>)
 8001dc6:	f004 f840 	bl	8005e4a <HAL_TIM_IC_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM3_Init+0x100>
		Error_Handler();
 8001dd0:	f000 fc48 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	3730      	adds	r7, #48	; 0x30
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	200004c4 	.word	0x200004c4
 8001de4:	40000400 	.word	0x40000400

08001de8 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b096      	sub	sp, #88	; 0x58
 8001dec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001dee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	615a      	str	r2, [r3, #20]
 8001e0c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	222c      	movs	r2, #44	; 0x2c
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f005 fdad 	bl	8007974 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e1c:	4a38      	ldr	r2, [pc, #224]	; (8001f00 <MX_TIM8_Init+0x118>)
 8001e1e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 100 - 1;
 8001e20:	4b36      	ldr	r3, [pc, #216]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e22:	2263      	movs	r2, #99	; 0x63
 8001e24:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e26:	4b35      	ldr	r3, [pc, #212]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 2000 - 1;
 8001e2c:	4b33      	ldr	r3, [pc, #204]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e2e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001e32:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001e3a:	4b30      	ldr	r3, [pc, #192]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e40:	4b2e      	ldr	r3, [pc, #184]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001e46:	482d      	ldr	r0, [pc, #180]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e48:	f003 fe41 	bl	8005ace <HAL_TIM_PWM_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM8_Init+0x6e>
		Error_Handler();
 8001e52:	f000 fc07 	bl	8002664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001e62:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e66:	4619      	mov	r1, r3
 8001e68:	4824      	ldr	r0, [pc, #144]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e6a:	f004 ffbd 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM8_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001e74:	f000 fbf6 	bl	8002664 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e78:	2360      	movs	r3, #96	; 0x60
 8001e7a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 1000;
 8001e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e82:	2300      	movs	r3, #0
 8001e84:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 8001e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e96:	220c      	movs	r2, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4818      	ldr	r0, [pc, #96]	; (8001efc <MX_TIM8_Init+0x114>)
 8001e9c:	f004 f872 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM8_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 8001ea6:	f000 fbdd 	bl	8002664 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec2:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4807      	ldr	r0, [pc, #28]	; (8001efc <MX_TIM8_Init+0x114>)
 8001ee0:	f005 f80a 	bl	8006ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM8_Init+0x106>
			!= HAL_OK) {
		Error_Handler();
 8001eea:	f000 fbbb 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001eee:	4803      	ldr	r0, [pc, #12]	; (8001efc <MX_TIM8_Init+0x114>)
 8001ef0:	f000 fedc 	bl	8002cac <HAL_TIM_MspPostInit>

}
 8001ef4:	bf00      	nop
 8001ef6:	3758      	adds	r7, #88	; 0x58
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200002e0 	.word	0x200002e0
 8001f00:	40013400 	.word	0x40013400

08001f04 <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b09a      	sub	sp, #104	; 0x68
 8001f08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001f24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
 8001f34:	615a      	str	r2, [r3, #20]
 8001f36:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	222c      	movs	r2, #44	; 0x2c
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f005 fd18 	bl	8007974 <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8001f44:	4b44      	ldr	r3, [pc, #272]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f46:	4a45      	ldr	r2, [pc, #276]	; (800205c <MX_TIM15_Init+0x158>)
 8001f48:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 100 - 1;
 8001f4a:	4b43      	ldr	r3, [pc, #268]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f4c:	2263      	movs	r2, #99	; 0x63
 8001f4e:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f50:	4b41      	ldr	r3, [pc, #260]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 2000 - 1;
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f58:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001f5c:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8001f64:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8001f70:	4839      	ldr	r0, [pc, #228]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f72:	f003 fd55 	bl	8005a20 <HAL_TIM_Base_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM15_Init+0x7c>
		Error_Handler();
 8001f7c:	f000 fb72 	bl	8002664 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f84:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8001f86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4832      	ldr	r0, [pc, #200]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f8e:	f004 f90d 	bl	80061ac <HAL_TIM_ConfigClockSource>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_TIM15_Init+0x98>
		Error_Handler();
 8001f98:	f000 fb64 	bl	8002664 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8001f9c:	482e      	ldr	r0, [pc, #184]	; (8002058 <MX_TIM15_Init+0x154>)
 8001f9e:	f003 fd96 	bl	8005ace <HAL_TIM_PWM_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM15_Init+0xa8>
		Error_Handler();
 8001fa8:	f000 fb5c 	bl	8002664 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8001fb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4827      	ldr	r0, [pc, #156]	; (8002058 <MX_TIM15_Init+0x154>)
 8001fbc:	f004 ff14 	bl	8006de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM15_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8001fc6:	f000 fb4d 	bl	8002664 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fca:	2360      	movs	r3, #96	; 0x60
 8001fcc:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 1000;
 8001fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1)
 8001fe8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fec:	2200      	movs	r2, #0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4819      	ldr	r0, [pc, #100]	; (8002058 <MX_TIM15_Init+0x154>)
 8001ff2:	f003 ffc7 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM15_Init+0xfc>
			!= HAL_OK) {
		Error_Handler();
 8001ffc:	f000 fb32 	bl	8002664 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2)
 8002000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002004:	2204      	movs	r2, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4813      	ldr	r0, [pc, #76]	; (8002058 <MX_TIM15_Init+0x154>)
 800200a:	f003 ffbb 	bl	8005f84 <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM15_Init+0x114>
			!= HAL_OK) {
		Error_Handler();
 8002014:	f000 fb26 	bl	8002664 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002030:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig)
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <MX_TIM15_Init+0x154>)
 800203c:	f004 ff5c 	bl	8006ef8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM15_Init+0x146>
			!= HAL_OK) {
		Error_Handler();
 8002046:	f000 fb0d 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 800204a:	4803      	ldr	r0, [pc, #12]	; (8002058 <MX_TIM15_Init+0x154>)
 800204c:	f000 fe2e 	bl	8002cac <HAL_TIM_MspPostInit>

}
 8002050:	bf00      	nop
 8002052:	3768      	adds	r7, #104	; 0x68
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000378 	.word	0x20000378
 800205c:	40014000 	.word	0x40014000

08002060 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MX_UART4_Init+0x58>)
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <MX_UART4_Init+0x5c>)
 8002068:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <MX_UART4_Init+0x58>)
 800206c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002070:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_UART4_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_UART4_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_UART4_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_UART4_Init+0x58>)
 8002086:	220c      	movs	r2, #12
 8002088:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_UART4_Init+0x58>)
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_UART4_Init+0x58>)
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_UART4_Init+0x58>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_UART4_Init+0x58>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_UART4_Init+0x58>)
 80020a4:	f004 ffa6 	bl	8006ff4 <HAL_UART_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_UART4_Init+0x52>
		Error_Handler();
 80020ae:	f000 fad9 	bl	8002664 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000055c 	.word	0x2000055c
 80020bc:	40004c00 	.word	0x40004c00

080020c0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020d6:	4b2e      	ldr	r3, [pc, #184]	; (8002190 <MX_GPIO_Init+0xd0>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020da:	4a2d      	ldr	r2, [pc, #180]	; (8002190 <MX_GPIO_Init+0xd0>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <MX_GPIO_Init+0xd0>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b28      	ldr	r3, [pc, #160]	; (8002190 <MX_GPIO_Init+0xd0>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	4a27      	ldr	r2, [pc, #156]	; (8002190 <MX_GPIO_Init+0xd0>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fa:	4b25      	ldr	r3, [pc, #148]	; (8002190 <MX_GPIO_Init+0xd0>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <MX_GPIO_Init+0xd0>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a21      	ldr	r2, [pc, #132]	; (8002190 <MX_GPIO_Init+0xd0>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002112:	4b1f      	ldr	r3, [pc, #124]	; (8002190 <MX_GPIO_Init+0xd0>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2120      	movs	r1, #32
 8002122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002126:	f001 fb21 	bl	800376c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	2140      	movs	r1, #64	; 0x40
 800212e:	4819      	ldr	r0, [pc, #100]	; (8002194 <MX_GPIO_Init+0xd4>)
 8002130:	f001 fb1c 	bl	800376c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002138:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4619      	mov	r1, r3
 8002148:	4812      	ldr	r0, [pc, #72]	; (8002194 <MX_GPIO_Init+0xd4>)
 800214a:	f001 f965 	bl	8003418 <HAL_GPIO_Init>

	/*Configure GPIO pin : GREEN_LED_Pin */
	GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800214e:	2320      	movs	r3, #32
 8002150:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	4619      	mov	r1, r3
 8002164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002168:	f001 f956 	bl	8003418 <HAL_GPIO_Init>

	/*Configure GPIO pin : RED_LED_Pin */
	GPIO_InitStruct.Pin = RED_LED_Pin;
 800216c:	2340      	movs	r3, #64	; 0x40
 800216e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	4619      	mov	r1, r3
 8002182:	4804      	ldr	r0, [pc, #16]	; (8002194 <MX_GPIO_Init+0xd4>)
 8002184:	f001 f948 	bl	8003418 <HAL_GPIO_Init>

}
 8002188:	bf00      	nop
 800218a:	3720      	adds	r7, #32
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	48000800 	.word	0x48000800

08002198 <TIM2_IRQHandler>:
	if (LED == 2) {
		HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
	}
}

void TIM2_IRQHandler(void) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_CC3IF) {
 800219e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d047      	beq.n	800223c <TIM2_IRQHandler+0xa4>
		if (RadioMeasureChannel3.edge == 0) {
 80021ac:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <TIM2_IRQHandler+0x148>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d110      	bne.n	80021d8 <TIM2_IRQHandler+0x40>
			RadioMeasureChannel3.ticks = TIM2->CCR3;
 80021b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	4a48      	ldr	r2, [pc, #288]	; (80022e0 <TIM2_IRQHandler+0x148>)
 80021be:	6053      	str	r3, [r2, #4]
			RadioMeasureChannel3.edge = 1;
 80021c0:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <TIM2_IRQHandler+0x148>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
			TIM2->CCER |= TIM_CCER_CC3P;
 80021c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	e028      	b.n	800222a <TIM2_IRQHandler+0x92>
		} else if (RadioMeasureChannel3.edge == 1) {
 80021d8:	4b41      	ldr	r3, [pc, #260]	; (80022e0 <TIM2_IRQHandler+0x148>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d123      	bne.n	800222a <TIM2_IRQHandler+0x92>
			uint32_t gu32_Ticks = (TIM2->CCR3 - RadioMeasureChannel3.ticks);
 80021e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021e8:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <TIM2_IRQHandler+0x148>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	603b      	str	r3, [r7, #0]
			if (gu32_Ticks < 0) {
				gu32_Ticks += 0xFFFF;
			}
			RadioData.channel3 = gu32_Ticks;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <TIM2_IRQHandler+0x14c>)
 80021f6:	809a      	strh	r2, [r3, #4]
			throttle = condition_values(1000, 2000, RadioData.channel3);
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <TIM2_IRQHandler+0x14c>)
 80021fa:	889b      	ldrh	r3, [r3, #4]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002208:	f000 f95a 	bl	80024c0 <condition_values>
 800220c:	4603      	mov	r3, r0
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <TIM2_IRQHandler+0x150>)
 8002212:	801a      	strh	r2, [r3, #0]
			RadioMeasureChannel3.edge = 0;
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <TIM2_IRQHandler+0x148>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
			TIM2->CCER &= ~TIM_CCER_CC3P;
 800221a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002228:	6213      	str	r3, [r2, #32]
		}

		TIM2->SR &= ~TIM_SR_CC3IF;
 800222a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002234:	f023 0308 	bic.w	r3, r3, #8
 8002238:	6113      	str	r3, [r2, #16]
			RadioMeasureChannel4.edge = 0;
			TIM2->CCER &= ~TIM_CCER_CC4P;
		}
		TIM2->SR &= ~TIM_SR_CC4IF;
	}
}
 800223a:	e04d      	b.n	80022d8 <TIM2_IRQHandler+0x140>
	} else if (TIM2->SR & TIM_SR_CC4IF) {
 800223c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0310 	and.w	r3, r3, #16
 8002246:	2b00      	cmp	r3, #0
 8002248:	d046      	beq.n	80022d8 <TIM2_IRQHandler+0x140>
		if (RadioMeasureChannel4.edge == 0) {
 800224a:	4b28      	ldr	r3, [pc, #160]	; (80022ec <TIM2_IRQHandler+0x154>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d110      	bne.n	8002276 <TIM2_IRQHandler+0xde>
			RadioMeasureChannel4.ticks = TIM2->CCR4;
 8002254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <TIM2_IRQHandler+0x154>)
 800225c:	6053      	str	r3, [r2, #4]
			RadioMeasureChannel4.edge = 1;
 800225e:	4b23      	ldr	r3, [pc, #140]	; (80022ec <TIM2_IRQHandler+0x154>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
			TIM2->CCER |= TIM_CCER_CC4P;
 8002264:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002272:	6213      	str	r3, [r2, #32]
 8002274:	e028      	b.n	80022c8 <TIM2_IRQHandler+0x130>
		} else if (RadioMeasureChannel4.edge == 1) {
 8002276:	4b1d      	ldr	r3, [pc, #116]	; (80022ec <TIM2_IRQHandler+0x154>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d123      	bne.n	80022c8 <TIM2_IRQHandler+0x130>
			uint32_t gu32_Ticks = (TIM2->CCR4 - RadioMeasureChannel4.ticks);
 8002280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <TIM2_IRQHandler+0x154>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	607b      	str	r3, [r7, #4]
			RadioData.channel4 = gu32_Ticks;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <TIM2_IRQHandler+0x14c>)
 8002294:	80da      	strh	r2, [r3, #6]
			yaw = condition_values(1000, 2000, RadioData.channel4);
 8002296:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <TIM2_IRQHandler+0x14c>)
 8002298:	88db      	ldrh	r3, [r3, #6]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80022a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a6:	f000 f90b 	bl	80024c0 <condition_values>
 80022aa:	4603      	mov	r3, r0
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <TIM2_IRQHandler+0x158>)
 80022b0:	801a      	strh	r2, [r3, #0]
			RadioMeasureChannel4.edge = 0;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <TIM2_IRQHandler+0x154>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
			TIM2->CCER &= ~TIM_CCER_CC4P;
 80022b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022c6:	6213      	str	r3, [r2, #32]
		TIM2->SR &= ~TIM_SR_CC4IF;
 80022c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022d2:	f023 0310 	bic.w	r3, r3, #16
 80022d6:	6113      	str	r3, [r2, #16]
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000218 	.word	0x20000218
 80022e4:	200001fc 	.word	0x200001fc
 80022e8:	20000260 	.word	0x20000260
 80022ec:	20000220 	.word	0x20000220
 80022f0:	20000266 	.word	0x20000266

080022f4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_CC3IF) {
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <TIM3_IRQHandler+0x124>)
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d03f      	beq.n	8002386 <TIM3_IRQHandler+0x92>
		if (RadioMeasureChannel1.edge == 0) {
 8002306:	4b45      	ldr	r3, [pc, #276]	; (800241c <TIM3_IRQHandler+0x128>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <TIM3_IRQHandler+0x38>
			RadioMeasureChannel1.ticks = TIM3->CCR3;
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <TIM3_IRQHandler+0x124>)
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	4a41      	ldr	r2, [pc, #260]	; (800241c <TIM3_IRQHandler+0x128>)
 8002316:	6053      	str	r3, [r2, #4]
			RadioMeasureChannel1.edge = 1;
 8002318:	4b40      	ldr	r3, [pc, #256]	; (800241c <TIM3_IRQHandler+0x128>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
			TIM3->CCER |= TIM_CCER_CC3P;
 800231e:	4b3e      	ldr	r3, [pc, #248]	; (8002418 <TIM3_IRQHandler+0x124>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a3d      	ldr	r2, [pc, #244]	; (8002418 <TIM3_IRQHandler+0x124>)
 8002324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	e025      	b.n	8002378 <TIM3_IRQHandler+0x84>
		} else if (RadioMeasureChannel1.edge == 1) {
 800232c:	4b3b      	ldr	r3, [pc, #236]	; (800241c <TIM3_IRQHandler+0x128>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d120      	bne.n	8002378 <TIM3_IRQHandler+0x84>
			uint32_t gu32_Ticks = (TIM3->CCR3 - RadioMeasureChannel1.ticks);
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <TIM3_IRQHandler+0x124>)
 8002338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <TIM3_IRQHandler+0x128>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	603b      	str	r3, [r7, #0]
			if (gu32_Ticks < 0) {
				gu32_Ticks += 0xFFFF;
			}
			RadioData.channel1 = gu32_Ticks;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b29a      	uxth	r2, r3
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <TIM3_IRQHandler+0x12c>)
 8002348:	801a      	strh	r2, [r3, #0]
			roll = condition_values(1000, 2000, RadioData.channel1);
 800234a:	4b35      	ldr	r3, [pc, #212]	; (8002420 <TIM3_IRQHandler+0x12c>)
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29b      	uxth	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002356:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235a:	f000 f8b1 	bl	80024c0 <condition_values>
 800235e:	4603      	mov	r3, r0
 8002360:	b29a      	uxth	r2, r3
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <TIM3_IRQHandler+0x130>)
 8002364:	801a      	strh	r2, [r3, #0]
			RadioMeasureChannel1.edge = 0;
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <TIM3_IRQHandler+0x128>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
			TIM3->CCER &= ~TIM_CCER_CC3P;
 800236c:	4b2a      	ldr	r3, [pc, #168]	; (8002418 <TIM3_IRQHandler+0x124>)
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4a29      	ldr	r2, [pc, #164]	; (8002418 <TIM3_IRQHandler+0x124>)
 8002372:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002376:	6213      	str	r3, [r2, #32]
		}

		TIM3->SR &= ~TIM_SR_CC3IF;
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <TIM3_IRQHandler+0x124>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <TIM3_IRQHandler+0x124>)
 800237e:	f023 0308 	bic.w	r3, r3, #8
 8002382:	6113      	str	r3, [r2, #16]
			RadioMeasureChannel2.edge = 0;
			TIM3->CCER &= ~TIM_CCER_CC4P;
		}
		TIM3->SR &= ~TIM_SR_CC4IF;
	}
}
 8002384:	e044      	b.n	8002410 <TIM3_IRQHandler+0x11c>
	} else if (TIM3->SR & TIM_SR_CC4IF) {
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <TIM3_IRQHandler+0x124>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03e      	beq.n	8002410 <TIM3_IRQHandler+0x11c>
		if (RadioMeasureChannel2.edge == 0) {
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <TIM3_IRQHandler+0x134>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <TIM3_IRQHandler+0xc4>
			RadioMeasureChannel2.ticks = TIM3->CCR4;
 800239c:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <TIM3_IRQHandler+0x124>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	4a21      	ldr	r2, [pc, #132]	; (8002428 <TIM3_IRQHandler+0x134>)
 80023a2:	6053      	str	r3, [r2, #4]
			RadioMeasureChannel2.edge = 1;
 80023a4:	4b20      	ldr	r3, [pc, #128]	; (8002428 <TIM3_IRQHandler+0x134>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
			TIM3->CCER |= TIM_CCER_CC4P;
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <TIM3_IRQHandler+0x124>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <TIM3_IRQHandler+0x124>)
 80023b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	e025      	b.n	8002404 <TIM3_IRQHandler+0x110>
		} else if (RadioMeasureChannel2.edge == 1) {
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <TIM3_IRQHandler+0x134>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d120      	bne.n	8002404 <TIM3_IRQHandler+0x110>
			uint32_t gu32_Ticks = (TIM3->CCR4 - RadioMeasureChannel2.ticks);
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <TIM3_IRQHandler+0x124>)
 80023c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <TIM3_IRQHandler+0x134>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	607b      	str	r3, [r7, #4]
			RadioData.channel2 = gu32_Ticks;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	4b13      	ldr	r3, [pc, #76]	; (8002420 <TIM3_IRQHandler+0x12c>)
 80023d4:	805a      	strh	r2, [r3, #2]
			pitch = condition_values(1000, 2000, RadioData.channel2);
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <TIM3_IRQHandler+0x12c>)
 80023d8:	885b      	ldrh	r3, [r3, #2]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80023e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e6:	f000 f86b 	bl	80024c0 <condition_values>
 80023ea:	4603      	mov	r3, r0
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <TIM3_IRQHandler+0x138>)
 80023f0:	801a      	strh	r2, [r3, #0]
			RadioMeasureChannel2.edge = 0;
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <TIM3_IRQHandler+0x134>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
			TIM3->CCER &= ~TIM_CCER_CC4P;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <TIM3_IRQHandler+0x124>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <TIM3_IRQHandler+0x124>)
 80023fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002402:	6213      	str	r3, [r2, #32]
		TIM3->SR &= ~TIM_SR_CC4IF;
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <TIM3_IRQHandler+0x124>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	4a03      	ldr	r2, [pc, #12]	; (8002418 <TIM3_IRQHandler+0x124>)
 800240a:	f023 0310 	bic.w	r3, r3, #16
 800240e:	6113      	str	r3, [r2, #16]
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40000400 	.word	0x40000400
 800241c:	20000208 	.word	0x20000208
 8002420:	200001fc 	.word	0x200001fc
 8002424:	20000264 	.word	0x20000264
 8002428:	20000210 	.word	0x20000210
 800242c:	20000262 	.word	0x20000262

08002430 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	ed87 0a05 	vstr	s0, [r7, #20]
 800243a:	edc7 0a04 	vstr	s1, [r7, #16]
 800243e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002442:	edc7 1a02 	vstr	s3, [r7, #8]
 8002446:	ed87 2a01 	vstr	s4, [r7, #4]
	return (float) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 800244a:	ed97 7a05 	vldr	s14, [r7, #20]
 800244e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002452:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002456:	edd7 6a01 	vldr	s13, [r7, #4]
 800245a:	edd7 7a02 	vldr	s15, [r7, #8]
 800245e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002462:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002466:	ed97 7a03 	vldr	s14, [r7, #12]
 800246a:	edd7 7a04 	vldr	s15, [r7, #16]
 800246e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002476:	edd7 7a02 	vldr	s15, [r7, #8]
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
			+ out_min);
}
 800247e:	eeb0 0a67 	vmov.f32	s0, s15
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <reset_variables>:
/*map function*/

/*reset variables*/

void reset_variables(void) {
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	memset(&rollPID, 0x00, sizeof(rollPID));
 8002490:	2220      	movs	r2, #32
 8002492:	2100      	movs	r1, #0
 8002494:	4807      	ldr	r0, [pc, #28]	; (80024b4 <reset_variables+0x28>)
 8002496:	f005 fa6d 	bl	8007974 <memset>
	memset(&pitchPID, 0x00, sizeof(pitchPID));
 800249a:	2220      	movs	r2, #32
 800249c:	2100      	movs	r1, #0
 800249e:	4806      	ldr	r0, [pc, #24]	; (80024b8 <reset_variables+0x2c>)
 80024a0:	f005 fa68 	bl	8007974 <memset>
	memset(&yawPID, 0x00, sizeof(yawPID));
 80024a4:	2220      	movs	r2, #32
 80024a6:	2100      	movs	r1, #0
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <reset_variables+0x30>)
 80024aa:	f005 fa63 	bl	8007974 <memset>

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000268 	.word	0x20000268
 80024b8:	20000288 	.word	0x20000288
 80024bc:	200002a8 	.word	0x200002a8

080024c0 <condition_values>:

uint32_t condition_values(uint32_t lowerLimit, uint32_t upperLimit,
		uint32_t value) {
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]

	if (value < lowerLimit) {
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d202      	bcs.n	80024da <condition_values+0x1a>
		value = lowerLimit;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	e005      	b.n	80024e6 <condition_values+0x26>
	} else if (value > upperLimit) {
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d901      	bls.n	80024e6 <condition_values+0x26>
		value = upperLimit;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	607b      	str	r3, [r7, #4]
	}
	return value;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <CalculateOutput>:




void CalculateOutput(float thr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	ed87 0a01 	vstr	s0, [r7, #4]

	motor1 = (uint16_t) (thr + pitchPID.output - rollPID.output - yawPID.output);
 80024fe:	4b52      	ldr	r3, [pc, #328]	; (8002648 <CalculateOutput+0x154>)
 8002500:	ed93 7a07 	vldr	s14, [r3, #28]
 8002504:	edd7 7a01 	vldr	s15, [r7, #4]
 8002508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250c:	4b4f      	ldr	r3, [pc, #316]	; (800264c <CalculateOutput+0x158>)
 800250e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002512:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002516:	4b4e      	ldr	r3, [pc, #312]	; (8002650 <CalculateOutput+0x15c>)
 8002518:	edd3 7a07 	vldr	s15, [r3, #28]
 800251c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002524:	ee17 3a90 	vmov	r3, s15
 8002528:	b29a      	uxth	r2, r3
 800252a:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <CalculateOutput+0x160>)
 800252c:	801a      	strh	r2, [r3, #0]
	motor2 = (uint16_t) (thr - pitchPID.output - rollPID.output + yawPID.output);
 800252e:	4b46      	ldr	r3, [pc, #280]	; (8002648 <CalculateOutput+0x154>)
 8002530:	edd3 7a07 	vldr	s15, [r3, #28]
 8002534:	ed97 7a01 	vldr	s14, [r7, #4]
 8002538:	ee37 7a67 	vsub.f32	s14, s14, s15
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <CalculateOutput+0x158>)
 800253e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002542:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <CalculateOutput+0x15c>)
 8002548:	edd3 7a07 	vldr	s15, [r3, #28]
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002554:	ee17 3a90 	vmov	r3, s15
 8002558:	b29a      	uxth	r2, r3
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <CalculateOutput+0x164>)
 800255c:	801a      	strh	r2, [r3, #0]
	motor3 = (uint16_t) (thr - pitchPID.output + rollPID.output - yawPID.output);
 800255e:	4b3a      	ldr	r3, [pc, #232]	; (8002648 <CalculateOutput+0x154>)
 8002560:	edd3 7a07 	vldr	s15, [r3, #28]
 8002564:	ed97 7a01 	vldr	s14, [r7, #4]
 8002568:	ee37 7a67 	vsub.f32	s14, s14, s15
 800256c:	4b37      	ldr	r3, [pc, #220]	; (800264c <CalculateOutput+0x158>)
 800256e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002572:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002576:	4b36      	ldr	r3, [pc, #216]	; (8002650 <CalculateOutput+0x15c>)
 8002578:	edd3 7a07 	vldr	s15, [r3, #28]
 800257c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002584:	ee17 3a90 	vmov	r3, s15
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <CalculateOutput+0x168>)
 800258c:	801a      	strh	r2, [r3, #0]
	motor4 = (uint16_t) (thr + pitchPID.output + rollPID.output + yawPID.output);
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <CalculateOutput+0x154>)
 8002590:	ed93 7a07 	vldr	s14, [r3, #28]
 8002594:	edd7 7a01 	vldr	s15, [r7, #4]
 8002598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <CalculateOutput+0x158>)
 800259e:	edd3 7a07 	vldr	s15, [r3, #28]
 80025a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a6:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <CalculateOutput+0x15c>)
 80025a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80025ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b4:	ee17 3a90 	vmov	r3, s15
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <CalculateOutput+0x16c>)
 80025bc:	801a      	strh	r2, [r3, #0]

	//condition_motor_speed_values

	motor1 = condition_values(MOTOR_MIN_SPEED, MOTOR_MAX_SPEED,
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <CalculateOutput+0x160>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80025c8:	f240 407e 	movw	r0, #1150	; 0x47e
 80025cc:	f7ff ff78 	bl	80024c0 <condition_values>
 80025d0:	4603      	mov	r3, r0
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <CalculateOutput+0x160>)
 80025d6:	801a      	strh	r2, [r3, #0]
			motor1);
	motor2 = condition_values(MOTOR_MIN_SPEED, MOTOR_MAX_SPEED,
 80025d8:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <CalculateOutput+0x164>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80025e2:	f240 407e 	movw	r0, #1150	; 0x47e
 80025e6:	f7ff ff6b 	bl	80024c0 <condition_values>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <CalculateOutput+0x164>)
 80025f0:	801a      	strh	r2, [r3, #0]
			motor2);
	motor3 = condition_values(MOTOR_MIN_SPEED, MOTOR_MAX_SPEED,
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <CalculateOutput+0x168>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80025fc:	f240 407e 	movw	r0, #1150	; 0x47e
 8002600:	f7ff ff5e 	bl	80024c0 <condition_values>
 8002604:	4603      	mov	r3, r0
 8002606:	b29a      	uxth	r2, r3
 8002608:	4b14      	ldr	r3, [pc, #80]	; (800265c <CalculateOutput+0x168>)
 800260a:	801a      	strh	r2, [r3, #0]
			motor3);
	motor4 = condition_values(MOTOR_MIN_SPEED, MOTOR_MAX_SPEED,
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <CalculateOutput+0x16c>)
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002616:	f240 407e 	movw	r0, #1150	; 0x47e
 800261a:	f7ff ff51 	bl	80024c0 <condition_values>
 800261e:	4603      	mov	r3, r0
 8002620:	b29a      	uxth	r2, r3
 8002622:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <CalculateOutput+0x16c>)
 8002624:	801a      	strh	r2, [r3, #0]
			motor4);

	DriveMotors(motor1,motor2,motor3,motor4);
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <CalculateOutput+0x160>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <CalculateOutput+0x164>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	4619      	mov	r1, r3
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <CalculateOutput+0x168>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <CalculateOutput+0x16c>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	f000 f818 	bl	8002670 <DriveMotors>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000288 	.word	0x20000288
 800264c:	20000268 	.word	0x20000268
 8002650:	200002a8 	.word	0x200002a8
 8002654:	20000258 	.word	0x20000258
 8002658:	2000025a 	.word	0x2000025a
 800265c:	2000025c 	.word	0x2000025c
 8002660:	2000025e 	.word	0x2000025e

08002664 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002668:	b672      	cpsid	i
}
 800266a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800266c:	e7fe      	b.n	800266c <Error_Handler+0x8>
	...

08002670 <DriveMotors>:
	} else if (motor == MOTOR4) {
		TIM15->CCR2 = motorValue;
	}
}

void DriveMotors(uint32_t motor1,uint32_t motor2,uint32_t motor3,uint32_t motor4) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b08a      	sub	sp, #40	; 0x28
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]

	uint32_t motorValue1 = map(motor1, 1000, 2000, 800, 1600);
 800267e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002688:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800268c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff fecd 	bl	8002430 <map>
 8002696:	4603      	mov	r3, r0
 8002698:	61fb      	str	r3, [r7, #28]
	uint32_t motorValue2 = map(motor2, 1000, 2000, 800, 1600);
 800269a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80026a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026ac:	68b8      	ldr	r0, [r7, #8]
 80026ae:	f7ff febf 	bl	8002430 <map>
 80026b2:	4603      	mov	r3, r0
 80026b4:	61bb      	str	r3, [r7, #24]
	uint32_t motorValue3 = map(motor3, 1000, 2000, 800, 1600);
 80026b6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80026c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff feb1 	bl	8002430 <map>
 80026ce:	4603      	mov	r3, r0
 80026d0:	617b      	str	r3, [r7, #20]
	uint32_t motorValue4 = map(motor4, 1000, 2000, 800, 1600);
 80026d2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80026dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80026e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026e4:	6838      	ldr	r0, [r7, #0]
 80026e6:	f7ff fea3 	bl	8002430 <map>
 80026ea:	4603      	mov	r3, r0
 80026ec:	613b      	str	r3, [r7, #16]

	TIM1->CCR3  =  motorValue1;
 80026ee:	4a08      	ldr	r2, [pc, #32]	; (8002710 <DriveMotors+0xa0>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM1->CCR4  =  motorValue2;
 80026f4:	4a06      	ldr	r2, [pc, #24]	; (8002710 <DriveMotors+0xa0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
	TIM15->CCR1 =  motorValue3;
 80026fa:	4a06      	ldr	r2, [pc, #24]	; (8002714 <DriveMotors+0xa4>)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	6353      	str	r3, [r2, #52]	; 0x34
	TIM8->CCR4 =  motorValue4;
 8002700:	4a05      	ldr	r2, [pc, #20]	; (8002718 <DriveMotors+0xa8>)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40014000 	.word	0x40014000
 8002718:	40013400 	.word	0x40013400

0800271c <calculate_pid_output>:
	}

}
*/

void calculate_pid_output(PID_Data *pidData) {
 800271c:	b480      	push	{r7}
 800271e:	b089      	sub	sp, #36	; 0x24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
	float iError = 0.0f;
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
	float pidError = 0.0f;
 800272a:	f04f 0300 	mov.w	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
	float dError = 0.0f;
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	617b      	str	r3, [r7, #20]

	float pTerm = 0.0f;
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
	float iTerm = 0.0f;
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
	float dTerm = 0.0f;
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]

	pidError =   pidData->setPoint - pidData->input;    //calculate the error
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	ed93 7a06 	vldr	s14, [r3, #24]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	edd3 7a05 	vldr	s15, [r3, #20]
 8002754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002758:	edc7 7a06 	vstr	s15, [r7, #24]

	iError = pidData->previError + pidError;   //calculate intigral of error
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002762:	ed97 7a06 	vldr	s14, [r7, #24]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	edc7 7a07 	vstr	s15, [r7, #28]

	if (iError > pid_max) {          //limit intigral output
 800276e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002772:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800284c <calculate_pid_output+0x130>
 8002776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	dd02      	ble.n	8002786 <calculate_pid_output+0x6a>
		iError = pid_max;
 8002780:	4b33      	ldr	r3, [pc, #204]	; (8002850 <calculate_pid_output+0x134>)
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	e00a      	b.n	800279c <calculate_pid_output+0x80>
	} else if (iError < pid_max * -1.0f) {
 8002786:	edd7 7a07 	vldr	s15, [r7, #28]
 800278a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002854 <calculate_pid_output+0x138>
 800278e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002796:	d501      	bpl.n	800279c <calculate_pid_output+0x80>
		iError = pid_max * -1.0f;
 8002798:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <calculate_pid_output+0x13c>)
 800279a:	61fb      	str	r3, [r7, #28]
	}

	dError = (pidError - pidData->prevInput);    //calculate derivative output
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	edc7 7a05 	vstr	s15, [r7, #20]

	pTerm = pidData->pGain * pidError;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80027b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027bc:	edc7 7a04 	vstr	s15, [r7, #16]
	iTerm = pidData->iGain * iError;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80027c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a03 	vstr	s15, [r7, #12]
	dTerm = pidData->dGain * dError;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80027d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80027dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e0:	edc7 7a02 	vstr	s15, [r7, #8]

	pidData->output = pTerm + iTerm + dTerm; // calculate the PID output by adding  p,i,d terms
 80027e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	edc3 7a07 	vstr	s15, [r3, #28]

	if (pidData->output > pid_max) {    //limit the pid output
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	edd3 7a07 	vldr	s15, [r3, #28]
 8002804:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800284c <calculate_pid_output+0x130>
 8002808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800280c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002810:	dd03      	ble.n	800281a <calculate_pid_output+0xfe>
		pidData->output = pid_max;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <calculate_pid_output+0x134>)
 8002816:	61da      	str	r2, [r3, #28]
 8002818:	e00c      	b.n	8002834 <calculate_pid_output+0x118>
	} else if (pidData->output < pid_max * -1.0f) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002820:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002854 <calculate_pid_output+0x138>
 8002824:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282c:	d502      	bpl.n	8002834 <calculate_pid_output+0x118>
		pidData->output = pid_max * -1.0f;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a09      	ldr	r2, [pc, #36]	; (8002858 <calculate_pid_output+0x13c>)
 8002832:	61da      	str	r2, [r3, #28]
	}

	pidData->previError = iError;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	611a      	str	r2, [r3, #16]
	pidData->prevInput = pidError;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	601a      	str	r2, [r3, #0]

}
 8002840:	bf00      	nop
 8002842:	3724      	adds	r7, #36	; 0x24
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	43c80000 	.word	0x43c80000
 8002850:	43c80000 	.word	0x43c80000
 8002854:	c3c80000 	.word	0xc3c80000
 8002858:	c3c80000 	.word	0xc3c80000

0800285c <ReadAccelerometerData>:
#include "sensors.h"
#include "string.h"

void ReadAccelerometerData(I2C_HandleTypeDef *hi2c,
		Sensor_Data_Readable *Acc_Data) {
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af04      	add	r7, sp, #16
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]

	uint8_t data[6];
	memset(data, 0x00, 6);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	2206      	movs	r2, #6
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f005 f880 	bl	8007974 <memset>
	int ret = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	61fb      	str	r3, [r7, #28]
	Sensor_Data_raw ACCData_RAW = { 0 };
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	809a      	strh	r2, [r3, #4]

	ret = HAL_I2C_Mem_Read(hi2c, LSM6DS3_I2C_ADD_L, 0x28,
 8002882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	2306      	movs	r3, #6
 800288a:	9301      	str	r3, [sp, #4]
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2301      	movs	r3, #1
 8002894:	2228      	movs	r2, #40	; 0x28
 8002896:	21d5      	movs	r1, #213	; 0xd5
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f001 f93d 	bl	8003b18 <HAL_I2C_Mem_Read>
 800289e:	4603      	mov	r3, r0
 80028a0:	61fb      	str	r3, [r7, #28]
	I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);

	memcpy((uint8_t*)&ACCData_RAW, data, 6);
 80028a2:	f107 0114 	add.w	r1, r7, #20
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	2206      	movs	r2, #6
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 f853 	bl	8007958 <memcpy>

	Acc_Data->X = ACCData_RAW.X * 0.001f * 0.244f;
 80028b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80028b6:	ee07 3a90 	vmov	s15, r3
 80028ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028be:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002920 <ReadAccelerometerData+0xc4>
 80028c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002924 <ReadAccelerometerData+0xc8>
 80028ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	edc3 7a00 	vstr	s15, [r3]
	Acc_Data->Y = ACCData_RAW.Y * 0.001f * 0.244f;
 80028d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028d8:	ee07 3a90 	vmov	s15, r3
 80028dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002920 <ReadAccelerometerData+0xc4>
 80028e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002924 <ReadAccelerometerData+0xc8>
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	edc3 7a01 	vstr	s15, [r3, #4]
	Acc_Data->Z = ACCData_RAW.Z * 0.001f * 0.244f;
 80028f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028fa:	ee07 3a90 	vmov	s15, r3
 80028fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002902:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002920 <ReadAccelerometerData+0xc4>
 8002906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002924 <ReadAccelerometerData+0xc8>
 800290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	edc3 7a02 	vstr	s15, [r3, #8]


}
 8002918:	bf00      	nop
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	3a83126f 	.word	0x3a83126f
 8002924:	3e79db23 	.word	0x3e79db23

08002928 <ReadGyroScopeData>:
void ReadGyroScopeData(I2C_HandleTypeDef *hi2c, Sensor_Data_Readable *Gyro_Data) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af04      	add	r7, sp, #16
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	memset(data, 0x00, 6);
 8002932:	f107 0314 	add.w	r3, r7, #20
 8002936:	2206      	movs	r2, #6
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f005 f81a 	bl	8007974 <memset>
	int ret = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
	Sensor_Data_raw GyroData_RAW = { 0 };
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	809a      	strh	r2, [r3, #4]

	ret = HAL_I2C_Mem_Read(hi2c, LSM6DS3_I2C_ADD_L, 0x22,
 800294e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2306      	movs	r3, #6
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	2222      	movs	r2, #34	; 0x22
 8002962:	21d5      	movs	r1, #213	; 0xd5
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f001 f8d7 	bl	8003b18 <HAL_I2C_Mem_Read>
 800296a:	4603      	mov	r3, r0
 800296c:	61fb      	str	r3, [r7, #28]
	I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);

	memcpy((uint8_t *)&GyroData_RAW, data, 6);
 800296e:	f107 0114 	add.w	r1, r7, #20
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	2206      	movs	r2, #6
 8002978:	4618      	mov	r0, r3
 800297a:	f004 ffed 	bl	8007958 <memcpy>


	Gyro_Data->X = GyroData_RAW.X * 17.50f * 0.001f;
 800297e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80029ec <ReadGyroScopeData+0xc4>
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002992:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80029f0 <ReadGyroScopeData+0xc8>
 8002996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	edc3 7a00 	vstr	s15, [r3]
	Gyro_Data->Y = GyroData_RAW.Y * 17.50f * 0.001f;
 80029a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029a4:	ee07 3a90 	vmov	s15, r3
 80029a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ac:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80029ec <ReadGyroScopeData+0xc4>
 80029b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029f0 <ReadGyroScopeData+0xc8>
 80029b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	edc3 7a01 	vstr	s15, [r3, #4]
	Gyro_Data->Z = GyroData_RAW.Z * 17.50f * 0.001f;
 80029c2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029ec <ReadGyroScopeData+0xc4>
 80029d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80029f0 <ReadGyroScopeData+0xc8>
 80029da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	edc3 7a02 	vstr	s15, [r3, #8]

}
 80029e4:	bf00      	nop
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	418c0000 	.word	0x418c0000
 80029f0:	3a83126f 	.word	0x3a83126f

080029f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_MspInit+0x44>)
 80029fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_MspInit+0x44>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6613      	str	r3, [r2, #96]	; 0x60
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_MspInit+0x44>)
 8002a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <HAL_MspInit+0x44>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <HAL_MspInit+0x44>)
 8002a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_MspInit+0x44>)
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	603b      	str	r3, [r7, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000

08002a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0ac      	sub	sp, #176	; 0xb0
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	2288      	movs	r2, #136	; 0x88
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f004 ff89 	bl	8007974 <memset>
  if(hi2c->Instance==I2C1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a21      	ldr	r2, [pc, #132]	; (8002aec <HAL_I2C_MspInit+0xb0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d13b      	bne.n	8002ae4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a6c:	2340      	movs	r3, #64	; 0x40
 8002a6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f002 fb05 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a84:	f7ff fdee 	bl	8002664 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002a8e:	f043 0302 	orr.w	r3, r3, #2
 8002a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSORS_I2C1_SCL_Pin|SENSORS_I2C1_SDA_Pin;
 8002aa0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa8:	2312      	movs	r3, #18
 8002aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aba:	2304      	movs	r3, #4
 8002abc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480b      	ldr	r0, [pc, #44]	; (8002af4 <HAL_I2C_MspInit+0xb8>)
 8002ac8:	f000 fca6 	bl	8003418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002acc:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	4a07      	ldr	r2, [pc, #28]	; (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ad6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_I2C_MspInit+0xb4>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ae4:	bf00      	nop
 8002ae6:	37b0      	adds	r7, #176	; 0xb0
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40005400 	.word	0x40005400
 8002af0:	40021000 	.word	0x40021000
 8002af4:	48000400 	.word	0x48000400

08002af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08e      	sub	sp, #56	; 0x38
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_TIM_Base_MspInit+0x15c>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10c      	bne.n	8002b34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b1a:	4b4f      	ldr	r3, [pc, #316]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b24:	6613      	str	r3, [r2, #96]	; 0x60
 8002b26:	4b4c      	ldr	r3, [pc, #304]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002b32:	e08a      	b.n	8002c4a <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b3c:	d129      	bne.n	8002b92 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b3e:	4b46      	ldr	r3, [pc, #280]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	4a45      	ldr	r2, [pc, #276]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4a:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5a:	4a3f      	ldr	r2, [pc, #252]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b6e:	230c      	movs	r3, #12
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b76:	2302      	movs	r3, #2
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b86:	4619      	mov	r1, r3
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8c:	f000 fc44 	bl	8003418 <HAL_GPIO_Init>
}
 8002b90:	e05b      	b.n	8002c4a <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a31      	ldr	r2, [pc, #196]	; (8002c5c <HAL_TIM_Base_MspInit+0x164>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d145      	bne.n	8002c28 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba0:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba8:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb8:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002bba:	f043 0302 	orr.w	r3, r3, #2
 8002bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc0:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RECEIVER4_TIM3_CH4_Pin;
 8002be4:	2302      	movs	r3, #2
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bec:	2302      	movs	r3, #2
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RECEIVER4_TIM3_CH4_GPIO_Port, &GPIO_InitStruct);
 8002bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4818      	ldr	r0, [pc, #96]	; (8002c60 <HAL_TIM_Base_MspInit+0x168>)
 8002c00:	f000 fc0a 	bl	8003418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RECEIVER3_TIM3_CH3_Pin;
 8002c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c16:	2302      	movs	r3, #2
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RECEIVER3_TIM3_CH3_GPIO_Port, &GPIO_InitStruct);
 8002c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4810      	ldr	r0, [pc, #64]	; (8002c64 <HAL_TIM_Base_MspInit+0x16c>)
 8002c22:	f000 fbf9 	bl	8003418 <HAL_GPIO_Init>
}
 8002c26:	e010      	b.n	8002c4a <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM15)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <HAL_TIM_Base_MspInit+0x170>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d10b      	bne.n	8002c4a <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002c32:	4b09      	ldr	r3, [pc, #36]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_TIM_Base_MspInit+0x160>)
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
}
 8002c4a:	bf00      	nop
 8002c4c:	3738      	adds	r7, #56	; 0x38
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	48000400 	.word	0x48000400
 8002c64:	48000800 	.word	0x48000800
 8002c68:	40014000 	.word	0x40014000

08002c6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_TIM_PWM_MspInit+0x38>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10b      	bne.n	8002c96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c88:	6613      	str	r3, [r2, #96]	; 0x60
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40013400 	.word	0x40013400
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a35      	ldr	r2, [pc, #212]	; (8002da0 <HAL_TIM_MspPostInit+0xf4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d11e      	bne.n	8002d0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	4a34      	ldr	r2, [pc, #208]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cda:	4b32      	ldr	r3, [pc, #200]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_TIM1_CH3_Pin|MOTOR2_TIM1_CH4_Pin;
 8002ce6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d06:	f000 fb87 	bl	8003418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002d0a:	e044      	b.n	8002d96 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a25      	ldr	r2, [pc, #148]	; (8002da8 <HAL_TIM_MspPostInit+0xfc>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d11d      	bne.n	8002d52 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	4a22      	ldr	r2, [pc, #136]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002d1c:	f043 0304 	orr.w	r3, r3, #4
 8002d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d22:	4b20      	ldr	r3, [pc, #128]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d40:	2303      	movs	r3, #3
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4818      	ldr	r0, [pc, #96]	; (8002dac <HAL_TIM_MspPostInit+0x100>)
 8002d4c:	f000 fb64 	bl	8003418 <HAL_GPIO_Init>
}
 8002d50:	e021      	b.n	8002d96 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a16      	ldr	r2, [pc, #88]	; (8002db0 <HAL_TIM_MspPostInit+0x104>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d11c      	bne.n	8002d96 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d60:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_TIM_MspPostInit+0xf8>)
 8002d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR3_TIM15_CH1_Pin|MOTOR4_TIM15_CH2_Pin;
 8002d74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002d86:	230e      	movs	r3, #14
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4808      	ldr	r0, [pc, #32]	; (8002db4 <HAL_TIM_MspPostInit+0x108>)
 8002d92:	f000 fb41 	bl	8003418 <HAL_GPIO_Init>
}
 8002d96:	bf00      	nop
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40013400 	.word	0x40013400
 8002dac:	48000800 	.word	0x48000800
 8002db0:	40014000 	.word	0x40014000
 8002db4:	48000400 	.word	0x48000400

08002db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0ac      	sub	sp, #176	; 0xb0
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2288      	movs	r2, #136	; 0x88
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 fdcb 	bl	8007974 <memset>
  if(huart->Instance==UART4)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <HAL_UART_MspInit+0xb0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d13b      	bne.n	8002e60 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002de8:	2308      	movs	r3, #8
 8002dea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002dec:	2300      	movs	r3, #0
 8002dee:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4618      	mov	r0, r3
 8002df6:	f002 f947 	bl	8005088 <HAL_RCCEx_PeriphCLKConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e00:	f7ff fc30 	bl	8002664 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_UART_MspInit+0xb4>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_UART_MspInit+0xb4>)
 8002e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_UART_MspInit+0xb4>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <HAL_UART_MspInit+0xb4>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <HAL_UART_MspInit+0xb4>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_UART_MspInit+0xb4>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e4e:	2308      	movs	r3, #8
 8002e50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <HAL_UART_MspInit+0xb8>)
 8002e5c:	f000 fadc 	bl	8003418 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002e60:	bf00      	nop
 8002e62:	37b0      	adds	r7, #176	; 0xb0
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40004c00 	.word	0x40004c00
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	48000800 	.word	0x48000800

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <NMI_Handler+0x4>

08002e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <HardFault_Handler+0x4>

08002e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <MemManage_Handler+0x4>

08002e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <BusFault_Handler+0x4>

08002e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <UsageFault_Handler+0x4>

08002e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec0:	f000 f980 	bl	80031c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <ITM_SendChar+0x48>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <ITM_SendChar+0x48>)
 8002ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002edc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <ITM_SendChar+0x4c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <ITM_SendChar+0x4c>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002eea:	bf00      	nop
 8002eec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f8      	beq.n	8002eec <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002efa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	6013      	str	r3, [r2, #0]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	e000edfc 	.word	0xe000edfc
 8002f14:	e0000e00 	.word	0xe0000e00

08002f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	return 1;
 8002f1c:	2301      	movs	r3, #1
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_kill>:

int _kill(int pid, int sig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002f32:	f004 fce7 	bl	8007904 <__errno>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2216      	movs	r2, #22
 8002f3a:	601a      	str	r2, [r3, #0]
	return -1;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_exit>:

void _exit (int status)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ffe7 	bl	8002f28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002f5a:	e7fe      	b.n	8002f5a <_exit+0x12>

08002f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	e00a      	b.n	8002f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002f6e:	f3af 8000 	nop.w
 8002f72:	4601      	mov	r1, r0
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	60ba      	str	r2, [r7, #8]
 8002f7a:	b2ca      	uxtb	r2, r1
 8002f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3301      	adds	r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	dbf0      	blt.n	8002f6e <_read+0x12>
	}

return len;
 8002f8c:	687b      	ldr	r3, [r7, #4]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e009      	b.n	8002fbc <_write+0x26>
	{
	    ITM_SendChar(*ptr++);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff89 	bl	8002ec8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	dbf1      	blt.n	8002fa8 <_write+0x12>
	}
	return len;
 8002fc4:	687b      	ldr	r3, [r7, #4]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <_close>:

int _close(int file)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
	return -1;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ff6:	605a      	str	r2, [r3, #4]
	return 0;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <_isatty>:

int _isatty(int file)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
	return 1;
 800300e:	2301      	movs	r3, #1
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
	return 0;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003040:	4a14      	ldr	r2, [pc, #80]	; (8003094 <_sbrk+0x5c>)
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <_sbrk+0x60>)
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <_sbrk+0x64>)
 8003056:	4a12      	ldr	r2, [pc, #72]	; (80030a0 <_sbrk+0x68>)
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800305a:	4b10      	ldr	r3, [pc, #64]	; (800309c <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d207      	bcs.n	8003078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003068:	f004 fc4c 	bl	8007904 <__errno>
 800306c:	4603      	mov	r3, r0
 800306e:	220c      	movs	r2, #12
 8003070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003076:	e009      	b.n	800308c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <_sbrk+0x64>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	4a05      	ldr	r2, [pc, #20]	; (800309c <_sbrk+0x64>)
 8003088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800308a:	68fb      	ldr	r3, [r7, #12]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20018000 	.word	0x20018000
 8003098:	00000400 	.word	0x00000400
 800309c:	200002d0 	.word	0x200002d0
 80030a0:	20000640 	.word	0x20000640

080030a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <SystemInit+0x20>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	4a05      	ldr	r2, [pc, #20]	; (80030c4 <SystemInit+0x20>)
 80030b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030cc:	f7ff ffea 	bl	80030a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d0:	480c      	ldr	r0, [pc, #48]	; (8003104 <LoopForever+0x6>)
  ldr r1, =_edata
 80030d2:	490d      	ldr	r1, [pc, #52]	; (8003108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d4:	4a0d      	ldr	r2, [pc, #52]	; (800310c <LoopForever+0xe>)
  movs r3, #0
 80030d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d8:	e002      	b.n	80030e0 <LoopCopyDataInit>

080030da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030de:	3304      	adds	r3, #4

080030e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e4:	d3f9      	bcc.n	80030da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e8:	4c0a      	ldr	r4, [pc, #40]	; (8003114 <LoopForever+0x16>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ec:	e001      	b.n	80030f2 <LoopFillZerobss>

080030ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f0:	3204      	adds	r2, #4

080030f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f4:	d3fb      	bcc.n	80030ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030f6:	f004 fc0b 	bl	8007910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030fa:	f7fd ff41 	bl	8000f80 <main>

080030fe <LoopForever>:

LoopForever:
    b LoopForever
 80030fe:	e7fe      	b.n	80030fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003100:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003108:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800310c:	0800adf4 	.word	0x0800adf4
  ldr r2, =_sbss
 8003110:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003114:	20000640 	.word	0x20000640

08003118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003118:	e7fe      	b.n	8003118 <ADC1_2_IRQHandler>

0800311a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003124:	2003      	movs	r0, #3
 8003126:	f000 f943 	bl	80033b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800312a:	200f      	movs	r0, #15
 800312c:	f000 f80e 	bl	800314c <HAL_InitTick>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	71fb      	strb	r3, [r7, #7]
 800313a:	e001      	b.n	8003140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800313c:	f7ff fc5a 	bl	80029f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003140:	79fb      	ldrb	r3, [r7, #7]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_InitTick+0x6c>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d023      	beq.n	80031a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <HAL_InitTick+0x70>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_InitTick+0x6c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	4618      	mov	r0, r3
 8003178:	f000 f941 	bl	80033fe <HAL_SYSTICK_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d809      	bhi.n	800319c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003188:	2200      	movs	r2, #0
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003190:	f000 f919 	bl	80033c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003194:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <HAL_InitTick+0x74>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e007      	b.n	80031ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	e004      	b.n	80031ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	e001      	b.n	80031ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000008 	.word	0x20000008
 80031bc:	20000000 	.word	0x20000000
 80031c0:	20000004 	.word	0x20000004

080031c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_IncTick+0x20>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_IncTick+0x24>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <HAL_IncTick+0x24>)
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000008 	.word	0x20000008
 80031e8:	2000062c 	.word	0x2000062c

080031ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return uwTick;
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <HAL_GetTick+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	2000062c 	.word	0x2000062c

08003204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff ffee 	bl	80031ec <HAL_GetTick>
 8003210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800321c:	d005      	beq.n	800322a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_Delay+0x44>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800322a:	bf00      	nop
 800322c:	f7ff ffde 	bl	80031ec <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	429a      	cmp	r2, r3
 800323a:	d8f7      	bhi.n	800322c <HAL_Delay+0x28>
  {
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000008 	.word	0x20000008

0800324c <__NVIC_SetPriorityGrouping>:
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db0a      	blt.n	80032da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	490c      	ldr	r1, [pc, #48]	; (80032fc <__NVIC_SetPriority+0x4c>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d8:	e00a      	b.n	80032f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4908      	ldr	r1, [pc, #32]	; (8003300 <__NVIC_SetPriority+0x50>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3b04      	subs	r3, #4
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	440b      	add	r3, r1
 80032ee:	761a      	strb	r2, [r3, #24]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f1c3 0307 	rsb	r3, r3, #7
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf28      	it	cs
 8003322:	2304      	movcs	r3, #4
 8003324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3304      	adds	r3, #4
 800332a:	2b06      	cmp	r3, #6
 800332c:	d902      	bls.n	8003334 <NVIC_EncodePriority+0x30>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3b03      	subs	r3, #3
 8003332:	e000      	b.n	8003336 <NVIC_EncodePriority+0x32>
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800334c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	43d9      	mvns	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	4313      	orrs	r3, r2
         );
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	; 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800337c:	d301      	bcc.n	8003382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337e:	2301      	movs	r3, #1
 8003380:	e00f      	b.n	80033a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <SysTick_Config+0x40>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338a:	210f      	movs	r1, #15
 800338c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003390:	f7ff ff8e 	bl	80032b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <SysTick_Config+0x40>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339a:	4b04      	ldr	r3, [pc, #16]	; (80033ac <SysTick_Config+0x40>)
 800339c:	2207      	movs	r2, #7
 800339e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	e000e010 	.word	0xe000e010

080033b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff47 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033d8:	f7ff ff5c 	bl	8003294 <__NVIC_GetPriorityGrouping>
 80033dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7ff ff8e 	bl	8003304 <NVIC_EncodePriority>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff5d 	bl	80032b0 <__NVIC_SetPriority>
}
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ffb0 	bl	800336c <SysTick_Config>
 800340c:	4603      	mov	r3, r0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003422:	2300      	movs	r3, #0
 8003424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003426:	e17f      	b.n	8003728 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2101      	movs	r1, #1
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8171 	beq.w	8003722 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d005      	beq.n	8003458 <HAL_GPIO_Init+0x40>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d130      	bne.n	80034ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800348e:	2201      	movs	r2, #1
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	091b      	lsrs	r3, r3, #4
 80034a4:	f003 0201 	and.w	r2, r3, #1
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d118      	bne.n	80034f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80034cc:	2201      	movs	r2, #1
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	08db      	lsrs	r3, r3, #3
 80034e2:	f003 0201 	and.w	r2, r3, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	2b03      	cmp	r3, #3
 8003502:	d017      	beq.n	8003534 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d123      	bne.n	8003588 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	08da      	lsrs	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3208      	adds	r2, #8
 8003548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800354c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	220f      	movs	r2, #15
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691a      	ldr	r2, [r3, #16]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	08da      	lsrs	r2, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3208      	adds	r2, #8
 8003582:	6939      	ldr	r1, [r7, #16]
 8003584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2203      	movs	r2, #3
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0203 	and.w	r2, r3, #3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80ac 	beq.w	8003722 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ca:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <HAL_GPIO_Init+0x330>)
 80035cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ce:	4a5e      	ldr	r2, [pc, #376]	; (8003748 <HAL_GPIO_Init+0x330>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6613      	str	r3, [r2, #96]	; 0x60
 80035d6:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <HAL_GPIO_Init+0x330>)
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80035e2:	4a5a      	ldr	r2, [pc, #360]	; (800374c <HAL_GPIO_Init+0x334>)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800360c:	d025      	beq.n	800365a <HAL_GPIO_Init+0x242>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4f      	ldr	r2, [pc, #316]	; (8003750 <HAL_GPIO_Init+0x338>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01f      	beq.n	8003656 <HAL_GPIO_Init+0x23e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a4e      	ldr	r2, [pc, #312]	; (8003754 <HAL_GPIO_Init+0x33c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d019      	beq.n	8003652 <HAL_GPIO_Init+0x23a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4d      	ldr	r2, [pc, #308]	; (8003758 <HAL_GPIO_Init+0x340>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <HAL_GPIO_Init+0x236>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4c      	ldr	r2, [pc, #304]	; (800375c <HAL_GPIO_Init+0x344>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00d      	beq.n	800364a <HAL_GPIO_Init+0x232>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4b      	ldr	r2, [pc, #300]	; (8003760 <HAL_GPIO_Init+0x348>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d007      	beq.n	8003646 <HAL_GPIO_Init+0x22e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4a      	ldr	r2, [pc, #296]	; (8003764 <HAL_GPIO_Init+0x34c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d101      	bne.n	8003642 <HAL_GPIO_Init+0x22a>
 800363e:	2306      	movs	r3, #6
 8003640:	e00c      	b.n	800365c <HAL_GPIO_Init+0x244>
 8003642:	2307      	movs	r3, #7
 8003644:	e00a      	b.n	800365c <HAL_GPIO_Init+0x244>
 8003646:	2305      	movs	r3, #5
 8003648:	e008      	b.n	800365c <HAL_GPIO_Init+0x244>
 800364a:	2304      	movs	r3, #4
 800364c:	e006      	b.n	800365c <HAL_GPIO_Init+0x244>
 800364e:	2303      	movs	r3, #3
 8003650:	e004      	b.n	800365c <HAL_GPIO_Init+0x244>
 8003652:	2302      	movs	r3, #2
 8003654:	e002      	b.n	800365c <HAL_GPIO_Init+0x244>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <HAL_GPIO_Init+0x244>
 800365a:	2300      	movs	r3, #0
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	f002 0203 	and.w	r2, r2, #3
 8003662:	0092      	lsls	r2, r2, #2
 8003664:	4093      	lsls	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800366c:	4937      	ldr	r1, [pc, #220]	; (800374c <HAL_GPIO_Init+0x334>)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	089b      	lsrs	r3, r3, #2
 8003672:	3302      	adds	r3, #2
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <HAL_GPIO_Init+0x350>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800369e:	4a32      	ldr	r2, [pc, #200]	; (8003768 <HAL_GPIO_Init+0x350>)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036a4:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HAL_GPIO_Init+0x350>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	43db      	mvns	r3, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036c8:	4a27      	ldr	r2, [pc, #156]	; (8003768 <HAL_GPIO_Init+0x350>)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_GPIO_Init+0x350>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_GPIO_Init+0x350>)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_GPIO_Init+0x350>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43db      	mvns	r3, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800371c:	4a12      	ldr	r2, [pc, #72]	; (8003768 <HAL_GPIO_Init+0x350>)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	3301      	adds	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	f47f ae78 	bne.w	8003428 <HAL_GPIO_Init+0x10>
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	40010000 	.word	0x40010000
 8003750:	48000400 	.word	0x48000400
 8003754:	48000800 	.word	0x48000800
 8003758:	48000c00 	.word	0x48000c00
 800375c:	48001000 	.word	0x48001000
 8003760:	48001400 	.word	0x48001400
 8003764:	48001800 	.word	0x48001800
 8003768:	40010400 	.word	0x40010400

0800376c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
 8003778:	4613      	mov	r3, r2
 800377a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800377c:	787b      	ldrb	r3, [r7, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003782:	887a      	ldrh	r2, [r7, #2]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003788:	e002      	b.n	8003790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4013      	ands	r3, r2
 80037b4:	041a      	lsls	r2, r3, #16
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43d9      	mvns	r1, r3
 80037ba:	887b      	ldrh	r3, [r7, #2]
 80037bc:	400b      	ands	r3, r1
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	619a      	str	r2, [r3, #24]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e081      	b.n	80038e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff f920 	bl	8002a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	; 0x24
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003820:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003830:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d107      	bne.n	800384a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	e006      	b.n	8003858 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003856:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d104      	bne.n	800386a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003868:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800388c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69d9      	ldr	r1, [r3, #28]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	817b      	strh	r3, [r7, #10]
 8003902:	460b      	mov	r3, r1
 8003904:	813b      	strh	r3, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	f040 80f9 	bne.w	8003b0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_I2C_Mem_Write+0x34>
 800391e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0ed      	b.n	8003b0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2C_Mem_Write+0x4e>
 800393a:	2302      	movs	r3, #2
 800393c:	e0e6      	b.n	8003b0c <HAL_I2C_Mem_Write+0x21c>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003946:	f7ff fc51 	bl	80031ec <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	2319      	movs	r3, #25
 8003952:	2201      	movs	r2, #1
 8003954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fac3 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0d1      	b.n	8003b0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2221      	movs	r2, #33	; 0x21
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a3a      	ldr	r2, [r7, #32]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003988:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003990:	88f8      	ldrh	r0, [r7, #6]
 8003992:	893a      	ldrh	r2, [r7, #8]
 8003994:	8979      	ldrh	r1, [r7, #10]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	4603      	mov	r3, r0
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f9d3 	bl	8003d4c <I2C_RequestMemoryWrite>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0a9      	b.n	8003b0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2bff      	cmp	r3, #255	; 0xff
 80039c0:	d90e      	bls.n	80039e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	8979      	ldrh	r1, [r7, #10]
 80039d0:	2300      	movs	r3, #0
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fc2b 	bl	8004234 <I2C_TransferConfig>
 80039de:	e00f      	b.n	8003a00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	8979      	ldrh	r1, [r7, #10]
 80039f2:	2300      	movs	r3, #0
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fc1a 	bl	8004234 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 faad 	bl	8003f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e07b      	b.n	8003b0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	781a      	ldrb	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d034      	beq.n	8003ab8 <HAL_I2C_Mem_Write+0x1c8>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d130      	bne.n	8003ab8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2180      	movs	r1, #128	; 0x80
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fa3f 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e04d      	b.n	8003b0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2bff      	cmp	r3, #255	; 0xff
 8003a78:	d90e      	bls.n	8003a98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	8979      	ldrh	r1, [r7, #10]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fbcf 	bl	8004234 <I2C_TransferConfig>
 8003a96:	e00f      	b.n	8003ab8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	8979      	ldrh	r1, [r7, #10]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fbbe 	bl	8004234 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d19e      	bne.n	8003a00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fa8c 	bl	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e01a      	b.n	8003b0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2220      	movs	r2, #32
 8003adc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_I2C_Mem_Write+0x224>)
 8003aea:	400b      	ands	r3, r1
 8003aec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e000      	b.n	8003b0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
  }
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	fe00e800 	.word	0xfe00e800

08003b18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	4608      	mov	r0, r1
 8003b22:	4611      	mov	r1, r2
 8003b24:	461a      	mov	r2, r3
 8003b26:	4603      	mov	r3, r0
 8003b28:	817b      	strh	r3, [r7, #10]
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	813b      	strh	r3, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	f040 80fd 	bne.w	8003d3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x34>
 8003b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0f1      	b.n	8003d3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_I2C_Mem_Read+0x4e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e0ea      	b.n	8003d3c <HAL_I2C_Mem_Read+0x224>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b6e:	f7ff fb3d 	bl	80031ec <HAL_GetTick>
 8003b72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2319      	movs	r3, #25
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f9af 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0d5      	b.n	8003d3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2222      	movs	r2, #34	; 0x22
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bb8:	88f8      	ldrh	r0, [r7, #6]
 8003bba:	893a      	ldrh	r2, [r7, #8]
 8003bbc:	8979      	ldrh	r1, [r7, #10]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	9301      	str	r3, [sp, #4]
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f913 	bl	8003df4 <I2C_RequestMemoryRead>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0ad      	b.n	8003d3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2bff      	cmp	r3, #255	; 0xff
 8003be8:	d90e      	bls.n	8003c08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	8979      	ldrh	r1, [r7, #10]
 8003bf8:	4b52      	ldr	r3, [pc, #328]	; (8003d44 <HAL_I2C_Mem_Read+0x22c>)
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fb17 	bl	8004234 <I2C_TransferConfig>
 8003c06:	e00f      	b.n	8003c28 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	8979      	ldrh	r1, [r7, #10]
 8003c1a:	4b4a      	ldr	r3, [pc, #296]	; (8003d44 <HAL_I2C_Mem_Read+0x22c>)
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fb06 	bl	8004234 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	2200      	movs	r2, #0
 8003c30:	2104      	movs	r1, #4
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f956 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e07c      	b.n	8003d3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d034      	beq.n	8003ce8 <HAL_I2C_Mem_Read+0x1d0>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d130      	bne.n	8003ce8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2180      	movs	r1, #128	; 0x80
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f927 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e04d      	b.n	8003d3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2bff      	cmp	r3, #255	; 0xff
 8003ca8:	d90e      	bls.n	8003cc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	22ff      	movs	r2, #255	; 0xff
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	8979      	ldrh	r1, [r7, #10]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fab7 	bl	8004234 <I2C_TransferConfig>
 8003cc6:	e00f      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	8979      	ldrh	r1, [r7, #10]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 faa6 	bl	8004234 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d19a      	bne.n	8003c28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f974 	bl	8003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e01a      	b.n	8003d3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <HAL_I2C_Mem_Read+0x230>)
 8003d1a:	400b      	ands	r3, r1
 8003d1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3718      	adds	r7, #24
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	80002400 	.word	0x80002400
 8003d48:	fe00e800 	.word	0xfe00e800

08003d4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	4608      	mov	r0, r1
 8003d56:	4611      	mov	r1, r2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	817b      	strh	r3, [r7, #10]
 8003d5e:	460b      	mov	r3, r1
 8003d60:	813b      	strh	r3, [r7, #8]
 8003d62:	4613      	mov	r3, r2
 8003d64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	8979      	ldrh	r1, [r7, #10]
 8003d6c:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <I2C_RequestMemoryWrite+0xa4>)
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fa5d 	bl	8004234 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	69b9      	ldr	r1, [r7, #24]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f8f0 	bl	8003f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e02c      	b.n	8003de8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d105      	bne.n	8003da0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d94:	893b      	ldrh	r3, [r7, #8]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d9e:	e015      	b.n	8003dcc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	69b9      	ldr	r1, [r7, #24]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f8d6 	bl	8003f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e012      	b.n	8003de8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc2:	893b      	ldrh	r3, [r7, #8]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 f884 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	80002000 	.word	0x80002000

08003df4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	460b      	mov	r3, r1
 8003e08:	813b      	strh	r3, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	8979      	ldrh	r1, [r7, #10]
 8003e14:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <I2C_RequestMemoryRead+0xa4>)
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fa0a 	bl	8004234 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	69b9      	ldr	r1, [r7, #24]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f89d 	bl	8003f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e02c      	b.n	8003e8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e34:	88fb      	ldrh	r3, [r7, #6]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d105      	bne.n	8003e46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3a:	893b      	ldrh	r3, [r7, #8]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28
 8003e44:	e015      	b.n	8003e72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e46:	893b      	ldrh	r3, [r7, #8]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	69b9      	ldr	r1, [r7, #24]
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f883 	bl	8003f64 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e012      	b.n	8003e8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e68:	893b      	ldrh	r3, [r7, #8]
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2140      	movs	r1, #64	; 0x40
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f831 	bl	8003ee4 <I2C_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	80002000 	.word	0x80002000

08003e9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d103      	bne.n	8003eba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d007      	beq.n	8003ed8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699a      	ldr	r2, [r3, #24]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	619a      	str	r2, [r3, #24]
  }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef4:	e022      	b.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efc:	d01e      	beq.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efe:	f7ff f975 	bl	80031ec <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d302      	bcc.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d113      	bne.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f18:	f043 0220 	orr.w	r2, r3, #32
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e00f      	b.n	8003f5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d0cd      	beq.n	8003ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f70:	e02c      	b.n	8003fcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f870 	bl	800405c <I2C_IsErrorOccurred>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e02a      	b.n	8003fdc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8c:	d01e      	beq.n	8003fcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8e:	f7ff f92d 	bl	80031ec <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d302      	bcc.n	8003fa4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d113      	bne.n	8003fcc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e007      	b.n	8003fdc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d1cb      	bne.n	8003f72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff0:	e028      	b.n	8004044 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f830 	bl	800405c <I2C_IsErrorOccurred>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e026      	b.n	8004054 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004006:	f7ff f8f1 	bl	80031ec <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d113      	bne.n	8004044 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e007      	b.n	8004054 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b20      	cmp	r3, #32
 8004050:	d1cf      	bne.n	8003ff2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	d075      	beq.n	8004174 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2210      	movs	r2, #16
 800408e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004090:	e056      	b.n	8004140 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004098:	d052      	beq.n	8004140 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800409a:	f7ff f8a7 	bl	80031ec <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d302      	bcc.n	80040b0 <I2C_IsErrorOccurred+0x54>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d147      	bne.n	8004140 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	d12e      	bne.n	8004132 <I2C_IsErrorOccurred+0xd6>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040da:	d02a      	beq.n	8004132 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d027      	beq.n	8004132 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040f2:	f7ff f87b 	bl	80031ec <HAL_GetTick>
 80040f6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f8:	e01b      	b.n	8004132 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040fa:	f7ff f877 	bl	80031ec <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b19      	cmp	r3, #25
 8004106:	d914      	bls.n	8004132 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b20      	cmp	r3, #32
 800413e:	d1dc      	bne.n	80040fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b20      	cmp	r3, #32
 800414c:	d003      	beq.n	8004156 <I2C_IsErrorOccurred+0xfa>
 800414e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004152:	2b00      	cmp	r3, #0
 8004154:	d09d      	beq.n	8004092 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2220      	movs	r2, #32
 8004164:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004196:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00b      	beq.n	80041c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f043 0308 	orr.w	r3, r3, #8
 80041ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f043 0302 	orr.w	r3, r3, #2
 80041d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80041e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01c      	beq.n	8004224 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff fe56 	bl	8003e9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6859      	ldr	r1, [r3, #4]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b0d      	ldr	r3, [pc, #52]	; (8004230 <I2C_IsErrorOccurred+0x1d4>)
 80041fc:	400b      	ands	r3, r1
 80041fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	431a      	orrs	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004228:	4618      	mov	r0, r3
 800422a:	3728      	adds	r7, #40	; 0x28
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	fe00e800 	.word	0xfe00e800

08004234 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	817b      	strh	r3, [r7, #10]
 8004242:	4613      	mov	r3, r2
 8004244:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004246:	897b      	ldrh	r3, [r7, #10]
 8004248:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800424c:	7a7b      	ldrb	r3, [r7, #9]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004254:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	4313      	orrs	r3, r2
 800425e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004262:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	0d5b      	lsrs	r3, r3, #21
 800426e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <I2C_TransferConfig+0x60>)
 8004274:	430b      	orrs	r3, r1
 8004276:	43db      	mvns	r3, r3
 8004278:	ea02 0103 	and.w	r1, r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	03ff63ff 	.word	0x03ff63ff

08004298 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d138      	bne.n	8004320 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e032      	b.n	8004322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2224      	movs	r2, #36	; 0x24
 80042c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0201 	bic.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b20      	cmp	r3, #32
 8004342:	d139      	bne.n	80043b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800434e:	2302      	movs	r3, #2
 8004350:	e033      	b.n	80043ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2224      	movs	r2, #36	; 0x24
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004380:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043b4:	2300      	movs	r3, #0
 80043b6:	e000      	b.n	80043ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
  }
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a04      	ldr	r2, [pc, #16]	; (80043e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d6:	6013      	str	r3, [r2, #0]
}
 80043d8:	bf00      	nop
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40007000 	.word	0x40007000

080043e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <HAL_PWREx_GetVoltageRange+0x18>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40007000 	.word	0x40007000

08004404 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004412:	d130      	bne.n	8004476 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004414:	4b23      	ldr	r3, [pc, #140]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800441c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004420:	d038      	beq.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800442a:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2232      	movs	r2, #50	; 0x32
 8004438:	fb02 f303 	mul.w	r3, r2, r3
 800443c:	4a1b      	ldr	r2, [pc, #108]	; (80044ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0c9b      	lsrs	r3, r3, #18
 8004444:	3301      	adds	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004448:	e002      	b.n	8004450 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3b01      	subs	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004450:	4b14      	ldr	r3, [pc, #80]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445c:	d102      	bne.n	8004464 <HAL_PWREx_ControlVoltageScaling+0x60>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f2      	bne.n	800444a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	d110      	bne.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e00f      	b.n	8004496 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004476:	4b0b      	ldr	r3, [pc, #44]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800447e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004482:	d007      	beq.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004484:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800448c:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004492:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40007000 	.word	0x40007000
 80044a8:	20000000 	.word	0x20000000
 80044ac:	431bde83 	.word	0x431bde83

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e3d4      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c2:	4ba1      	ldr	r3, [pc, #644]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044cc:	4b9e      	ldr	r3, [pc, #632]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 80e4 	beq.w	80046ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <HAL_RCC_OscConfig+0x4a>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	f040 808b 	bne.w	8004608 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 8087 	bne.w	8004608 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044fa:	4b93      	ldr	r3, [pc, #588]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_RCC_OscConfig+0x62>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e3ac      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1a      	ldr	r2, [r3, #32]
 8004516:	4b8c      	ldr	r3, [pc, #560]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d004      	beq.n	800452c <HAL_RCC_OscConfig+0x7c>
 8004522:	4b89      	ldr	r3, [pc, #548]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800452a:	e005      	b.n	8004538 <HAL_RCC_OscConfig+0x88>
 800452c:	4b86      	ldr	r3, [pc, #536]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004538:	4293      	cmp	r3, r2
 800453a:	d223      	bcs.n	8004584 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fd41 	bl	8004fc8 <RCC_SetFlashLatencyFromMSIRange>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e38d      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004550:	4b7d      	ldr	r3, [pc, #500]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a7c      	ldr	r2, [pc, #496]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004556:	f043 0308 	orr.w	r3, r3, #8
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b7a      	ldr	r3, [pc, #488]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4977      	ldr	r1, [pc, #476]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456e:	4b76      	ldr	r3, [pc, #472]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	021b      	lsls	r3, r3, #8
 800457c:	4972      	ldr	r1, [pc, #456]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
 8004582:	e025      	b.n	80045d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004584:	4b70      	ldr	r3, [pc, #448]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6f      	ldr	r2, [pc, #444]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800458a:	f043 0308 	orr.w	r3, r3, #8
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4b6d      	ldr	r3, [pc, #436]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	496a      	ldr	r1, [pc, #424]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a2:	4b69      	ldr	r3, [pc, #420]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	021b      	lsls	r3, r3, #8
 80045b0:	4965      	ldr	r1, [pc, #404]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fd01 	bl	8004fc8 <RCC_SetFlashLatencyFromMSIRange>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e34d      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045d0:	f000 fc36 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b5c      	ldr	r3, [pc, #368]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	091b      	lsrs	r3, r3, #4
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	495a      	ldr	r1, [pc, #360]	; (800474c <HAL_RCC_OscConfig+0x29c>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_RCC_OscConfig+0x2a0>)
 80045ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045f0:	4b58      	ldr	r3, [pc, #352]	; (8004754 <HAL_RCC_OscConfig+0x2a4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe fda9 	bl	800314c <HAL_InitTick>
 80045fa:	4603      	mov	r3, r0
 80045fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d052      	beq.n	80046aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	e331      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d032      	beq.n	8004676 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004610:	4b4d      	ldr	r3, [pc, #308]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a4c      	ldr	r2, [pc, #304]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800461c:	f7fe fde6 	bl	80031ec <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004624:	f7fe fde2 	bl	80031ec <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e31a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004636:	4b44      	ldr	r3, [pc, #272]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004642:	4b41      	ldr	r3, [pc, #260]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a40      	ldr	r2, [pc, #256]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004648:	f043 0308 	orr.w	r3, r3, #8
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b3e      	ldr	r3, [pc, #248]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	493b      	ldr	r1, [pc, #236]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004660:	4b39      	ldr	r3, [pc, #228]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	4936      	ldr	r1, [pc, #216]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004670:	4313      	orrs	r3, r2
 8004672:	604b      	str	r3, [r1, #4]
 8004674:	e01a      	b.n	80046ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004676:	4b34      	ldr	r3, [pc, #208]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a33      	ldr	r2, [pc, #204]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004682:	f7fe fdb3 	bl	80031ec <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800468a:	f7fe fdaf 	bl	80031ec <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e2e7      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800469c:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x1da>
 80046a8:	e000      	b.n	80046ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d074      	beq.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_OscConfig+0x21a>
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d10e      	bne.n	80046e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d10b      	bne.n	80046e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ca:	4b1f      	ldr	r3, [pc, #124]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d064      	beq.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d160      	bne.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e2c4      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ea:	d106      	bne.n	80046fa <HAL_RCC_OscConfig+0x24a>
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a15      	ldr	r2, [pc, #84]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 80046f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	e01d      	b.n	8004736 <HAL_RCC_OscConfig+0x286>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004702:	d10c      	bne.n	800471e <HAL_RCC_OscConfig+0x26e>
 8004704:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800470a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0c      	ldr	r2, [pc, #48]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e00b      	b.n	8004736 <HAL_RCC_OscConfig+0x286>
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a09      	ldr	r2, [pc, #36]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a06      	ldr	r2, [pc, #24]	; (8004748 <HAL_RCC_OscConfig+0x298>)
 8004730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004734:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01c      	beq.n	8004778 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fe fd55 	bl	80031ec <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004744:	e011      	b.n	800476a <HAL_RCC_OscConfig+0x2ba>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	0800a9b8 	.word	0x0800a9b8
 8004750:	20000000 	.word	0x20000000
 8004754:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004758:	f7fe fd48 	bl	80031ec <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e280      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476a:	4baf      	ldr	r3, [pc, #700]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x2a8>
 8004776:	e014      	b.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fe fd38 	bl	80031ec <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004780:	f7fe fd34 	bl	80031ec <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b64      	cmp	r3, #100	; 0x64
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e26c      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004792:	4ba5      	ldr	r3, [pc, #660]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f0      	bne.n	8004780 <HAL_RCC_OscConfig+0x2d0>
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d060      	beq.n	8004870 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_OscConfig+0x310>
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d119      	bne.n	80047ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d116      	bne.n	80047ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c0:	4b99      	ldr	r3, [pc, #612]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_RCC_OscConfig+0x328>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e249      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	4b93      	ldr	r3, [pc, #588]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	4990      	ldr	r1, [pc, #576]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047ec:	e040      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d023      	beq.n	800483e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047f6:	4b8c      	ldr	r3, [pc, #560]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a8b      	ldr	r2, [pc, #556]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fe fcf3 	bl	80031ec <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800480a:	f7fe fcef 	bl	80031ec <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e227      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481c:	4b82      	ldr	r3, [pc, #520]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004828:	4b7f      	ldr	r3, [pc, #508]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	497c      	ldr	r1, [pc, #496]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
 800483c:	e018      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b7a      	ldr	r3, [pc, #488]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a79      	ldr	r2, [pc, #484]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fe fccf 	bl	80031ec <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fe fccb 	bl	80031ec <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e203      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004864:	4b70      	ldr	r3, [pc, #448]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f0      	bne.n	8004852 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d03c      	beq.n	80048f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01c      	beq.n	80048be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004884:	4b68      	ldr	r3, [pc, #416]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488a:	4a67      	ldr	r2, [pc, #412]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004894:	f7fe fcaa 	bl	80031ec <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489c:	f7fe fca6 	bl	80031ec <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e1de      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ae:	4b5e      	ldr	r3, [pc, #376]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ef      	beq.n	800489c <HAL_RCC_OscConfig+0x3ec>
 80048bc:	e01b      	b.n	80048f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048be:	4b5a      	ldr	r3, [pc, #360]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	4a58      	ldr	r2, [pc, #352]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fe fc8d 	bl	80031ec <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d6:	f7fe fc89 	bl	80031ec <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e1c1      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e8:	4b4f      	ldr	r3, [pc, #316]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80048ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ef      	bne.n	80048d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 80a6 	beq.w	8004a50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004908:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004914:	4b44      	ldr	r3, [pc, #272]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	4a43      	ldr	r2, [pc, #268]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	6593      	str	r3, [r2, #88]	; 0x58
 8004920:	4b41      	ldr	r3, [pc, #260]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492c:	2301      	movs	r3, #1
 800492e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004930:	4b3e      	ldr	r3, [pc, #248]	; (8004a2c <HAL_RCC_OscConfig+0x57c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d118      	bne.n	800496e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800493c:	4b3b      	ldr	r3, [pc, #236]	; (8004a2c <HAL_RCC_OscConfig+0x57c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a3a      	ldr	r2, [pc, #232]	; (8004a2c <HAL_RCC_OscConfig+0x57c>)
 8004942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004946:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004948:	f7fe fc50 	bl	80031ec <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004950:	f7fe fc4c 	bl	80031ec <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e184      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004962:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <HAL_RCC_OscConfig+0x57c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d108      	bne.n	8004988 <HAL_RCC_OscConfig+0x4d8>
 8004976:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004986:	e024      	b.n	80049d2 <HAL_RCC_OscConfig+0x522>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b05      	cmp	r3, #5
 800498e:	d110      	bne.n	80049b2 <HAL_RCC_OscConfig+0x502>
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 8004998:	f043 0304 	orr.w	r3, r3, #4
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a20      	ldr	r2, [pc, #128]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b0:	e00f      	b.n	80049d2 <HAL_RCC_OscConfig+0x522>
 80049b2:	4b1d      	ldr	r3, [pc, #116]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b8:	4a1b      	ldr	r2, [pc, #108]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c2:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049ca:	f023 0304 	bic.w	r3, r3, #4
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d016      	beq.n	8004a08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049da:	f7fe fc07 	bl	80031ec <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e0:	e00a      	b.n	80049f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e2:	f7fe fc03 	bl	80031ec <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e139      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_OscConfig+0x578>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0ed      	beq.n	80049e2 <HAL_RCC_OscConfig+0x532>
 8004a06:	e01a      	b.n	8004a3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fe fbf0 	bl	80031ec <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a0e:	e00f      	b.n	8004a30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fe fbec 	bl	80031ec <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d906      	bls.n	8004a30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e122      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a30:	4b90      	ldr	r3, [pc, #576]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e8      	bne.n	8004a10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a3e:	7ffb      	ldrb	r3, [r7, #31]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a44:	4b8b      	ldr	r3, [pc, #556]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	4a8a      	ldr	r2, [pc, #552]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 8108 	beq.w	8004c6a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	f040 80d0 	bne.w	8004c04 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a64:	4b83      	ldr	r3, [pc, #524]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f003 0203 	and.w	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d130      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	3b01      	subs	r3, #1
 8004a84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d127      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d11f      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004aa4:	2a07      	cmp	r2, #7
 8004aa6:	bf14      	ite	ne
 8004aa8:	2201      	movne	r2, #1
 8004aaa:	2200      	moveq	r2, #0
 8004aac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d113      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d109      	bne.n	8004ada <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d06e      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d069      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ae0:	4b64      	ldr	r3, [pc, #400]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004aec:	4b61      	ldr	r3, [pc, #388]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0b7      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004afc:	4b5d      	ldr	r3, [pc, #372]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a5c      	ldr	r2, [pc, #368]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b08:	f7fe fb70 	bl	80031ec <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fe fb6c 	bl	80031ec <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e0a4      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b22:	4b54      	ldr	r3, [pc, #336]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b2e:	4b51      	ldr	r3, [pc, #324]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b30:	68da      	ldr	r2, [r3, #12]
 8004b32:	4b51      	ldr	r3, [pc, #324]	; (8004c78 <HAL_RCC_OscConfig+0x7c8>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b3e:	3a01      	subs	r2, #1
 8004b40:	0112      	lsls	r2, r2, #4
 8004b42:	4311      	orrs	r1, r2
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b48:	0212      	lsls	r2, r2, #8
 8004b4a:	4311      	orrs	r1, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b50:	0852      	lsrs	r2, r2, #1
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0552      	lsls	r2, r2, #21
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b5c:	0852      	lsrs	r2, r2, #1
 8004b5e:	3a01      	subs	r2, #1
 8004b60:	0652      	lsls	r2, r2, #25
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b68:	0912      	lsrs	r2, r2, #4
 8004b6a:	0452      	lsls	r2, r2, #17
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	4941      	ldr	r1, [pc, #260]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b74:	4b3f      	ldr	r3, [pc, #252]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a3e      	ldr	r2, [pc, #248]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b80:	4b3c      	ldr	r3, [pc, #240]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a3b      	ldr	r2, [pc, #236]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b8c:	f7fe fb2e 	bl	80031ec <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fe fb2a 	bl	80031ec <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e062      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba6:	4b33      	ldr	r3, [pc, #204]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0f0      	beq.n	8004b94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bb2:	e05a      	b.n	8004c6a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e059      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb8:	4b2e      	ldr	r3, [pc, #184]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d152      	bne.n	8004c6a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bd0:	4b28      	ldr	r3, [pc, #160]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bdc:	f7fe fb06 	bl	80031ec <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be4:	f7fe fb02 	bl	80031ec <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e03a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x734>
 8004c02:	e032      	b.n	8004c6a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d02d      	beq.n	8004c66 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c14:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004c16:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d105      	bne.n	8004c2e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c22:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c28:	f023 0303 	bic.w	r3, r3, #3
 8004c2c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c2e:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c34:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3e:	f7fe fad5 	bl	80031ec <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c46:	f7fe fad1 	bl	80031ec <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e009      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_OscConfig+0x7c4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1f0      	bne.n	8004c46 <HAL_RCC_OscConfig+0x796>
 8004c64:	e001      	b.n	8004c6a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	f99d808c 	.word	0xf99d808c

08004c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0c8      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c90:	4b66      	ldr	r3, [pc, #408]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d910      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b63      	ldr	r3, [pc, #396]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	4961      	ldr	r1, [pc, #388]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b5f      	ldr	r3, [pc, #380]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0b0      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d04c      	beq.n	8004d66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d107      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cd4:	4b56      	ldr	r3, [pc, #344]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d121      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e09e      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cec:	4b50      	ldr	r3, [pc, #320]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d115      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e092      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d04:	4b4a      	ldr	r3, [pc, #296]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e086      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d14:	4b46      	ldr	r3, [pc, #280]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e07e      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d24:	4b42      	ldr	r3, [pc, #264]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 0203 	bic.w	r2, r3, #3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	493f      	ldr	r1, [pc, #252]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d36:	f7fe fa59 	bl	80031ec <HAL_GetTick>
 8004d3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d3e:	f7fe fa55 	bl	80031ec <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e066      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d54:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 020c 	and.w	r2, r3, #12
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d1eb      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d72:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	492c      	ldr	r1, [pc, #176]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d84:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d210      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b26      	ldr	r3, [pc, #152]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 0207 	bic.w	r2, r3, #7
 8004d9a:	4924      	ldr	r1, [pc, #144]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b22      	ldr	r3, [pc, #136]	; (8004e2c <HAL_RCC_ClockConfig+0x1b0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e036      	b.n	8004e22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc0:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4918      	ldr	r1, [pc, #96]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d009      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4910      	ldr	r1, [pc, #64]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004df2:	f000 f825 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8004df6:	4602      	mov	r2, r0
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <HAL_RCC_ClockConfig+0x1b4>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	490c      	ldr	r1, [pc, #48]	; (8004e34 <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	5ccb      	ldrb	r3, [r1, r3]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0e:	4a0a      	ldr	r2, [pc, #40]	; (8004e38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <HAL_RCC_ClockConfig+0x1c0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fe f998 	bl	800314c <HAL_InitTick>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e20:	7afb      	ldrb	r3, [r7, #11]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40022000 	.word	0x40022000
 8004e30:	40021000 	.word	0x40021000
 8004e34:	0800a9b8 	.word	0x0800a9b8
 8004e38:	20000000 	.word	0x20000000
 8004e3c:	20000004 	.word	0x20000004

08004e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b089      	sub	sp, #36	; 0x24
 8004e44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e4e:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f003 030c 	and.w	r3, r3, #12
 8004e56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e58:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x34>
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b0c      	cmp	r3, #12
 8004e6c:	d121      	bne.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d11e      	bne.n	8004eb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e74:	4b34      	ldr	r3, [pc, #208]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e80:	4b31      	ldr	r3, [pc, #196]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	e005      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e90:	4b2d      	ldr	r3, [pc, #180]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 030f 	and.w	r3, r3, #15
 8004e9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e9c:	4a2b      	ldr	r2, [pc, #172]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10d      	bne.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d102      	bne.n	8004ebe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eb8:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	e004      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ec4:	4b23      	ldr	r3, [pc, #140]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ec6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	d134      	bne.n	8004f38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ece:	4b1e      	ldr	r3, [pc, #120]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d003      	beq.n	8004eec <HAL_RCC_GetSysClockFreq+0xac>
 8004ee4:	e005      	b.n	8004ef2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ee8:	617b      	str	r3, [r7, #20]
      break;
 8004eea:	e005      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004eec:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x114>)
 8004eee:	617b      	str	r3, [r7, #20]
      break;
 8004ef0:	e002      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	617b      	str	r3, [r7, #20]
      break;
 8004ef6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ef8:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	3301      	adds	r3, #1
 8004f04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f06:	4b10      	ldr	r3, [pc, #64]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	0a1b      	lsrs	r3, r3, #8
 8004f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	fb02 f203 	mul.w	r2, r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	0e5b      	lsrs	r3, r3, #25
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	3301      	adds	r3, #1
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f38:	69bb      	ldr	r3, [r7, #24]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3724      	adds	r7, #36	; 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	0800a9d0 	.word	0x0800a9d0
 8004f50:	00f42400 	.word	0x00f42400
 8004f54:	007a1200 	.word	0x007a1200

08004f58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f5c:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000000 	.word	0x20000000

08004f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f74:	f7ff fff0 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	0a1b      	lsrs	r3, r3, #8
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4904      	ldr	r1, [pc, #16]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	40021000 	.word	0x40021000
 8004f98:	0800a9c8 	.word	0x0800a9c8

08004f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fa0:	f7ff ffda 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	0adb      	lsrs	r3, r3, #11
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	4904      	ldr	r1, [pc, #16]	; (8004fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fb2:	5ccb      	ldrb	r3, [r1, r3]
 8004fb4:	f003 031f 	and.w	r3, r3, #31
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	0800a9c8 	.word	0x0800a9c8

08004fc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fd4:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004fe0:	f7ff fa02 	bl	80043e8 <HAL_PWREx_GetVoltageRange>
 8004fe4:	6178      	str	r0, [r7, #20]
 8004fe6:	e014      	b.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	4a24      	ldr	r2, [pc, #144]	; (8005080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff4:	4b22      	ldr	r3, [pc, #136]	; (8005080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005000:	f7ff f9f2 	bl	80043e8 <HAL_PWREx_GetVoltageRange>
 8005004:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005006:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500a:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800500c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005010:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d10b      	bne.n	8005032 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b80      	cmp	r3, #128	; 0x80
 800501e:	d919      	bls.n	8005054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2ba0      	cmp	r3, #160	; 0xa0
 8005024:	d902      	bls.n	800502c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005026:	2302      	movs	r3, #2
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	e013      	b.n	8005054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800502c:	2301      	movs	r3, #1
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	e010      	b.n	8005054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b80      	cmp	r3, #128	; 0x80
 8005036:	d902      	bls.n	800503e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005038:	2303      	movs	r3, #3
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	e00a      	b.n	8005054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d102      	bne.n	800504a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005044:	2302      	movs	r3, #2
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	e004      	b.n	8005054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b70      	cmp	r3, #112	; 0x70
 800504e:	d101      	bne.n	8005054 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005050:	2301      	movs	r3, #1
 8005052:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005054:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f023 0207 	bic.w	r2, r3, #7
 800505c:	4909      	ldr	r1, [pc, #36]	; (8005084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005064:	4b07      	ldr	r3, [pc, #28]	; (8005084 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	429a      	cmp	r2, r3
 8005070:	d001      	beq.n	8005076 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	40022000 	.word	0x40022000

08005088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005090:	2300      	movs	r3, #0
 8005092:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005094:	2300      	movs	r3, #0
 8005096:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d041      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050ac:	d02a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050b2:	d824      	bhi.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050b8:	d008      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050be:	d81e      	bhi.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80050c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c8:	d010      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050ca:	e018      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80050cc:	4b86      	ldr	r3, [pc, #536]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a85      	ldr	r2, [pc, #532]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050d8:	e015      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3304      	adds	r3, #4
 80050de:	2100      	movs	r1, #0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 facb 	bl	800567c <RCCEx_PLLSAI1_Config>
 80050e6:	4603      	mov	r3, r0
 80050e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ea:	e00c      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3320      	adds	r3, #32
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fbb6 	bl	8005864 <RCCEx_PLLSAI2_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050fc:	e003      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	74fb      	strb	r3, [r7, #19]
      break;
 8005102:	e000      	b.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005104:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005106:	7cfb      	ldrb	r3, [r7, #19]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800510c:	4b76      	ldr	r3, [pc, #472]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800511a:	4973      	ldr	r1, [pc, #460]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005122:	e001      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d041      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800513c:	d02a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800513e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005142:	d824      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005148:	d008      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800514a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800514e:	d81e      	bhi.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005158:	d010      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800515a:	e018      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800515c:	4b62      	ldr	r3, [pc, #392]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4a61      	ldr	r2, [pc, #388]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005166:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005168:	e015      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3304      	adds	r3, #4
 800516e:	2100      	movs	r1, #0
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fa83 	bl	800567c <RCCEx_PLLSAI1_Config>
 8005176:	4603      	mov	r3, r0
 8005178:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800517a:	e00c      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3320      	adds	r3, #32
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fb6e 	bl	8005864 <RCCEx_PLLSAI2_Config>
 8005188:	4603      	mov	r3, r0
 800518a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800518c:	e003      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	74fb      	strb	r3, [r7, #19]
      break;
 8005192:	e000      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005194:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800519c:	4b52      	ldr	r3, [pc, #328]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051aa:	494f      	ldr	r1, [pc, #316]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051b2:	e001      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b4:	7cfb      	ldrb	r3, [r7, #19]
 80051b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 80a0 	beq.w	8005306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051c6:	2300      	movs	r3, #0
 80051c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80051ca:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e0:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	4a40      	ldr	r2, [pc, #256]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ea:	6593      	str	r3, [r2, #88]	; 0x58
 80051ec:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f8:	2301      	movs	r3, #1
 80051fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051fc:	4b3b      	ldr	r3, [pc, #236]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a3a      	ldr	r2, [pc, #232]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005206:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005208:	f7fd fff0 	bl	80031ec <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800520e:	e009      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005210:	f7fd ffec 	bl	80031ec <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d902      	bls.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	74fb      	strb	r3, [r7, #19]
        break;
 8005222:	e005      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005224:	4b31      	ldr	r3, [pc, #196]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0ef      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005230:	7cfb      	ldrb	r3, [r7, #19]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d15c      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005240:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01f      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	429a      	cmp	r2, r3
 8005252:	d019      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005254:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005260:	4b21      	ldr	r3, [pc, #132]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005266:	4a20      	ldr	r2, [pc, #128]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005270:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	4a1c      	ldr	r2, [pc, #112]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005280:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fd ffab 	bl	80031ec <HAL_GetTick>
 8005296:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005298:	e00b      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fd ffa7 	bl	80031ec <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d902      	bls.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	74fb      	strb	r3, [r7, #19]
            break;
 80052b0:	e006      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0ec      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80052c0:	7cfb      	ldrb	r3, [r7, #19]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d6:	4904      	ldr	r1, [pc, #16]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052de:	e009      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052e0:	7cfb      	ldrb	r3, [r7, #19]
 80052e2:	74bb      	strb	r3, [r7, #18]
 80052e4:	e006      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
 80052ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052f4:	7c7b      	ldrb	r3, [r7, #17]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d105      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fa:	4b9e      	ldr	r3, [pc, #632]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052fe:	4a9d      	ldr	r2, [pc, #628]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005304:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005312:	4b98      	ldr	r3, [pc, #608]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f023 0203 	bic.w	r2, r3, #3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	4994      	ldr	r1, [pc, #592]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005334:	4b8f      	ldr	r3, [pc, #572]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f023 020c 	bic.w	r2, r3, #12
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	498c      	ldr	r1, [pc, #560]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005356:	4b87      	ldr	r3, [pc, #540]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	4983      	ldr	r1, [pc, #524]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0308 	and.w	r3, r3, #8
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005378:	4b7e      	ldr	r3, [pc, #504]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005386:	497b      	ldr	r1, [pc, #492]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800539a:	4b76      	ldr	r3, [pc, #472]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a8:	4972      	ldr	r1, [pc, #456]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053bc:	4b6d      	ldr	r3, [pc, #436]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	496a      	ldr	r1, [pc, #424]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053de:	4b65      	ldr	r3, [pc, #404]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	4961      	ldr	r1, [pc, #388]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005400:	4b5c      	ldr	r3, [pc, #368]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540e:	4959      	ldr	r1, [pc, #356]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005410:	4313      	orrs	r3, r2
 8005412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005422:	4b54      	ldr	r3, [pc, #336]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005430:	4950      	ldr	r1, [pc, #320]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005444:	4b4b      	ldr	r3, [pc, #300]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	4948      	ldr	r1, [pc, #288]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005466:	4b43      	ldr	r3, [pc, #268]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005474:	493f      	ldr	r1, [pc, #252]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005476:	4313      	orrs	r3, r2
 8005478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d028      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005488:	4b3a      	ldr	r3, [pc, #232]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005496:	4937      	ldr	r1, [pc, #220]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005498:	4313      	orrs	r3, r2
 800549a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a6:	d106      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a8:	4b32      	ldr	r3, [pc, #200]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4a31      	ldr	r2, [pc, #196]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054b2:	60d3      	str	r3, [r2, #12]
 80054b4:	e011      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054be:	d10c      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	2101      	movs	r1, #1
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f8d8 	bl	800567c <RCCEx_PLLSAI1_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054d0:	7cfb      	ldrb	r3, [r7, #19]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d028      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054e6:	4b23      	ldr	r3, [pc, #140]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	491f      	ldr	r1, [pc, #124]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005504:	d106      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005506:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800550c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005510:	60d3      	str	r3, [r2, #12]
 8005512:	e011      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800551c:	d10c      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3304      	adds	r3, #4
 8005522:	2101      	movs	r1, #1
 8005524:	4618      	mov	r0, r3
 8005526:	f000 f8a9 	bl	800567c <RCCEx_PLLSAI1_Config>
 800552a:	4603      	mov	r3, r0
 800552c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800552e:	7cfb      	ldrb	r3, [r7, #19]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005534:	7cfb      	ldrb	r3, [r7, #19]
 8005536:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d02b      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	4908      	ldr	r1, [pc, #32]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005554:	4313      	orrs	r3, r2
 8005556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005562:	d109      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005564:	4b03      	ldr	r3, [pc, #12]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a02      	ldr	r2, [pc, #8]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800556e:	60d3      	str	r3, [r2, #12]
 8005570:	e014      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005572:	bf00      	nop
 8005574:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005580:	d10c      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3304      	adds	r3, #4
 8005586:	2101      	movs	r1, #1
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f877 	bl	800567c <RCCEx_PLLSAI1_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005598:	7cfb      	ldrb	r3, [r7, #19]
 800559a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02f      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055a8:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b6:	4928      	ldr	r1, [pc, #160]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c6:	d10d      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f854 	bl	800567c <RCCEx_PLLSAI1_Config>
 80055d4:	4603      	mov	r3, r0
 80055d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055d8:	7cfb      	ldrb	r3, [r7, #19]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d014      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80055de:	7cfb      	ldrb	r3, [r7, #19]
 80055e0:	74bb      	strb	r3, [r7, #18]
 80055e2:	e011      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ec:	d10c      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3320      	adds	r3, #32
 80055f2:	2102      	movs	r1, #2
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 f935 	bl	8005864 <RCCEx_PLLSAI2_Config>
 80055fa:	4603      	mov	r3, r0
 80055fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005604:	7cfb      	ldrb	r3, [r7, #19]
 8005606:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005614:	4b10      	ldr	r3, [pc, #64]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005622:	490d      	ldr	r1, [pc, #52]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005646:	4904      	ldr	r1, [pc, #16]	; (8005658 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800564e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40021000 	.word	0x40021000

0800565c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a04      	ldr	r2, [pc, #16]	; (8005678 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005666:	f043 0304 	orr.w	r3, r3, #4
 800566a:	6013      	str	r3, [r2, #0]
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000

0800567c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800568a:	4b75      	ldr	r3, [pc, #468]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d018      	beq.n	80056c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005696:	4b72      	ldr	r3, [pc, #456]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0203 	and.w	r2, r3, #3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d10d      	bne.n	80056c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
       ||
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80056ae:	4b6c      	ldr	r3, [pc, #432]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	091b      	lsrs	r3, r3, #4
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
       ||
 80056be:	429a      	cmp	r2, r3
 80056c0:	d047      	beq.n	8005752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
 80056c6:	e044      	b.n	8005752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b03      	cmp	r3, #3
 80056ce:	d018      	beq.n	8005702 <RCCEx_PLLSAI1_Config+0x86>
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d825      	bhi.n	8005720 <RCCEx_PLLSAI1_Config+0xa4>
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d002      	beq.n	80056de <RCCEx_PLLSAI1_Config+0x62>
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d009      	beq.n	80056f0 <RCCEx_PLLSAI1_Config+0x74>
 80056dc:	e020      	b.n	8005720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056de:	4b60      	ldr	r3, [pc, #384]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d11d      	bne.n	8005726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ee:	e01a      	b.n	8005726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056f0:	4b5b      	ldr	r3, [pc, #364]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005700:	e013      	b.n	800572a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005702:	4b57      	ldr	r3, [pc, #348]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10f      	bne.n	800572e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800570e:	4b54      	ldr	r3, [pc, #336]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d109      	bne.n	800572e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800571e:	e006      	b.n	800572e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	73fb      	strb	r3, [r7, #15]
      break;
 8005724:	e004      	b.n	8005730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800572e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10d      	bne.n	8005752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005736:	4b4a      	ldr	r3, [pc, #296]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	3b01      	subs	r3, #1
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	430b      	orrs	r3, r1
 800574c:	4944      	ldr	r1, [pc, #272]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800574e:	4313      	orrs	r3, r2
 8005750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d17d      	bne.n	8005854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005758:	4b41      	ldr	r3, [pc, #260]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a40      	ldr	r2, [pc, #256]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800575e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005764:	f7fd fd42 	bl	80031ec <HAL_GetTick>
 8005768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800576a:	e009      	b.n	8005780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800576c:	f7fd fd3e 	bl	80031ec <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d902      	bls.n	8005780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	73fb      	strb	r3, [r7, #15]
        break;
 800577e:	e005      	b.n	800578c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005780:	4b37      	ldr	r3, [pc, #220]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1ef      	bne.n	800576c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800578c:	7bfb      	ldrb	r3, [r7, #15]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d160      	bne.n	8005854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d111      	bne.n	80057bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005798:	4b31      	ldr	r3, [pc, #196]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6892      	ldr	r2, [r2, #8]
 80057a8:	0211      	lsls	r1, r2, #8
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68d2      	ldr	r2, [r2, #12]
 80057ae:	0912      	lsrs	r2, r2, #4
 80057b0:	0452      	lsls	r2, r2, #17
 80057b2:	430a      	orrs	r2, r1
 80057b4:	492a      	ldr	r1, [pc, #168]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	610b      	str	r3, [r1, #16]
 80057ba:	e027      	b.n	800580c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d112      	bne.n	80057e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057c2:	4b27      	ldr	r3, [pc, #156]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6892      	ldr	r2, [r2, #8]
 80057d2:	0211      	lsls	r1, r2, #8
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6912      	ldr	r2, [r2, #16]
 80057d8:	0852      	lsrs	r2, r2, #1
 80057da:	3a01      	subs	r2, #1
 80057dc:	0552      	lsls	r2, r2, #21
 80057de:	430a      	orrs	r2, r1
 80057e0:	491f      	ldr	r1, [pc, #124]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	610b      	str	r3, [r1, #16]
 80057e6:	e011      	b.n	800580c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057e8:	4b1d      	ldr	r3, [pc, #116]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6892      	ldr	r2, [r2, #8]
 80057f8:	0211      	lsls	r1, r2, #8
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6952      	ldr	r2, [r2, #20]
 80057fe:	0852      	lsrs	r2, r2, #1
 8005800:	3a01      	subs	r2, #1
 8005802:	0652      	lsls	r2, r2, #25
 8005804:	430a      	orrs	r2, r1
 8005806:	4916      	ldr	r1, [pc, #88]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005808:	4313      	orrs	r3, r2
 800580a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800580c:	4b14      	ldr	r3, [pc, #80]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a13      	ldr	r2, [pc, #76]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005812:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fd fce8 	bl	80031ec <HAL_GetTick>
 800581c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800581e:	e009      	b.n	8005834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005820:	f7fd fce4 	bl	80031ec <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d902      	bls.n	8005834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	73fb      	strb	r3, [r7, #15]
          break;
 8005832:	e005      	b.n	8005840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0ef      	beq.n	8005820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	4904      	ldr	r1, [pc, #16]	; (8005860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005850:	4313      	orrs	r3, r2
 8005852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40021000 	.word	0x40021000

08005864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005872:	4b6a      	ldr	r3, [pc, #424]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d018      	beq.n	80058b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800587e:	4b67      	ldr	r3, [pc, #412]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0203 	and.w	r2, r3, #3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d10d      	bne.n	80058aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
       ||
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005896:	4b61      	ldr	r3, [pc, #388]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
       ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d047      	beq.n	800593a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	73fb      	strb	r3, [r7, #15]
 80058ae:	e044      	b.n	800593a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d018      	beq.n	80058ea <RCCEx_PLLSAI2_Config+0x86>
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d825      	bhi.n	8005908 <RCCEx_PLLSAI2_Config+0xa4>
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d002      	beq.n	80058c6 <RCCEx_PLLSAI2_Config+0x62>
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d009      	beq.n	80058d8 <RCCEx_PLLSAI2_Config+0x74>
 80058c4:	e020      	b.n	8005908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058c6:	4b55      	ldr	r3, [pc, #340]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d11d      	bne.n	800590e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058d6:	e01a      	b.n	800590e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058d8:	4b50      	ldr	r3, [pc, #320]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d116      	bne.n	8005912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e8:	e013      	b.n	8005912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058ea:	4b4c      	ldr	r3, [pc, #304]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10f      	bne.n	8005916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058f6:	4b49      	ldr	r3, [pc, #292]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d109      	bne.n	8005916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005906:	e006      	b.n	8005916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      break;
 800590c:	e004      	b.n	8005918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800590e:	bf00      	nop
 8005910:	e002      	b.n	8005918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005916:	bf00      	nop
    }

    if(status == HAL_OK)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800591e:	4b3f      	ldr	r3, [pc, #252]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6819      	ldr	r1, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	3b01      	subs	r3, #1
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	430b      	orrs	r3, r1
 8005934:	4939      	ldr	r1, [pc, #228]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d167      	bne.n	8005a10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005940:	4b36      	ldr	r3, [pc, #216]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a35      	ldr	r2, [pc, #212]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800594a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800594c:	f7fd fc4e 	bl	80031ec <HAL_GetTick>
 8005950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005952:	e009      	b.n	8005968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005954:	f7fd fc4a 	bl	80031ec <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d902      	bls.n	8005968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	73fb      	strb	r3, [r7, #15]
        break;
 8005966:	e005      	b.n	8005974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005968:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1ef      	bne.n	8005954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d14a      	bne.n	8005a10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d111      	bne.n	80059a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005980:	4b26      	ldr	r3, [pc, #152]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6892      	ldr	r2, [r2, #8]
 8005990:	0211      	lsls	r1, r2, #8
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68d2      	ldr	r2, [r2, #12]
 8005996:	0912      	lsrs	r2, r2, #4
 8005998:	0452      	lsls	r2, r2, #17
 800599a:	430a      	orrs	r2, r1
 800599c:	491f      	ldr	r1, [pc, #124]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	614b      	str	r3, [r1, #20]
 80059a2:	e011      	b.n	80059c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059a4:	4b1d      	ldr	r3, [pc, #116]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6892      	ldr	r2, [r2, #8]
 80059b4:	0211      	lsls	r1, r2, #8
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6912      	ldr	r2, [r2, #16]
 80059ba:	0852      	lsrs	r2, r2, #1
 80059bc:	3a01      	subs	r2, #1
 80059be:	0652      	lsls	r2, r2, #25
 80059c0:	430a      	orrs	r2, r1
 80059c2:	4916      	ldr	r1, [pc, #88]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80059c8:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a13      	ldr	r2, [pc, #76]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d4:	f7fd fc0a 	bl	80031ec <HAL_GetTick>
 80059d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059da:	e009      	b.n	80059f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059dc:	f7fd fc06 	bl	80031ec <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d902      	bls.n	80059f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	73fb      	strb	r3, [r7, #15]
          break;
 80059ee:	e005      	b.n	80059fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ef      	beq.n	80059dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	4904      	ldr	r1, [pc, #16]	; (8005a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40021000 	.word	0x40021000

08005a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e049      	b.n	8005ac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fd f856 	bl	8002af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f000 fc6e 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e049      	b.n	8005b74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7fd f8b9 	bl	8002c6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f000 fc17 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_TIM_PWM_Start+0x24>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	bf14      	ite	ne
 8005b98:	2301      	movne	r3, #1
 8005b9a:	2300      	moveq	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	e03c      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d109      	bne.n	8005bba <HAL_TIM_PWM_Start+0x3e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e02f      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d109      	bne.n	8005bd4 <HAL_TIM_PWM_Start+0x58>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e022      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b0c      	cmp	r3, #12
 8005bd8:	d109      	bne.n	8005bee <HAL_TIM_PWM_Start+0x72>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	bf14      	ite	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	2300      	moveq	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	e015      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d109      	bne.n	8005c08 <HAL_TIM_PWM_Start+0x8c>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	bf14      	ite	ne
 8005c00:	2301      	movne	r3, #1
 8005c02:	2300      	moveq	r3, #0
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e008      	b.n	8005c1a <HAL_TIM_PWM_Start+0x9e>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e09c      	b.n	8005d5c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <HAL_TIM_PWM_Start+0xb6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c30:	e023      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b04      	cmp	r3, #4
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_PWM_Start+0xc6>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c40:	e01b      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_PWM_Start+0xd6>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c50:	e013      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Start+0xe6>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c60:	e00b      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_PWM_Start+0xf6>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c70:	e003      	b.n	8005c7a <HAL_TIM_PWM_Start+0xfe>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	6839      	ldr	r1, [r7, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f88a 	bl	8006d9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a35      	ldr	r2, [pc, #212]	; (8005d64 <HAL_TIM_PWM_Start+0x1e8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <HAL_TIM_PWM_Start+0x13e>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a34      	ldr	r2, [pc, #208]	; (8005d68 <HAL_TIM_PWM_Start+0x1ec>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00e      	beq.n	8005cba <HAL_TIM_PWM_Start+0x13e>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a32      	ldr	r2, [pc, #200]	; (8005d6c <HAL_TIM_PWM_Start+0x1f0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d009      	beq.n	8005cba <HAL_TIM_PWM_Start+0x13e>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <HAL_TIM_PWM_Start+0x1f4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <HAL_TIM_PWM_Start+0x13e>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a2f      	ldr	r2, [pc, #188]	; (8005d74 <HAL_TIM_PWM_Start+0x1f8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_PWM_Start+0x142>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <HAL_TIM_PWM_Start+0x144>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a22      	ldr	r2, [pc, #136]	; (8005d64 <HAL_TIM_PWM_Start+0x1e8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01d      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x19e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce6:	d018      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x19e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a22      	ldr	r2, [pc, #136]	; (8005d78 <HAL_TIM_PWM_Start+0x1fc>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d013      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x19e>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <HAL_TIM_PWM_Start+0x200>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00e      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x19e>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_TIM_PWM_Start+0x204>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d009      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x19e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <HAL_TIM_PWM_Start+0x1ec>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIM_PWM_Start+0x19e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <HAL_TIM_PWM_Start+0x1f0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d115      	bne.n	8005d46 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <HAL_TIM_PWM_Start+0x208>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b06      	cmp	r3, #6
 8005d2a:	d015      	beq.n	8005d58 <HAL_TIM_PWM_Start+0x1dc>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d32:	d011      	beq.n	8005d58 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d44:	e008      	b.n	8005d58 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	e000      	b.n	8005d5a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40012c00 	.word	0x40012c00
 8005d68:	40013400 	.word	0x40013400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	00010007 	.word	0x00010007

08005d88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e049      	b.n	8005e2e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f841 	bl	8005e36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f000 faba 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d101      	bne.n	8005e68 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e64:	2302      	movs	r3, #2
 8005e66:	e088      	b.n	8005f7a <HAL_TIM_IC_ConfigChannel+0x130>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d11b      	bne.n	8005eae <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	6819      	ldr	r1, [r3, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f000 fdcb 	bl	8006a20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 020c 	bic.w	r2, r2, #12
 8005e98:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6999      	ldr	r1, [r3, #24]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	689a      	ldr	r2, [r3, #8]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	619a      	str	r2, [r3, #24]
 8005eac:	e060      	b.n	8005f70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d11c      	bne.n	8005eee <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6819      	ldr	r1, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f000 fe49 	bl	8006b5a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ed6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6999      	ldr	r1, [r3, #24]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	021a      	lsls	r2, r3, #8
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	619a      	str	r2, [r3, #24]
 8005eec:	e040      	b.n	8005f70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d11b      	bne.n	8005f2c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6819      	ldr	r1, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f000 fe96 	bl	8006c34 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 020c 	bic.w	r2, r2, #12
 8005f16:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69d9      	ldr	r1, [r3, #28]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	61da      	str	r2, [r3, #28]
 8005f2a:	e021      	b.n	8005f70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	d11c      	bne.n	8005f6c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f000 feb3 	bl	8006cac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f54:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69d9      	ldr	r1, [r3, #28]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	021a      	lsls	r2, r3, #8
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	61da      	str	r2, [r3, #28]
 8005f6a:	e001      	b.n	8005f70 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e0ff      	b.n	80061a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b14      	cmp	r3, #20
 8005fae:	f200 80f0 	bhi.w	8006192 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fb2:	a201      	add	r2, pc, #4	; (adr r2, 8005fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	0800600d 	.word	0x0800600d
 8005fbc:	08006193 	.word	0x08006193
 8005fc0:	08006193 	.word	0x08006193
 8005fc4:	08006193 	.word	0x08006193
 8005fc8:	0800604d 	.word	0x0800604d
 8005fcc:	08006193 	.word	0x08006193
 8005fd0:	08006193 	.word	0x08006193
 8005fd4:	08006193 	.word	0x08006193
 8005fd8:	0800608f 	.word	0x0800608f
 8005fdc:	08006193 	.word	0x08006193
 8005fe0:	08006193 	.word	0x08006193
 8005fe4:	08006193 	.word	0x08006193
 8005fe8:	080060cf 	.word	0x080060cf
 8005fec:	08006193 	.word	0x08006193
 8005ff0:	08006193 	.word	0x08006193
 8005ff4:	08006193 	.word	0x08006193
 8005ff8:	08006111 	.word	0x08006111
 8005ffc:	08006193 	.word	0x08006193
 8006000:	08006193 	.word	0x08006193
 8006004:	08006193 	.word	0x08006193
 8006008:	08006151 	.word	0x08006151
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fa2e 	bl	8006474 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0208 	orr.w	r2, r2, #8
 8006026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0204 	bic.w	r2, r2, #4
 8006036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6999      	ldr	r1, [r3, #24]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	619a      	str	r2, [r3, #24]
      break;
 800604a:	e0a5      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fa9e 	bl	8006594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6999      	ldr	r1, [r3, #24]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	021a      	lsls	r2, r3, #8
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	619a      	str	r2, [r3, #24]
      break;
 800608c:	e084      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68b9      	ldr	r1, [r7, #8]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 fb07 	bl	80066a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69da      	ldr	r2, [r3, #28]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 0208 	orr.w	r2, r2, #8
 80060a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0204 	bic.w	r2, r2, #4
 80060b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69d9      	ldr	r1, [r3, #28]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	61da      	str	r2, [r3, #28]
      break;
 80060cc:	e064      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fb6f 	bl	80067b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69da      	ldr	r2, [r3, #28]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69d9      	ldr	r1, [r3, #28]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	021a      	lsls	r2, r3, #8
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	61da      	str	r2, [r3, #28]
      break;
 800610e:	e043      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 fbb8 	bl	800688c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0208 	orr.w	r2, r2, #8
 800612a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800614e:	e023      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fbfc 	bl	8006954 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	021a      	lsls	r2, r3, #8
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006190:	e002      	b.n	8006198 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	75fb      	strb	r3, [r7, #23]
      break;
 8006196:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop

080061ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d101      	bne.n	80061c8 <HAL_TIM_ConfigClockSource+0x1c>
 80061c4:	2302      	movs	r3, #2
 80061c6:	e0b6      	b.n	8006336 <HAL_TIM_ConfigClockSource+0x18a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006204:	d03e      	beq.n	8006284 <HAL_TIM_ConfigClockSource+0xd8>
 8006206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800620a:	f200 8087 	bhi.w	800631c <HAL_TIM_ConfigClockSource+0x170>
 800620e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006212:	f000 8086 	beq.w	8006322 <HAL_TIM_ConfigClockSource+0x176>
 8006216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621a:	d87f      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 800621c:	2b70      	cmp	r3, #112	; 0x70
 800621e:	d01a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0xaa>
 8006220:	2b70      	cmp	r3, #112	; 0x70
 8006222:	d87b      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 8006224:	2b60      	cmp	r3, #96	; 0x60
 8006226:	d050      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x11e>
 8006228:	2b60      	cmp	r3, #96	; 0x60
 800622a:	d877      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 800622c:	2b50      	cmp	r3, #80	; 0x50
 800622e:	d03c      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0xfe>
 8006230:	2b50      	cmp	r3, #80	; 0x50
 8006232:	d873      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d058      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x13e>
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	d86f      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 800623c:	2b30      	cmp	r3, #48	; 0x30
 800623e:	d064      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x15e>
 8006240:	2b30      	cmp	r3, #48	; 0x30
 8006242:	d86b      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 8006244:	2b20      	cmp	r3, #32
 8006246:	d060      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x15e>
 8006248:	2b20      	cmp	r3, #32
 800624a:	d867      	bhi.n	800631c <HAL_TIM_ConfigClockSource+0x170>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05c      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x15e>
 8006250:	2b10      	cmp	r3, #16
 8006252:	d05a      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x15e>
 8006254:	e062      	b.n	800631c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6899      	ldr	r1, [r3, #8]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f000 fd79 	bl	8006d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	609a      	str	r2, [r3, #8]
      break;
 8006282:	e04f      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6899      	ldr	r1, [r3, #8]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f000 fd62 	bl	8006d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062a6:	609a      	str	r2, [r3, #8]
      break;
 80062a8:	e03c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f000 fc20 	bl	8006afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2150      	movs	r1, #80	; 0x50
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fd2f 	bl	8006d26 <TIM_ITRx_SetConfig>
      break;
 80062c8:	e02c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f000 fc7c 	bl	8006bd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2160      	movs	r1, #96	; 0x60
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fd1f 	bl	8006d26 <TIM_ITRx_SetConfig>
      break;
 80062e8:	e01c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6859      	ldr	r1, [r3, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	461a      	mov	r2, r3
 80062f8:	f000 fc00 	bl	8006afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fd0f 	bl	8006d26 <TIM_ITRx_SetConfig>
      break;
 8006308:	e00c      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f000 fd06 	bl	8006d26 <TIM_ITRx_SetConfig>
      break;
 800631a:	e003      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
      break;
 8006320:	e000      	b.n	8006324 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a40      	ldr	r2, [pc, #256]	; (8006454 <TIM_Base_SetConfig+0x114>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635e:	d00f      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a3d      	ldr	r2, [pc, #244]	; (8006458 <TIM_Base_SetConfig+0x118>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a3c      	ldr	r2, [pc, #240]	; (800645c <TIM_Base_SetConfig+0x11c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a3b      	ldr	r2, [pc, #236]	; (8006460 <TIM_Base_SetConfig+0x120>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a3a      	ldr	r2, [pc, #232]	; (8006464 <TIM_Base_SetConfig+0x124>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d108      	bne.n	8006392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2f      	ldr	r2, [pc, #188]	; (8006454 <TIM_Base_SetConfig+0x114>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01f      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a0:	d01b      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <TIM_Base_SetConfig+0x118>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d017      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a2b      	ldr	r2, [pc, #172]	; (800645c <TIM_Base_SetConfig+0x11c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <TIM_Base_SetConfig+0x120>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a29      	ldr	r2, [pc, #164]	; (8006464 <TIM_Base_SetConfig+0x124>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a28      	ldr	r2, [pc, #160]	; (8006468 <TIM_Base_SetConfig+0x128>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a27      	ldr	r2, [pc, #156]	; (800646c <TIM_Base_SetConfig+0x12c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a26      	ldr	r2, [pc, #152]	; (8006470 <TIM_Base_SetConfig+0x130>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a10      	ldr	r2, [pc, #64]	; (8006454 <TIM_Base_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00f      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a12      	ldr	r2, [pc, #72]	; (8006464 <TIM_Base_SetConfig+0x124>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00b      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a11      	ldr	r2, [pc, #68]	; (8006468 <TIM_Base_SetConfig+0x128>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d007      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a10      	ldr	r2, [pc, #64]	; (800646c <TIM_Base_SetConfig+0x12c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a0f      	ldr	r2, [pc, #60]	; (8006470 <TIM_Base_SetConfig+0x130>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d103      	bne.n	8006440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	615a      	str	r2, [r3, #20]
}
 8006446:	bf00      	nop
 8006448:	3714      	adds	r7, #20
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	40012c00 	.word	0x40012c00
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800
 8006460:	40000c00 	.word	0x40000c00
 8006464:	40013400 	.word	0x40013400
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800

08006474 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f023 0201 	bic.w	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f023 0302 	bic.w	r3, r3, #2
 80064c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a2c      	ldr	r2, [pc, #176]	; (8006580 <TIM_OC1_SetConfig+0x10c>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00f      	beq.n	80064f4 <TIM_OC1_SetConfig+0x80>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a2b      	ldr	r2, [pc, #172]	; (8006584 <TIM_OC1_SetConfig+0x110>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00b      	beq.n	80064f4 <TIM_OC1_SetConfig+0x80>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <TIM_OC1_SetConfig+0x114>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d007      	beq.n	80064f4 <TIM_OC1_SetConfig+0x80>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a29      	ldr	r2, [pc, #164]	; (800658c <TIM_OC1_SetConfig+0x118>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d003      	beq.n	80064f4 <TIM_OC1_SetConfig+0x80>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a28      	ldr	r2, [pc, #160]	; (8006590 <TIM_OC1_SetConfig+0x11c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d10c      	bne.n	800650e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f023 0308 	bic.w	r3, r3, #8
 80064fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0304 	bic.w	r3, r3, #4
 800650c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1b      	ldr	r2, [pc, #108]	; (8006580 <TIM_OC1_SetConfig+0x10c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00f      	beq.n	8006536 <TIM_OC1_SetConfig+0xc2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <TIM_OC1_SetConfig+0x110>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00b      	beq.n	8006536 <TIM_OC1_SetConfig+0xc2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a19      	ldr	r2, [pc, #100]	; (8006588 <TIM_OC1_SetConfig+0x114>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <TIM_OC1_SetConfig+0xc2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a18      	ldr	r2, [pc, #96]	; (800658c <TIM_OC1_SetConfig+0x118>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_OC1_SetConfig+0xc2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a17      	ldr	r2, [pc, #92]	; (8006590 <TIM_OC1_SetConfig+0x11c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d111      	bne.n	800655a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800653c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4313      	orrs	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	621a      	str	r2, [r3, #32]
}
 8006574:	bf00      	nop
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40013400 	.word	0x40013400
 8006588:	40014000 	.word	0x40014000
 800658c:	40014400 	.word	0x40014400
 8006590:	40014800 	.word	0x40014800

08006594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0210 	bic.w	r2, r3, #16
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0320 	bic.w	r3, r3, #32
 80065e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a28      	ldr	r2, [pc, #160]	; (8006694 <TIM_OC2_SetConfig+0x100>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d003      	beq.n	8006600 <TIM_OC2_SetConfig+0x6c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a27      	ldr	r2, [pc, #156]	; (8006698 <TIM_OC2_SetConfig+0x104>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d10d      	bne.n	800661c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	011b      	lsls	r3, r3, #4
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	4313      	orrs	r3, r2
 8006612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a1d      	ldr	r2, [pc, #116]	; (8006694 <TIM_OC2_SetConfig+0x100>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00f      	beq.n	8006644 <TIM_OC2_SetConfig+0xb0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a1c      	ldr	r2, [pc, #112]	; (8006698 <TIM_OC2_SetConfig+0x104>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00b      	beq.n	8006644 <TIM_OC2_SetConfig+0xb0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a1b      	ldr	r2, [pc, #108]	; (800669c <TIM_OC2_SetConfig+0x108>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d007      	beq.n	8006644 <TIM_OC2_SetConfig+0xb0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a1a      	ldr	r2, [pc, #104]	; (80066a0 <TIM_OC2_SetConfig+0x10c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC2_SetConfig+0xb0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a19      	ldr	r2, [pc, #100]	; (80066a4 <TIM_OC2_SetConfig+0x110>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d113      	bne.n	800666c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800664a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	621a      	str	r2, [r3, #32]
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40012c00 	.word	0x40012c00
 8006698:	40013400 	.word	0x40013400
 800669c:	40014000 	.word	0x40014000
 80066a0:	40014400 	.word	0x40014400
 80066a4:	40014800 	.word	0x40014800

080066a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f023 0303 	bic.w	r3, r3, #3
 80066e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a27      	ldr	r2, [pc, #156]	; (80067a4 <TIM_OC3_SetConfig+0xfc>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_OC3_SetConfig+0x6a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <TIM_OC3_SetConfig+0x100>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d10d      	bne.n	800672e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	4313      	orrs	r3, r2
 8006724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800672c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a1c      	ldr	r2, [pc, #112]	; (80067a4 <TIM_OC3_SetConfig+0xfc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_OC3_SetConfig+0xae>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a1b      	ldr	r2, [pc, #108]	; (80067a8 <TIM_OC3_SetConfig+0x100>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_OC3_SetConfig+0xae>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a1a      	ldr	r2, [pc, #104]	; (80067ac <TIM_OC3_SetConfig+0x104>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_OC3_SetConfig+0xae>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a19      	ldr	r2, [pc, #100]	; (80067b0 <TIM_OC3_SetConfig+0x108>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_OC3_SetConfig+0xae>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <TIM_OC3_SetConfig+0x10c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d113      	bne.n	800677e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800675c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	621a      	str	r2, [r3, #32]
}
 8006798:	bf00      	nop
 800679a:	371c      	adds	r7, #28
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40013400 	.word	0x40013400
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40014400 	.word	0x40014400
 80067b4:	40014800 	.word	0x40014800

080067b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	031b      	lsls	r3, r3, #12
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a18      	ldr	r2, [pc, #96]	; (8006878 <TIM_OC4_SetConfig+0xc0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00f      	beq.n	800683c <TIM_OC4_SetConfig+0x84>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a17      	ldr	r2, [pc, #92]	; (800687c <TIM_OC4_SetConfig+0xc4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00b      	beq.n	800683c <TIM_OC4_SetConfig+0x84>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a16      	ldr	r2, [pc, #88]	; (8006880 <TIM_OC4_SetConfig+0xc8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_OC4_SetConfig+0x84>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <TIM_OC4_SetConfig+0xcc>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_OC4_SetConfig+0x84>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a14      	ldr	r2, [pc, #80]	; (8006888 <TIM_OC4_SetConfig+0xd0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d109      	bne.n	8006850 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006842:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	019b      	lsls	r3, r3, #6
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4313      	orrs	r3, r2
 800684e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	621a      	str	r2, [r3, #32]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40013400 	.word	0x40013400
 8006880:	40014000 	.word	0x40014000
 8006884:	40014400 	.word	0x40014400
 8006888:	40014800 	.word	0x40014800

0800688c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	041b      	lsls	r3, r3, #16
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a17      	ldr	r2, [pc, #92]	; (8006940 <TIM_OC5_SetConfig+0xb4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00f      	beq.n	8006906 <TIM_OC5_SetConfig+0x7a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a16      	ldr	r2, [pc, #88]	; (8006944 <TIM_OC5_SetConfig+0xb8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00b      	beq.n	8006906 <TIM_OC5_SetConfig+0x7a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a15      	ldr	r2, [pc, #84]	; (8006948 <TIM_OC5_SetConfig+0xbc>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d007      	beq.n	8006906 <TIM_OC5_SetConfig+0x7a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a14      	ldr	r2, [pc, #80]	; (800694c <TIM_OC5_SetConfig+0xc0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d003      	beq.n	8006906 <TIM_OC5_SetConfig+0x7a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a13      	ldr	r2, [pc, #76]	; (8006950 <TIM_OC5_SetConfig+0xc4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d109      	bne.n	800691a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	621a      	str	r2, [r3, #32]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40013400 	.word	0x40013400
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800699a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	051b      	lsls	r3, r3, #20
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a18      	ldr	r2, [pc, #96]	; (8006a0c <TIM_OC6_SetConfig+0xb8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00f      	beq.n	80069d0 <TIM_OC6_SetConfig+0x7c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a17      	ldr	r2, [pc, #92]	; (8006a10 <TIM_OC6_SetConfig+0xbc>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00b      	beq.n	80069d0 <TIM_OC6_SetConfig+0x7c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <TIM_OC6_SetConfig+0xc0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d007      	beq.n	80069d0 <TIM_OC6_SetConfig+0x7c>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a15      	ldr	r2, [pc, #84]	; (8006a18 <TIM_OC6_SetConfig+0xc4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_OC6_SetConfig+0x7c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a14      	ldr	r2, [pc, #80]	; (8006a1c <TIM_OC6_SetConfig+0xc8>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d109      	bne.n	80069e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	695b      	ldr	r3, [r3, #20]
 80069dc:	029b      	lsls	r3, r3, #10
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40012c00 	.word	0x40012c00
 8006a10:	40013400 	.word	0x40013400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800

08006a20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f023 0201 	bic.w	r2, r3, #1
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a1b      	ldr	r3, [r3, #32]
 8006a44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a26      	ldr	r2, [pc, #152]	; (8006ae4 <TIM_TI1_SetConfig+0xc4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d017      	beq.n	8006a7e <TIM_TI1_SetConfig+0x5e>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a54:	d013      	beq.n	8006a7e <TIM_TI1_SetConfig+0x5e>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a23      	ldr	r2, [pc, #140]	; (8006ae8 <TIM_TI1_SetConfig+0xc8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00f      	beq.n	8006a7e <TIM_TI1_SetConfig+0x5e>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a22      	ldr	r2, [pc, #136]	; (8006aec <TIM_TI1_SetConfig+0xcc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d00b      	beq.n	8006a7e <TIM_TI1_SetConfig+0x5e>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a21      	ldr	r2, [pc, #132]	; (8006af0 <TIM_TI1_SetConfig+0xd0>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d007      	beq.n	8006a7e <TIM_TI1_SetConfig+0x5e>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4a20      	ldr	r2, [pc, #128]	; (8006af4 <TIM_TI1_SetConfig+0xd4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d003      	beq.n	8006a7e <TIM_TI1_SetConfig+0x5e>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4a1f      	ldr	r2, [pc, #124]	; (8006af8 <TIM_TI1_SetConfig+0xd8>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d101      	bne.n	8006a82 <TIM_TI1_SetConfig+0x62>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <TIM_TI1_SetConfig+0x64>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e003      	b.n	8006aa2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f023 030a 	bic.w	r3, r3, #10
 8006abc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f003 030a 	and.w	r3, r3, #10
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	621a      	str	r2, [r3, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40013400 	.word	0x40013400
 8006af8:	40014000 	.word	0x40014000

08006afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	f023 0201 	bic.w	r2, r3, #1
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f023 030a 	bic.w	r3, r3, #10
 8006b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b087      	sub	sp, #28
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f023 0210 	bic.w	r2, r3, #16
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	031b      	lsls	r3, r3, #12
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	621a      	str	r2, [r3, #32]
}
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	f023 0210 	bic.w	r2, r3, #16
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	031b      	lsls	r3, r3, #12
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	621a      	str	r2, [r3, #32]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	011b      	lsls	r3, r3, #4
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c84:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	621a      	str	r2, [r3, #32]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	021b      	lsls	r3, r3, #8
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	031b      	lsls	r3, r3, #12
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	031b      	lsls	r3, r3, #12
 8006d04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f043 0307 	orr.w	r3, r3, #7
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	021a      	lsls	r2, r3, #8
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	609a      	str	r2, [r3, #8]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	2201      	movs	r2, #1
 8006db0:	fa02 f303 	lsl.w	r3, r2, r3
 8006db4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1a      	ldr	r2, [r3, #32]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a1a      	ldr	r2, [r3, #32]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e068      	b.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a2e      	ldr	r2, [pc, #184]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d004      	beq.n	8006e34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a2d      	ldr	r2, [pc, #180]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d108      	bne.n	8006e46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1e      	ldr	r2, [pc, #120]	; (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d01d      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e72:	d018      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a1b      	ldr	r2, [pc, #108]	; (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a1a      	ldr	r2, [pc, #104]	; (8006eec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00e      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a18      	ldr	r2, [pc, #96]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d009      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a13      	ldr	r2, [pc, #76]	; (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d004      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a14      	ldr	r2, [pc, #80]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40013400 	.word	0x40013400
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40000800 	.word	0x40000800
 8006ef0:	40000c00 	.word	0x40000c00
 8006ef4:	40014000 	.word	0x40014000

08006ef8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d101      	bne.n	8006f14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f10:	2302      	movs	r3, #2
 8006f12:	e065      	b.n	8006fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	041b      	lsls	r3, r3, #16
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a16      	ldr	r2, [pc, #88]	; (8006fec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d004      	beq.n	8006fa2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d115      	bne.n	8006fce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	051b      	lsls	r3, r3, #20
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	69db      	ldr	r3, [r3, #28]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	40012c00 	.word	0x40012c00
 8006ff0:	40013400 	.word	0x40013400

08006ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e040      	b.n	8007088 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fb fece 	bl	8002db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2224      	movs	r2, #36	; 0x24
 8007020:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f82c 	bl	8007090 <UART_SetConfig>
 8007038:	4603      	mov	r3, r0
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e022      	b.n	8007088 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 faaa 	bl	80075a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800705e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800706e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fb31 	bl	80076e8 <UART_CheckIdleState>
 8007086:	4603      	mov	r3, r0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007090:	b5b0      	push	{r4, r5, r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4bad      	ldr	r3, [pc, #692]	; (8007370 <UART_SetConfig+0x2e0>)
 80070bc:	4013      	ands	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6812      	ldr	r2, [r2, #0]
 80070c2:	69f9      	ldr	r1, [r7, #28]
 80070c4:	430b      	orrs	r3, r1
 80070c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4aa2      	ldr	r2, [pc, #648]	; (8007374 <UART_SetConfig+0x2e4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d004      	beq.n	80070f8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69fa      	ldr	r2, [r7, #28]
 8007108:	430a      	orrs	r2, r1
 800710a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a99      	ldr	r2, [pc, #612]	; (8007378 <UART_SetConfig+0x2e8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d121      	bne.n	800715a <UART_SetConfig+0xca>
 8007116:	4b99      	ldr	r3, [pc, #612]	; (800737c <UART_SetConfig+0x2ec>)
 8007118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	2b03      	cmp	r3, #3
 8007122:	d817      	bhi.n	8007154 <UART_SetConfig+0xc4>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <UART_SetConfig+0x9c>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	0800713d 	.word	0x0800713d
 8007130:	08007149 	.word	0x08007149
 8007134:	08007143 	.word	0x08007143
 8007138:	0800714f 	.word	0x0800714f
 800713c:	2301      	movs	r3, #1
 800713e:	76fb      	strb	r3, [r7, #27]
 8007140:	e0e7      	b.n	8007312 <UART_SetConfig+0x282>
 8007142:	2302      	movs	r3, #2
 8007144:	76fb      	strb	r3, [r7, #27]
 8007146:	e0e4      	b.n	8007312 <UART_SetConfig+0x282>
 8007148:	2304      	movs	r3, #4
 800714a:	76fb      	strb	r3, [r7, #27]
 800714c:	e0e1      	b.n	8007312 <UART_SetConfig+0x282>
 800714e:	2308      	movs	r3, #8
 8007150:	76fb      	strb	r3, [r7, #27]
 8007152:	e0de      	b.n	8007312 <UART_SetConfig+0x282>
 8007154:	2310      	movs	r3, #16
 8007156:	76fb      	strb	r3, [r7, #27]
 8007158:	e0db      	b.n	8007312 <UART_SetConfig+0x282>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a88      	ldr	r2, [pc, #544]	; (8007380 <UART_SetConfig+0x2f0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d132      	bne.n	80071ca <UART_SetConfig+0x13a>
 8007164:	4b85      	ldr	r3, [pc, #532]	; (800737c <UART_SetConfig+0x2ec>)
 8007166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716a:	f003 030c 	and.w	r3, r3, #12
 800716e:	2b0c      	cmp	r3, #12
 8007170:	d828      	bhi.n	80071c4 <UART_SetConfig+0x134>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <UART_SetConfig+0xe8>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	080071ad 	.word	0x080071ad
 800717c:	080071c5 	.word	0x080071c5
 8007180:	080071c5 	.word	0x080071c5
 8007184:	080071c5 	.word	0x080071c5
 8007188:	080071b9 	.word	0x080071b9
 800718c:	080071c5 	.word	0x080071c5
 8007190:	080071c5 	.word	0x080071c5
 8007194:	080071c5 	.word	0x080071c5
 8007198:	080071b3 	.word	0x080071b3
 800719c:	080071c5 	.word	0x080071c5
 80071a0:	080071c5 	.word	0x080071c5
 80071a4:	080071c5 	.word	0x080071c5
 80071a8:	080071bf 	.word	0x080071bf
 80071ac:	2300      	movs	r3, #0
 80071ae:	76fb      	strb	r3, [r7, #27]
 80071b0:	e0af      	b.n	8007312 <UART_SetConfig+0x282>
 80071b2:	2302      	movs	r3, #2
 80071b4:	76fb      	strb	r3, [r7, #27]
 80071b6:	e0ac      	b.n	8007312 <UART_SetConfig+0x282>
 80071b8:	2304      	movs	r3, #4
 80071ba:	76fb      	strb	r3, [r7, #27]
 80071bc:	e0a9      	b.n	8007312 <UART_SetConfig+0x282>
 80071be:	2308      	movs	r3, #8
 80071c0:	76fb      	strb	r3, [r7, #27]
 80071c2:	e0a6      	b.n	8007312 <UART_SetConfig+0x282>
 80071c4:	2310      	movs	r3, #16
 80071c6:	76fb      	strb	r3, [r7, #27]
 80071c8:	e0a3      	b.n	8007312 <UART_SetConfig+0x282>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a6d      	ldr	r2, [pc, #436]	; (8007384 <UART_SetConfig+0x2f4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d120      	bne.n	8007216 <UART_SetConfig+0x186>
 80071d4:	4b69      	ldr	r3, [pc, #420]	; (800737c <UART_SetConfig+0x2ec>)
 80071d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071de:	2b30      	cmp	r3, #48	; 0x30
 80071e0:	d013      	beq.n	800720a <UART_SetConfig+0x17a>
 80071e2:	2b30      	cmp	r3, #48	; 0x30
 80071e4:	d814      	bhi.n	8007210 <UART_SetConfig+0x180>
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d009      	beq.n	80071fe <UART_SetConfig+0x16e>
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	d810      	bhi.n	8007210 <UART_SetConfig+0x180>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <UART_SetConfig+0x168>
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d006      	beq.n	8007204 <UART_SetConfig+0x174>
 80071f6:	e00b      	b.n	8007210 <UART_SetConfig+0x180>
 80071f8:	2300      	movs	r3, #0
 80071fa:	76fb      	strb	r3, [r7, #27]
 80071fc:	e089      	b.n	8007312 <UART_SetConfig+0x282>
 80071fe:	2302      	movs	r3, #2
 8007200:	76fb      	strb	r3, [r7, #27]
 8007202:	e086      	b.n	8007312 <UART_SetConfig+0x282>
 8007204:	2304      	movs	r3, #4
 8007206:	76fb      	strb	r3, [r7, #27]
 8007208:	e083      	b.n	8007312 <UART_SetConfig+0x282>
 800720a:	2308      	movs	r3, #8
 800720c:	76fb      	strb	r3, [r7, #27]
 800720e:	e080      	b.n	8007312 <UART_SetConfig+0x282>
 8007210:	2310      	movs	r3, #16
 8007212:	76fb      	strb	r3, [r7, #27]
 8007214:	e07d      	b.n	8007312 <UART_SetConfig+0x282>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a5b      	ldr	r2, [pc, #364]	; (8007388 <UART_SetConfig+0x2f8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d120      	bne.n	8007262 <UART_SetConfig+0x1d2>
 8007220:	4b56      	ldr	r3, [pc, #344]	; (800737c <UART_SetConfig+0x2ec>)
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007226:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800722a:	2bc0      	cmp	r3, #192	; 0xc0
 800722c:	d013      	beq.n	8007256 <UART_SetConfig+0x1c6>
 800722e:	2bc0      	cmp	r3, #192	; 0xc0
 8007230:	d814      	bhi.n	800725c <UART_SetConfig+0x1cc>
 8007232:	2b80      	cmp	r3, #128	; 0x80
 8007234:	d009      	beq.n	800724a <UART_SetConfig+0x1ba>
 8007236:	2b80      	cmp	r3, #128	; 0x80
 8007238:	d810      	bhi.n	800725c <UART_SetConfig+0x1cc>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <UART_SetConfig+0x1b4>
 800723e:	2b40      	cmp	r3, #64	; 0x40
 8007240:	d006      	beq.n	8007250 <UART_SetConfig+0x1c0>
 8007242:	e00b      	b.n	800725c <UART_SetConfig+0x1cc>
 8007244:	2300      	movs	r3, #0
 8007246:	76fb      	strb	r3, [r7, #27]
 8007248:	e063      	b.n	8007312 <UART_SetConfig+0x282>
 800724a:	2302      	movs	r3, #2
 800724c:	76fb      	strb	r3, [r7, #27]
 800724e:	e060      	b.n	8007312 <UART_SetConfig+0x282>
 8007250:	2304      	movs	r3, #4
 8007252:	76fb      	strb	r3, [r7, #27]
 8007254:	e05d      	b.n	8007312 <UART_SetConfig+0x282>
 8007256:	2308      	movs	r3, #8
 8007258:	76fb      	strb	r3, [r7, #27]
 800725a:	e05a      	b.n	8007312 <UART_SetConfig+0x282>
 800725c:	2310      	movs	r3, #16
 800725e:	76fb      	strb	r3, [r7, #27]
 8007260:	e057      	b.n	8007312 <UART_SetConfig+0x282>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a49      	ldr	r2, [pc, #292]	; (800738c <UART_SetConfig+0x2fc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d125      	bne.n	80072b8 <UART_SetConfig+0x228>
 800726c:	4b43      	ldr	r3, [pc, #268]	; (800737c <UART_SetConfig+0x2ec>)
 800726e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800727a:	d017      	beq.n	80072ac <UART_SetConfig+0x21c>
 800727c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007280:	d817      	bhi.n	80072b2 <UART_SetConfig+0x222>
 8007282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007286:	d00b      	beq.n	80072a0 <UART_SetConfig+0x210>
 8007288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728c:	d811      	bhi.n	80072b2 <UART_SetConfig+0x222>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <UART_SetConfig+0x20a>
 8007292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007296:	d006      	beq.n	80072a6 <UART_SetConfig+0x216>
 8007298:	e00b      	b.n	80072b2 <UART_SetConfig+0x222>
 800729a:	2300      	movs	r3, #0
 800729c:	76fb      	strb	r3, [r7, #27]
 800729e:	e038      	b.n	8007312 <UART_SetConfig+0x282>
 80072a0:	2302      	movs	r3, #2
 80072a2:	76fb      	strb	r3, [r7, #27]
 80072a4:	e035      	b.n	8007312 <UART_SetConfig+0x282>
 80072a6:	2304      	movs	r3, #4
 80072a8:	76fb      	strb	r3, [r7, #27]
 80072aa:	e032      	b.n	8007312 <UART_SetConfig+0x282>
 80072ac:	2308      	movs	r3, #8
 80072ae:	76fb      	strb	r3, [r7, #27]
 80072b0:	e02f      	b.n	8007312 <UART_SetConfig+0x282>
 80072b2:	2310      	movs	r3, #16
 80072b4:	76fb      	strb	r3, [r7, #27]
 80072b6:	e02c      	b.n	8007312 <UART_SetConfig+0x282>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a2d      	ldr	r2, [pc, #180]	; (8007374 <UART_SetConfig+0x2e4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d125      	bne.n	800730e <UART_SetConfig+0x27e>
 80072c2:	4b2e      	ldr	r3, [pc, #184]	; (800737c <UART_SetConfig+0x2ec>)
 80072c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072d0:	d017      	beq.n	8007302 <UART_SetConfig+0x272>
 80072d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072d6:	d817      	bhi.n	8007308 <UART_SetConfig+0x278>
 80072d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072dc:	d00b      	beq.n	80072f6 <UART_SetConfig+0x266>
 80072de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e2:	d811      	bhi.n	8007308 <UART_SetConfig+0x278>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <UART_SetConfig+0x260>
 80072e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072ec:	d006      	beq.n	80072fc <UART_SetConfig+0x26c>
 80072ee:	e00b      	b.n	8007308 <UART_SetConfig+0x278>
 80072f0:	2300      	movs	r3, #0
 80072f2:	76fb      	strb	r3, [r7, #27]
 80072f4:	e00d      	b.n	8007312 <UART_SetConfig+0x282>
 80072f6:	2302      	movs	r3, #2
 80072f8:	76fb      	strb	r3, [r7, #27]
 80072fa:	e00a      	b.n	8007312 <UART_SetConfig+0x282>
 80072fc:	2304      	movs	r3, #4
 80072fe:	76fb      	strb	r3, [r7, #27]
 8007300:	e007      	b.n	8007312 <UART_SetConfig+0x282>
 8007302:	2308      	movs	r3, #8
 8007304:	76fb      	strb	r3, [r7, #27]
 8007306:	e004      	b.n	8007312 <UART_SetConfig+0x282>
 8007308:	2310      	movs	r3, #16
 800730a:	76fb      	strb	r3, [r7, #27]
 800730c:	e001      	b.n	8007312 <UART_SetConfig+0x282>
 800730e:	2310      	movs	r3, #16
 8007310:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a17      	ldr	r2, [pc, #92]	; (8007374 <UART_SetConfig+0x2e4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	f040 8087 	bne.w	800742c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800731e:	7efb      	ldrb	r3, [r7, #27]
 8007320:	2b08      	cmp	r3, #8
 8007322:	d837      	bhi.n	8007394 <UART_SetConfig+0x304>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x29c>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	08007351 	.word	0x08007351
 8007330:	08007395 	.word	0x08007395
 8007334:	08007359 	.word	0x08007359
 8007338:	08007395 	.word	0x08007395
 800733c:	0800735f 	.word	0x0800735f
 8007340:	08007395 	.word	0x08007395
 8007344:	08007395 	.word	0x08007395
 8007348:	08007395 	.word	0x08007395
 800734c:	08007367 	.word	0x08007367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007350:	f7fd fe0e 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8007354:	6178      	str	r0, [r7, #20]
        break;
 8007356:	e022      	b.n	800739e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007358:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <UART_SetConfig+0x300>)
 800735a:	617b      	str	r3, [r7, #20]
        break;
 800735c:	e01f      	b.n	800739e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735e:	f7fd fd6f 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8007362:	6178      	str	r0, [r7, #20]
        break;
 8007364:	e01b      	b.n	800739e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736a:	617b      	str	r3, [r7, #20]
        break;
 800736c:	e017      	b.n	800739e <UART_SetConfig+0x30e>
 800736e:	bf00      	nop
 8007370:	efff69f3 	.word	0xefff69f3
 8007374:	40008000 	.word	0x40008000
 8007378:	40013800 	.word	0x40013800
 800737c:	40021000 	.word	0x40021000
 8007380:	40004400 	.word	0x40004400
 8007384:	40004800 	.word	0x40004800
 8007388:	40004c00 	.word	0x40004c00
 800738c:	40005000 	.word	0x40005000
 8007390:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	76bb      	strb	r3, [r7, #26]
        break;
 800739c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80f1 	beq.w	8007588 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	4613      	mov	r3, r2
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	4413      	add	r3, r2
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d305      	bcc.n	80073c2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d902      	bls.n	80073c8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	76bb      	strb	r3, [r7, #26]
 80073c6:	e0df      	b.n	8007588 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f04f 0100 	mov.w	r1, #0
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	020b      	lsls	r3, r1, #8
 80073da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073de:	0202      	lsls	r2, r0, #8
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	6849      	ldr	r1, [r1, #4]
 80073e4:	0849      	lsrs	r1, r1, #1
 80073e6:	4608      	mov	r0, r1
 80073e8:	f04f 0100 	mov.w	r1, #0
 80073ec:	1814      	adds	r4, r2, r0
 80073ee:	eb43 0501 	adc.w	r5, r3, r1
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	4620      	mov	r0, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	f7f9 fc22 	bl	8000c48 <__aeabi_uldivmod>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4613      	mov	r3, r2
 800740a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007412:	d308      	bcc.n	8007426 <UART_SetConfig+0x396>
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741a:	d204      	bcs.n	8007426 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	60da      	str	r2, [r3, #12]
 8007424:	e0b0      	b.n	8007588 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	76bb      	strb	r3, [r7, #26]
 800742a:	e0ad      	b.n	8007588 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007434:	d15b      	bne.n	80074ee <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007436:	7efb      	ldrb	r3, [r7, #27]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d828      	bhi.n	800748e <UART_SetConfig+0x3fe>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x3b4>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007469 	.word	0x08007469
 8007448:	08007471 	.word	0x08007471
 800744c:	08007479 	.word	0x08007479
 8007450:	0800748f 	.word	0x0800748f
 8007454:	0800747f 	.word	0x0800747f
 8007458:	0800748f 	.word	0x0800748f
 800745c:	0800748f 	.word	0x0800748f
 8007460:	0800748f 	.word	0x0800748f
 8007464:	08007487 	.word	0x08007487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007468:	f7fd fd82 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 800746c:	6178      	str	r0, [r7, #20]
        break;
 800746e:	e013      	b.n	8007498 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007470:	f7fd fd94 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 8007474:	6178      	str	r0, [r7, #20]
        break;
 8007476:	e00f      	b.n	8007498 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007478:	4b49      	ldr	r3, [pc, #292]	; (80075a0 <UART_SetConfig+0x510>)
 800747a:	617b      	str	r3, [r7, #20]
        break;
 800747c:	e00c      	b.n	8007498 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800747e:	f7fd fcdf 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 8007482:	6178      	str	r0, [r7, #20]
        break;
 8007484:	e008      	b.n	8007498 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748a:	617b      	str	r3, [r7, #20]
        break;
 800748c:	e004      	b.n	8007498 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	76bb      	strb	r3, [r7, #26]
        break;
 8007496:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d074      	beq.n	8007588 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	005a      	lsls	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	441a      	add	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2b0f      	cmp	r3, #15
 80074b8:	d916      	bls.n	80074e8 <UART_SetConfig+0x458>
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c0:	d212      	bcs.n	80074e8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	f023 030f 	bic.w	r3, r3, #15
 80074ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	085b      	lsrs	r3, r3, #1
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	89fb      	ldrh	r3, [r7, #14]
 80074da:	4313      	orrs	r3, r2
 80074dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	89fa      	ldrh	r2, [r7, #14]
 80074e4:	60da      	str	r2, [r3, #12]
 80074e6:	e04f      	b.n	8007588 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	76bb      	strb	r3, [r7, #26]
 80074ec:	e04c      	b.n	8007588 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ee:	7efb      	ldrb	r3, [r7, #27]
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d828      	bhi.n	8007546 <UART_SetConfig+0x4b6>
 80074f4:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x46c>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007529 	.word	0x08007529
 8007504:	08007531 	.word	0x08007531
 8007508:	08007547 	.word	0x08007547
 800750c:	08007537 	.word	0x08007537
 8007510:	08007547 	.word	0x08007547
 8007514:	08007547 	.word	0x08007547
 8007518:	08007547 	.word	0x08007547
 800751c:	0800753f 	.word	0x0800753f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007520:	f7fd fd26 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8007524:	6178      	str	r0, [r7, #20]
        break;
 8007526:	e013      	b.n	8007550 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fd fd38 	bl	8004f9c <HAL_RCC_GetPCLK2Freq>
 800752c:	6178      	str	r0, [r7, #20]
        break;
 800752e:	e00f      	b.n	8007550 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007530:	4b1b      	ldr	r3, [pc, #108]	; (80075a0 <UART_SetConfig+0x510>)
 8007532:	617b      	str	r3, [r7, #20]
        break;
 8007534:	e00c      	b.n	8007550 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007536:	f7fd fc83 	bl	8004e40 <HAL_RCC_GetSysClockFreq>
 800753a:	6178      	str	r0, [r7, #20]
        break;
 800753c:	e008      	b.n	8007550 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007542:	617b      	str	r3, [r7, #20]
        break;
 8007544:	e004      	b.n	8007550 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	76bb      	strb	r3, [r7, #26]
        break;
 800754e:	bf00      	nop
    }

    if (pclk != 0U)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d018      	beq.n	8007588 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	085a      	lsrs	r2, r3, #1
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	441a      	add	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	fbb2 f3f3 	udiv	r3, r2, r3
 8007568:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b0f      	cmp	r3, #15
 800756e:	d909      	bls.n	8007584 <UART_SetConfig+0x4f4>
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007576:	d205      	bcs.n	8007584 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	b29a      	uxth	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	e001      	b.n	8007588 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007594:	7ebb      	ldrb	r3, [r7, #26]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3720      	adds	r7, #32
 800759a:	46bd      	mov	sp, r7
 800759c:	bdb0      	pop	{r4, r5, r7, pc}
 800759e:	bf00      	nop
 80075a0:	00f42400 	.word	0x00f42400

080075a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01a      	beq.n	80076ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076a2:	d10a      	bne.n	80076ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	605a      	str	r2, [r3, #4]
  }
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076f8:	f7fb fd78 	bl	80031ec <HAL_GetTick>
 80076fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b08      	cmp	r3, #8
 800770a:	d10e      	bne.n	800772a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800770c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f82d 	bl	800777a <UART_WaitOnFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e023      	b.n	8007772 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b04      	cmp	r3, #4
 8007736:	d10e      	bne.n	8007756 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f817 	bl	800777a <UART_WaitOnFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e00d      	b.n	8007772 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2220      	movs	r2, #32
 8007760:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b09c      	sub	sp, #112	; 0x70
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	603b      	str	r3, [r7, #0]
 8007786:	4613      	mov	r3, r2
 8007788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800778a:	e0a5      	b.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800778c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007792:	f000 80a1 	beq.w	80078d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007796:	f7fb fd29 	bl	80031ec <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d302      	bcc.n	80077ac <UART_WaitOnFlagUntilTimeout+0x32>
 80077a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d13e      	bne.n	800782a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b4:	e853 3f00 	ldrex	r3, [r3]
 80077b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077c0:	667b      	str	r3, [r7, #100]	; 0x64
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e6      	bne.n	80077ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3308      	adds	r3, #8
 80077e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	f023 0301 	bic.w	r3, r3, #1
 80077f4:	663b      	str	r3, [r7, #96]	; 0x60
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8007800:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800780c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e5      	bne.n	80077de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2220      	movs	r2, #32
 8007816:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e067      	b.n	80078fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0304 	and.w	r3, r3, #4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d04f      	beq.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007846:	d147      	bne.n	80078d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007850:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	461a      	mov	r2, r3
 800786e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007870:	637b      	str	r3, [r7, #52]	; 0x34
 8007872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e6      	bne.n	8007852 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	613b      	str	r3, [r7, #16]
   return(result);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	66bb      	str	r3, [r7, #104]	; 0x68
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078a4:	623a      	str	r2, [r7, #32]
 80078a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	69f9      	ldr	r1, [r7, #28]
 80078aa:	6a3a      	ldr	r2, [r7, #32]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e5      	bne.n	8007884 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e010      	b.n	80078fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	69da      	ldr	r2, [r3, #28]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	4013      	ands	r3, r2
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	bf0c      	ite	eq
 80078e8:	2301      	moveq	r3, #1
 80078ea:	2300      	movne	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	461a      	mov	r2, r3
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	f43f af4a 	beq.w	800778c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3770      	adds	r7, #112	; 0x70
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <__errno>:
 8007904:	4b01      	ldr	r3, [pc, #4]	; (800790c <__errno+0x8>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	2000000c 	.word	0x2000000c

08007910 <__libc_init_array>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4d0d      	ldr	r5, [pc, #52]	; (8007948 <__libc_init_array+0x38>)
 8007914:	4c0d      	ldr	r4, [pc, #52]	; (800794c <__libc_init_array+0x3c>)
 8007916:	1b64      	subs	r4, r4, r5
 8007918:	10a4      	asrs	r4, r4, #2
 800791a:	2600      	movs	r6, #0
 800791c:	42a6      	cmp	r6, r4
 800791e:	d109      	bne.n	8007934 <__libc_init_array+0x24>
 8007920:	4d0b      	ldr	r5, [pc, #44]	; (8007950 <__libc_init_array+0x40>)
 8007922:	4c0c      	ldr	r4, [pc, #48]	; (8007954 <__libc_init_array+0x44>)
 8007924:	f003 f83c 	bl	800a9a0 <_init>
 8007928:	1b64      	subs	r4, r4, r5
 800792a:	10a4      	asrs	r4, r4, #2
 800792c:	2600      	movs	r6, #0
 800792e:	42a6      	cmp	r6, r4
 8007930:	d105      	bne.n	800793e <__libc_init_array+0x2e>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	f855 3b04 	ldr.w	r3, [r5], #4
 8007938:	4798      	blx	r3
 800793a:	3601      	adds	r6, #1
 800793c:	e7ee      	b.n	800791c <__libc_init_array+0xc>
 800793e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007942:	4798      	blx	r3
 8007944:	3601      	adds	r6, #1
 8007946:	e7f2      	b.n	800792e <__libc_init_array+0x1e>
 8007948:	0800adec 	.word	0x0800adec
 800794c:	0800adec 	.word	0x0800adec
 8007950:	0800adec 	.word	0x0800adec
 8007954:	0800adf0 	.word	0x0800adf0

08007958 <memcpy>:
 8007958:	440a      	add	r2, r1
 800795a:	4291      	cmp	r1, r2
 800795c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007960:	d100      	bne.n	8007964 <memcpy+0xc>
 8007962:	4770      	bx	lr
 8007964:	b510      	push	{r4, lr}
 8007966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800796e:	4291      	cmp	r1, r2
 8007970:	d1f9      	bne.n	8007966 <memcpy+0xe>
 8007972:	bd10      	pop	{r4, pc}

08007974 <memset>:
 8007974:	4402      	add	r2, r0
 8007976:	4603      	mov	r3, r0
 8007978:	4293      	cmp	r3, r2
 800797a:	d100      	bne.n	800797e <memset+0xa>
 800797c:	4770      	bx	lr
 800797e:	f803 1b01 	strb.w	r1, [r3], #1
 8007982:	e7f9      	b.n	8007978 <memset+0x4>

08007984 <__cvt>:
 8007984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007988:	ec55 4b10 	vmov	r4, r5, d0
 800798c:	2d00      	cmp	r5, #0
 800798e:	460e      	mov	r6, r1
 8007990:	4619      	mov	r1, r3
 8007992:	462b      	mov	r3, r5
 8007994:	bfbb      	ittet	lt
 8007996:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800799a:	461d      	movlt	r5, r3
 800799c:	2300      	movge	r3, #0
 800799e:	232d      	movlt	r3, #45	; 0x2d
 80079a0:	700b      	strb	r3, [r1, #0]
 80079a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079a8:	4691      	mov	r9, r2
 80079aa:	f023 0820 	bic.w	r8, r3, #32
 80079ae:	bfbc      	itt	lt
 80079b0:	4622      	movlt	r2, r4
 80079b2:	4614      	movlt	r4, r2
 80079b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079b8:	d005      	beq.n	80079c6 <__cvt+0x42>
 80079ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079be:	d100      	bne.n	80079c2 <__cvt+0x3e>
 80079c0:	3601      	adds	r6, #1
 80079c2:	2102      	movs	r1, #2
 80079c4:	e000      	b.n	80079c8 <__cvt+0x44>
 80079c6:	2103      	movs	r1, #3
 80079c8:	ab03      	add	r3, sp, #12
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	ab02      	add	r3, sp, #8
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	ec45 4b10 	vmov	d0, r4, r5
 80079d4:	4653      	mov	r3, sl
 80079d6:	4632      	mov	r2, r6
 80079d8:	f000 fcca 	bl	8008370 <_dtoa_r>
 80079dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079e0:	4607      	mov	r7, r0
 80079e2:	d102      	bne.n	80079ea <__cvt+0x66>
 80079e4:	f019 0f01 	tst.w	r9, #1
 80079e8:	d022      	beq.n	8007a30 <__cvt+0xac>
 80079ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079ee:	eb07 0906 	add.w	r9, r7, r6
 80079f2:	d110      	bne.n	8007a16 <__cvt+0x92>
 80079f4:	783b      	ldrb	r3, [r7, #0]
 80079f6:	2b30      	cmp	r3, #48	; 0x30
 80079f8:	d10a      	bne.n	8007a10 <__cvt+0x8c>
 80079fa:	2200      	movs	r2, #0
 80079fc:	2300      	movs	r3, #0
 80079fe:	4620      	mov	r0, r4
 8007a00:	4629      	mov	r1, r5
 8007a02:	f7f9 f861 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a06:	b918      	cbnz	r0, 8007a10 <__cvt+0x8c>
 8007a08:	f1c6 0601 	rsb	r6, r6, #1
 8007a0c:	f8ca 6000 	str.w	r6, [sl]
 8007a10:	f8da 3000 	ldr.w	r3, [sl]
 8007a14:	4499      	add	r9, r3
 8007a16:	2200      	movs	r2, #0
 8007a18:	2300      	movs	r3, #0
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7f9 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a22:	b108      	cbz	r0, 8007a28 <__cvt+0xa4>
 8007a24:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a28:	2230      	movs	r2, #48	; 0x30
 8007a2a:	9b03      	ldr	r3, [sp, #12]
 8007a2c:	454b      	cmp	r3, r9
 8007a2e:	d307      	bcc.n	8007a40 <__cvt+0xbc>
 8007a30:	9b03      	ldr	r3, [sp, #12]
 8007a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a34:	1bdb      	subs	r3, r3, r7
 8007a36:	4638      	mov	r0, r7
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	b004      	add	sp, #16
 8007a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a40:	1c59      	adds	r1, r3, #1
 8007a42:	9103      	str	r1, [sp, #12]
 8007a44:	701a      	strb	r2, [r3, #0]
 8007a46:	e7f0      	b.n	8007a2a <__cvt+0xa6>

08007a48 <__exponent>:
 8007a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	bfb8      	it	lt
 8007a50:	4249      	neglt	r1, r1
 8007a52:	f803 2b02 	strb.w	r2, [r3], #2
 8007a56:	bfb4      	ite	lt
 8007a58:	222d      	movlt	r2, #45	; 0x2d
 8007a5a:	222b      	movge	r2, #43	; 0x2b
 8007a5c:	2909      	cmp	r1, #9
 8007a5e:	7042      	strb	r2, [r0, #1]
 8007a60:	dd2a      	ble.n	8007ab8 <__exponent+0x70>
 8007a62:	f10d 0407 	add.w	r4, sp, #7
 8007a66:	46a4      	mov	ip, r4
 8007a68:	270a      	movs	r7, #10
 8007a6a:	46a6      	mov	lr, r4
 8007a6c:	460a      	mov	r2, r1
 8007a6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a72:	fb07 1516 	mls	r5, r7, r6, r1
 8007a76:	3530      	adds	r5, #48	; 0x30
 8007a78:	2a63      	cmp	r2, #99	; 0x63
 8007a7a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007a7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a82:	4631      	mov	r1, r6
 8007a84:	dcf1      	bgt.n	8007a6a <__exponent+0x22>
 8007a86:	3130      	adds	r1, #48	; 0x30
 8007a88:	f1ae 0502 	sub.w	r5, lr, #2
 8007a8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a90:	1c44      	adds	r4, r0, #1
 8007a92:	4629      	mov	r1, r5
 8007a94:	4561      	cmp	r1, ip
 8007a96:	d30a      	bcc.n	8007aae <__exponent+0x66>
 8007a98:	f10d 0209 	add.w	r2, sp, #9
 8007a9c:	eba2 020e 	sub.w	r2, r2, lr
 8007aa0:	4565      	cmp	r5, ip
 8007aa2:	bf88      	it	hi
 8007aa4:	2200      	movhi	r2, #0
 8007aa6:	4413      	add	r3, r2
 8007aa8:	1a18      	subs	r0, r3, r0
 8007aaa:	b003      	add	sp, #12
 8007aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ab2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ab6:	e7ed      	b.n	8007a94 <__exponent+0x4c>
 8007ab8:	2330      	movs	r3, #48	; 0x30
 8007aba:	3130      	adds	r1, #48	; 0x30
 8007abc:	7083      	strb	r3, [r0, #2]
 8007abe:	70c1      	strb	r1, [r0, #3]
 8007ac0:	1d03      	adds	r3, r0, #4
 8007ac2:	e7f1      	b.n	8007aa8 <__exponent+0x60>

08007ac4 <_printf_float>:
 8007ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	ed2d 8b02 	vpush	{d8}
 8007acc:	b08d      	sub	sp, #52	; 0x34
 8007ace:	460c      	mov	r4, r1
 8007ad0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	4605      	mov	r5, r0
 8007ada:	f001 fa35 	bl	8008f48 <_localeconv_r>
 8007ade:	f8d0 a000 	ldr.w	sl, [r0]
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	f7f8 fb74 	bl	80001d0 <strlen>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	930a      	str	r3, [sp, #40]	; 0x28
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	9305      	str	r3, [sp, #20]
 8007af0:	f8d8 3000 	ldr.w	r3, [r8]
 8007af4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007af8:	3307      	adds	r3, #7
 8007afa:	f023 0307 	bic.w	r3, r3, #7
 8007afe:	f103 0208 	add.w	r2, r3, #8
 8007b02:	f8c8 2000 	str.w	r2, [r8]
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b16:	9307      	str	r3, [sp, #28]
 8007b18:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b1c:	ee08 0a10 	vmov	s16, r0
 8007b20:	4b9f      	ldr	r3, [pc, #636]	; (8007da0 <_printf_float+0x2dc>)
 8007b22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b2a:	f7f8 ffff 	bl	8000b2c <__aeabi_dcmpun>
 8007b2e:	bb88      	cbnz	r0, 8007b94 <_printf_float+0xd0>
 8007b30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b34:	4b9a      	ldr	r3, [pc, #616]	; (8007da0 <_printf_float+0x2dc>)
 8007b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b3a:	f7f8 ffd9 	bl	8000af0 <__aeabi_dcmple>
 8007b3e:	bb48      	cbnz	r0, 8007b94 <_printf_float+0xd0>
 8007b40:	2200      	movs	r2, #0
 8007b42:	2300      	movs	r3, #0
 8007b44:	4640      	mov	r0, r8
 8007b46:	4649      	mov	r1, r9
 8007b48:	f7f8 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8007b4c:	b110      	cbz	r0, 8007b54 <_printf_float+0x90>
 8007b4e:	232d      	movs	r3, #45	; 0x2d
 8007b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b54:	4b93      	ldr	r3, [pc, #588]	; (8007da4 <_printf_float+0x2e0>)
 8007b56:	4894      	ldr	r0, [pc, #592]	; (8007da8 <_printf_float+0x2e4>)
 8007b58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b5c:	bf94      	ite	ls
 8007b5e:	4698      	movls	r8, r3
 8007b60:	4680      	movhi	r8, r0
 8007b62:	2303      	movs	r3, #3
 8007b64:	6123      	str	r3, [r4, #16]
 8007b66:	9b05      	ldr	r3, [sp, #20]
 8007b68:	f023 0204 	bic.w	r2, r3, #4
 8007b6c:	6022      	str	r2, [r4, #0]
 8007b6e:	f04f 0900 	mov.w	r9, #0
 8007b72:	9700      	str	r7, [sp, #0]
 8007b74:	4633      	mov	r3, r6
 8007b76:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f000 f9d8 	bl	8007f30 <_printf_common>
 8007b80:	3001      	adds	r0, #1
 8007b82:	f040 8090 	bne.w	8007ca6 <_printf_float+0x1e2>
 8007b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b8a:	b00d      	add	sp, #52	; 0x34
 8007b8c:	ecbd 8b02 	vpop	{d8}
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	4642      	mov	r2, r8
 8007b96:	464b      	mov	r3, r9
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	f7f8 ffc6 	bl	8000b2c <__aeabi_dcmpun>
 8007ba0:	b140      	cbz	r0, 8007bb4 <_printf_float+0xf0>
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bfbc      	itt	lt
 8007ba8:	232d      	movlt	r3, #45	; 0x2d
 8007baa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bae:	487f      	ldr	r0, [pc, #508]	; (8007dac <_printf_float+0x2e8>)
 8007bb0:	4b7f      	ldr	r3, [pc, #508]	; (8007db0 <_printf_float+0x2ec>)
 8007bb2:	e7d1      	b.n	8007b58 <_printf_float+0x94>
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007bba:	9206      	str	r2, [sp, #24]
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	d13f      	bne.n	8007c40 <_printf_float+0x17c>
 8007bc0:	2306      	movs	r3, #6
 8007bc2:	6063      	str	r3, [r4, #4]
 8007bc4:	9b05      	ldr	r3, [sp, #20]
 8007bc6:	6861      	ldr	r1, [r4, #4]
 8007bc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bcc:	2300      	movs	r3, #0
 8007bce:	9303      	str	r3, [sp, #12]
 8007bd0:	ab0a      	add	r3, sp, #40	; 0x28
 8007bd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007bd6:	ab09      	add	r3, sp, #36	; 0x24
 8007bd8:	ec49 8b10 	vmov	d0, r8, r9
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	6022      	str	r2, [r4, #0]
 8007be0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007be4:	4628      	mov	r0, r5
 8007be6:	f7ff fecd 	bl	8007984 <__cvt>
 8007bea:	9b06      	ldr	r3, [sp, #24]
 8007bec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bee:	2b47      	cmp	r3, #71	; 0x47
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	d108      	bne.n	8007c06 <_printf_float+0x142>
 8007bf4:	1cc8      	adds	r0, r1, #3
 8007bf6:	db02      	blt.n	8007bfe <_printf_float+0x13a>
 8007bf8:	6863      	ldr	r3, [r4, #4]
 8007bfa:	4299      	cmp	r1, r3
 8007bfc:	dd41      	ble.n	8007c82 <_printf_float+0x1be>
 8007bfe:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c02:	fa5f fb8b 	uxtb.w	fp, fp
 8007c06:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c0a:	d820      	bhi.n	8007c4e <_printf_float+0x18a>
 8007c0c:	3901      	subs	r1, #1
 8007c0e:	465a      	mov	r2, fp
 8007c10:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c14:	9109      	str	r1, [sp, #36]	; 0x24
 8007c16:	f7ff ff17 	bl	8007a48 <__exponent>
 8007c1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c1c:	1813      	adds	r3, r2, r0
 8007c1e:	2a01      	cmp	r2, #1
 8007c20:	4681      	mov	r9, r0
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	dc02      	bgt.n	8007c2c <_printf_float+0x168>
 8007c26:	6822      	ldr	r2, [r4, #0]
 8007c28:	07d2      	lsls	r2, r2, #31
 8007c2a:	d501      	bpl.n	8007c30 <_printf_float+0x16c>
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	6123      	str	r3, [r4, #16]
 8007c30:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d09c      	beq.n	8007b72 <_printf_float+0xae>
 8007c38:	232d      	movs	r3, #45	; 0x2d
 8007c3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c3e:	e798      	b.n	8007b72 <_printf_float+0xae>
 8007c40:	9a06      	ldr	r2, [sp, #24]
 8007c42:	2a47      	cmp	r2, #71	; 0x47
 8007c44:	d1be      	bne.n	8007bc4 <_printf_float+0x100>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1bc      	bne.n	8007bc4 <_printf_float+0x100>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e7b9      	b.n	8007bc2 <_printf_float+0xfe>
 8007c4e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c52:	d118      	bne.n	8007c86 <_printf_float+0x1c2>
 8007c54:	2900      	cmp	r1, #0
 8007c56:	6863      	ldr	r3, [r4, #4]
 8007c58:	dd0b      	ble.n	8007c72 <_printf_float+0x1ae>
 8007c5a:	6121      	str	r1, [r4, #16]
 8007c5c:	b913      	cbnz	r3, 8007c64 <_printf_float+0x1a0>
 8007c5e:	6822      	ldr	r2, [r4, #0]
 8007c60:	07d0      	lsls	r0, r2, #31
 8007c62:	d502      	bpl.n	8007c6a <_printf_float+0x1a6>
 8007c64:	3301      	adds	r3, #1
 8007c66:	440b      	add	r3, r1
 8007c68:	6123      	str	r3, [r4, #16]
 8007c6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c6c:	f04f 0900 	mov.w	r9, #0
 8007c70:	e7de      	b.n	8007c30 <_printf_float+0x16c>
 8007c72:	b913      	cbnz	r3, 8007c7a <_printf_float+0x1b6>
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	07d2      	lsls	r2, r2, #31
 8007c78:	d501      	bpl.n	8007c7e <_printf_float+0x1ba>
 8007c7a:	3302      	adds	r3, #2
 8007c7c:	e7f4      	b.n	8007c68 <_printf_float+0x1a4>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e7f2      	b.n	8007c68 <_printf_float+0x1a4>
 8007c82:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c88:	4299      	cmp	r1, r3
 8007c8a:	db05      	blt.n	8007c98 <_printf_float+0x1d4>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	6121      	str	r1, [r4, #16]
 8007c90:	07d8      	lsls	r0, r3, #31
 8007c92:	d5ea      	bpl.n	8007c6a <_printf_float+0x1a6>
 8007c94:	1c4b      	adds	r3, r1, #1
 8007c96:	e7e7      	b.n	8007c68 <_printf_float+0x1a4>
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	bfd4      	ite	le
 8007c9c:	f1c1 0202 	rsble	r2, r1, #2
 8007ca0:	2201      	movgt	r2, #1
 8007ca2:	4413      	add	r3, r2
 8007ca4:	e7e0      	b.n	8007c68 <_printf_float+0x1a4>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	055a      	lsls	r2, r3, #21
 8007caa:	d407      	bmi.n	8007cbc <_printf_float+0x1f8>
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	4642      	mov	r2, r8
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b8      	blx	r7
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d12c      	bne.n	8007d14 <_printf_float+0x250>
 8007cba:	e764      	b.n	8007b86 <_printf_float+0xc2>
 8007cbc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cc0:	f240 80e0 	bls.w	8007e84 <_printf_float+0x3c0>
 8007cc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f7f8 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d034      	beq.n	8007d3e <_printf_float+0x27a>
 8007cd4:	4a37      	ldr	r2, [pc, #220]	; (8007db4 <_printf_float+0x2f0>)
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f af51 	beq.w	8007b86 <_printf_float+0xc2>
 8007ce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	db02      	blt.n	8007cf2 <_printf_float+0x22e>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	07d8      	lsls	r0, r3, #31
 8007cf0:	d510      	bpl.n	8007d14 <_printf_float+0x250>
 8007cf2:	ee18 3a10 	vmov	r3, s16
 8007cf6:	4652      	mov	r2, sl
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b8      	blx	r7
 8007cfe:	3001      	adds	r0, #1
 8007d00:	f43f af41 	beq.w	8007b86 <_printf_float+0xc2>
 8007d04:	f04f 0800 	mov.w	r8, #0
 8007d08:	f104 091a 	add.w	r9, r4, #26
 8007d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	4543      	cmp	r3, r8
 8007d12:	dc09      	bgt.n	8007d28 <_printf_float+0x264>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	079b      	lsls	r3, r3, #30
 8007d18:	f100 8105 	bmi.w	8007f26 <_printf_float+0x462>
 8007d1c:	68e0      	ldr	r0, [r4, #12]
 8007d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d20:	4298      	cmp	r0, r3
 8007d22:	bfb8      	it	lt
 8007d24:	4618      	movlt	r0, r3
 8007d26:	e730      	b.n	8007b8a <_printf_float+0xc6>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	464a      	mov	r2, r9
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b8      	blx	r7
 8007d32:	3001      	adds	r0, #1
 8007d34:	f43f af27 	beq.w	8007b86 <_printf_float+0xc2>
 8007d38:	f108 0801 	add.w	r8, r8, #1
 8007d3c:	e7e6      	b.n	8007d0c <_printf_float+0x248>
 8007d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	dc39      	bgt.n	8007db8 <_printf_float+0x2f4>
 8007d44:	4a1b      	ldr	r2, [pc, #108]	; (8007db4 <_printf_float+0x2f0>)
 8007d46:	2301      	movs	r3, #1
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	47b8      	blx	r7
 8007d4e:	3001      	adds	r0, #1
 8007d50:	f43f af19 	beq.w	8007b86 <_printf_float+0xc2>
 8007d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	d102      	bne.n	8007d62 <_printf_float+0x29e>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	07d9      	lsls	r1, r3, #31
 8007d60:	d5d8      	bpl.n	8007d14 <_printf_float+0x250>
 8007d62:	ee18 3a10 	vmov	r3, s16
 8007d66:	4652      	mov	r2, sl
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	47b8      	blx	r7
 8007d6e:	3001      	adds	r0, #1
 8007d70:	f43f af09 	beq.w	8007b86 <_printf_float+0xc2>
 8007d74:	f04f 0900 	mov.w	r9, #0
 8007d78:	f104 0a1a 	add.w	sl, r4, #26
 8007d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7e:	425b      	negs	r3, r3
 8007d80:	454b      	cmp	r3, r9
 8007d82:	dc01      	bgt.n	8007d88 <_printf_float+0x2c4>
 8007d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d86:	e792      	b.n	8007cae <_printf_float+0x1ea>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4652      	mov	r2, sl
 8007d8c:	4631      	mov	r1, r6
 8007d8e:	4628      	mov	r0, r5
 8007d90:	47b8      	blx	r7
 8007d92:	3001      	adds	r0, #1
 8007d94:	f43f aef7 	beq.w	8007b86 <_printf_float+0xc2>
 8007d98:	f109 0901 	add.w	r9, r9, #1
 8007d9c:	e7ee      	b.n	8007d7c <_printf_float+0x2b8>
 8007d9e:	bf00      	nop
 8007da0:	7fefffff 	.word	0x7fefffff
 8007da4:	0800aa04 	.word	0x0800aa04
 8007da8:	0800aa08 	.word	0x0800aa08
 8007dac:	0800aa10 	.word	0x0800aa10
 8007db0:	0800aa0c 	.word	0x0800aa0c
 8007db4:	0800aa14 	.word	0x0800aa14
 8007db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	bfa8      	it	ge
 8007dc0:	461a      	movge	r2, r3
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	4691      	mov	r9, r2
 8007dc6:	dc37      	bgt.n	8007e38 <_printf_float+0x374>
 8007dc8:	f04f 0b00 	mov.w	fp, #0
 8007dcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dd0:	f104 021a 	add.w	r2, r4, #26
 8007dd4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dd6:	9305      	str	r3, [sp, #20]
 8007dd8:	eba3 0309 	sub.w	r3, r3, r9
 8007ddc:	455b      	cmp	r3, fp
 8007dde:	dc33      	bgt.n	8007e48 <_printf_float+0x384>
 8007de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007de4:	429a      	cmp	r2, r3
 8007de6:	db3b      	blt.n	8007e60 <_printf_float+0x39c>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	07da      	lsls	r2, r3, #31
 8007dec:	d438      	bmi.n	8007e60 <_printf_float+0x39c>
 8007dee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007df0:	9b05      	ldr	r3, [sp, #20]
 8007df2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	eba2 0901 	sub.w	r9, r2, r1
 8007dfa:	4599      	cmp	r9, r3
 8007dfc:	bfa8      	it	ge
 8007dfe:	4699      	movge	r9, r3
 8007e00:	f1b9 0f00 	cmp.w	r9, #0
 8007e04:	dc35      	bgt.n	8007e72 <_printf_float+0x3ae>
 8007e06:	f04f 0800 	mov.w	r8, #0
 8007e0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e0e:	f104 0a1a 	add.w	sl, r4, #26
 8007e12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	eba3 0309 	sub.w	r3, r3, r9
 8007e1c:	4543      	cmp	r3, r8
 8007e1e:	f77f af79 	ble.w	8007d14 <_printf_float+0x250>
 8007e22:	2301      	movs	r3, #1
 8007e24:	4652      	mov	r2, sl
 8007e26:	4631      	mov	r1, r6
 8007e28:	4628      	mov	r0, r5
 8007e2a:	47b8      	blx	r7
 8007e2c:	3001      	adds	r0, #1
 8007e2e:	f43f aeaa 	beq.w	8007b86 <_printf_float+0xc2>
 8007e32:	f108 0801 	add.w	r8, r8, #1
 8007e36:	e7ec      	b.n	8007e12 <_printf_float+0x34e>
 8007e38:	4613      	mov	r3, r2
 8007e3a:	4631      	mov	r1, r6
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	4628      	mov	r0, r5
 8007e40:	47b8      	blx	r7
 8007e42:	3001      	adds	r0, #1
 8007e44:	d1c0      	bne.n	8007dc8 <_printf_float+0x304>
 8007e46:	e69e      	b.n	8007b86 <_printf_float+0xc2>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4631      	mov	r1, r6
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	9205      	str	r2, [sp, #20]
 8007e50:	47b8      	blx	r7
 8007e52:	3001      	adds	r0, #1
 8007e54:	f43f ae97 	beq.w	8007b86 <_printf_float+0xc2>
 8007e58:	9a05      	ldr	r2, [sp, #20]
 8007e5a:	f10b 0b01 	add.w	fp, fp, #1
 8007e5e:	e7b9      	b.n	8007dd4 <_printf_float+0x310>
 8007e60:	ee18 3a10 	vmov	r3, s16
 8007e64:	4652      	mov	r2, sl
 8007e66:	4631      	mov	r1, r6
 8007e68:	4628      	mov	r0, r5
 8007e6a:	47b8      	blx	r7
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d1be      	bne.n	8007dee <_printf_float+0x32a>
 8007e70:	e689      	b.n	8007b86 <_printf_float+0xc2>
 8007e72:	9a05      	ldr	r2, [sp, #20]
 8007e74:	464b      	mov	r3, r9
 8007e76:	4442      	add	r2, r8
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d1c1      	bne.n	8007e06 <_printf_float+0x342>
 8007e82:	e680      	b.n	8007b86 <_printf_float+0xc2>
 8007e84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e86:	2a01      	cmp	r2, #1
 8007e88:	dc01      	bgt.n	8007e8e <_printf_float+0x3ca>
 8007e8a:	07db      	lsls	r3, r3, #31
 8007e8c:	d538      	bpl.n	8007f00 <_printf_float+0x43c>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4642      	mov	r2, r8
 8007e92:	4631      	mov	r1, r6
 8007e94:	4628      	mov	r0, r5
 8007e96:	47b8      	blx	r7
 8007e98:	3001      	adds	r0, #1
 8007e9a:	f43f ae74 	beq.w	8007b86 <_printf_float+0xc2>
 8007e9e:	ee18 3a10 	vmov	r3, s16
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	47b8      	blx	r7
 8007eaa:	3001      	adds	r0, #1
 8007eac:	f43f ae6b 	beq.w	8007b86 <_printf_float+0xc2>
 8007eb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f7f8 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ebc:	b9d8      	cbnz	r0, 8007ef6 <_printf_float+0x432>
 8007ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec0:	f108 0201 	add.w	r2, r8, #1
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b8      	blx	r7
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d10e      	bne.n	8007eee <_printf_float+0x42a>
 8007ed0:	e659      	b.n	8007b86 <_printf_float+0xc2>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4652      	mov	r2, sl
 8007ed6:	4631      	mov	r1, r6
 8007ed8:	4628      	mov	r0, r5
 8007eda:	47b8      	blx	r7
 8007edc:	3001      	adds	r0, #1
 8007ede:	f43f ae52 	beq.w	8007b86 <_printf_float+0xc2>
 8007ee2:	f108 0801 	add.w	r8, r8, #1
 8007ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	4543      	cmp	r3, r8
 8007eec:	dcf1      	bgt.n	8007ed2 <_printf_float+0x40e>
 8007eee:	464b      	mov	r3, r9
 8007ef0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ef4:	e6dc      	b.n	8007cb0 <_printf_float+0x1ec>
 8007ef6:	f04f 0800 	mov.w	r8, #0
 8007efa:	f104 0a1a 	add.w	sl, r4, #26
 8007efe:	e7f2      	b.n	8007ee6 <_printf_float+0x422>
 8007f00:	2301      	movs	r3, #1
 8007f02:	4642      	mov	r2, r8
 8007f04:	e7df      	b.n	8007ec6 <_printf_float+0x402>
 8007f06:	2301      	movs	r3, #1
 8007f08:	464a      	mov	r2, r9
 8007f0a:	4631      	mov	r1, r6
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b8      	blx	r7
 8007f10:	3001      	adds	r0, #1
 8007f12:	f43f ae38 	beq.w	8007b86 <_printf_float+0xc2>
 8007f16:	f108 0801 	add.w	r8, r8, #1
 8007f1a:	68e3      	ldr	r3, [r4, #12]
 8007f1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f1e:	1a5b      	subs	r3, r3, r1
 8007f20:	4543      	cmp	r3, r8
 8007f22:	dcf0      	bgt.n	8007f06 <_printf_float+0x442>
 8007f24:	e6fa      	b.n	8007d1c <_printf_float+0x258>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	f104 0919 	add.w	r9, r4, #25
 8007f2e:	e7f4      	b.n	8007f1a <_printf_float+0x456>

08007f30 <_printf_common>:
 8007f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f34:	4616      	mov	r6, r2
 8007f36:	4699      	mov	r9, r3
 8007f38:	688a      	ldr	r2, [r1, #8]
 8007f3a:	690b      	ldr	r3, [r1, #16]
 8007f3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	bfb8      	it	lt
 8007f44:	4613      	movlt	r3, r2
 8007f46:	6033      	str	r3, [r6, #0]
 8007f48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f4c:	4607      	mov	r7, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b10a      	cbz	r2, 8007f56 <_printf_common+0x26>
 8007f52:	3301      	adds	r3, #1
 8007f54:	6033      	str	r3, [r6, #0]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	0699      	lsls	r1, r3, #26
 8007f5a:	bf42      	ittt	mi
 8007f5c:	6833      	ldrmi	r3, [r6, #0]
 8007f5e:	3302      	addmi	r3, #2
 8007f60:	6033      	strmi	r3, [r6, #0]
 8007f62:	6825      	ldr	r5, [r4, #0]
 8007f64:	f015 0506 	ands.w	r5, r5, #6
 8007f68:	d106      	bne.n	8007f78 <_printf_common+0x48>
 8007f6a:	f104 0a19 	add.w	sl, r4, #25
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	6832      	ldr	r2, [r6, #0]
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	42ab      	cmp	r3, r5
 8007f76:	dc26      	bgt.n	8007fc6 <_printf_common+0x96>
 8007f78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f7c:	1e13      	subs	r3, r2, #0
 8007f7e:	6822      	ldr	r2, [r4, #0]
 8007f80:	bf18      	it	ne
 8007f82:	2301      	movne	r3, #1
 8007f84:	0692      	lsls	r2, r2, #26
 8007f86:	d42b      	bmi.n	8007fe0 <_printf_common+0xb0>
 8007f88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	4638      	mov	r0, r7
 8007f90:	47c0      	blx	r8
 8007f92:	3001      	adds	r0, #1
 8007f94:	d01e      	beq.n	8007fd4 <_printf_common+0xa4>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	68e5      	ldr	r5, [r4, #12]
 8007f9a:	6832      	ldr	r2, [r6, #0]
 8007f9c:	f003 0306 	and.w	r3, r3, #6
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	bf08      	it	eq
 8007fa4:	1aad      	subeq	r5, r5, r2
 8007fa6:	68a3      	ldr	r3, [r4, #8]
 8007fa8:	6922      	ldr	r2, [r4, #16]
 8007faa:	bf0c      	ite	eq
 8007fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fb0:	2500      	movne	r5, #0
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bfc4      	itt	gt
 8007fb6:	1a9b      	subgt	r3, r3, r2
 8007fb8:	18ed      	addgt	r5, r5, r3
 8007fba:	2600      	movs	r6, #0
 8007fbc:	341a      	adds	r4, #26
 8007fbe:	42b5      	cmp	r5, r6
 8007fc0:	d11a      	bne.n	8007ff8 <_printf_common+0xc8>
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	e008      	b.n	8007fd8 <_printf_common+0xa8>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4652      	mov	r2, sl
 8007fca:	4649      	mov	r1, r9
 8007fcc:	4638      	mov	r0, r7
 8007fce:	47c0      	blx	r8
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d103      	bne.n	8007fdc <_printf_common+0xac>
 8007fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fdc:	3501      	adds	r5, #1
 8007fde:	e7c6      	b.n	8007f6e <_printf_common+0x3e>
 8007fe0:	18e1      	adds	r1, r4, r3
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	2030      	movs	r0, #48	; 0x30
 8007fe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fea:	4422      	add	r2, r4
 8007fec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ff0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	e7c7      	b.n	8007f88 <_printf_common+0x58>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	4638      	mov	r0, r7
 8008000:	47c0      	blx	r8
 8008002:	3001      	adds	r0, #1
 8008004:	d0e6      	beq.n	8007fd4 <_printf_common+0xa4>
 8008006:	3601      	adds	r6, #1
 8008008:	e7d9      	b.n	8007fbe <_printf_common+0x8e>
	...

0800800c <_printf_i>:
 800800c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	460c      	mov	r4, r1
 8008012:	4691      	mov	r9, r2
 8008014:	7e27      	ldrb	r7, [r4, #24]
 8008016:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008018:	2f78      	cmp	r7, #120	; 0x78
 800801a:	4680      	mov	r8, r0
 800801c:	469a      	mov	sl, r3
 800801e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008022:	d807      	bhi.n	8008034 <_printf_i+0x28>
 8008024:	2f62      	cmp	r7, #98	; 0x62
 8008026:	d80a      	bhi.n	800803e <_printf_i+0x32>
 8008028:	2f00      	cmp	r7, #0
 800802a:	f000 80d8 	beq.w	80081de <_printf_i+0x1d2>
 800802e:	2f58      	cmp	r7, #88	; 0x58
 8008030:	f000 80a3 	beq.w	800817a <_printf_i+0x16e>
 8008034:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008038:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800803c:	e03a      	b.n	80080b4 <_printf_i+0xa8>
 800803e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008042:	2b15      	cmp	r3, #21
 8008044:	d8f6      	bhi.n	8008034 <_printf_i+0x28>
 8008046:	a001      	add	r0, pc, #4	; (adr r0, 800804c <_printf_i+0x40>)
 8008048:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800804c:	080080a5 	.word	0x080080a5
 8008050:	080080b9 	.word	0x080080b9
 8008054:	08008035 	.word	0x08008035
 8008058:	08008035 	.word	0x08008035
 800805c:	08008035 	.word	0x08008035
 8008060:	08008035 	.word	0x08008035
 8008064:	080080b9 	.word	0x080080b9
 8008068:	08008035 	.word	0x08008035
 800806c:	08008035 	.word	0x08008035
 8008070:	08008035 	.word	0x08008035
 8008074:	08008035 	.word	0x08008035
 8008078:	080081c5 	.word	0x080081c5
 800807c:	080080e9 	.word	0x080080e9
 8008080:	080081a7 	.word	0x080081a7
 8008084:	08008035 	.word	0x08008035
 8008088:	08008035 	.word	0x08008035
 800808c:	080081e7 	.word	0x080081e7
 8008090:	08008035 	.word	0x08008035
 8008094:	080080e9 	.word	0x080080e9
 8008098:	08008035 	.word	0x08008035
 800809c:	08008035 	.word	0x08008035
 80080a0:	080081af 	.word	0x080081af
 80080a4:	680b      	ldr	r3, [r1, #0]
 80080a6:	1d1a      	adds	r2, r3, #4
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	600a      	str	r2, [r1, #0]
 80080ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080b4:	2301      	movs	r3, #1
 80080b6:	e0a3      	b.n	8008200 <_printf_i+0x1f4>
 80080b8:	6825      	ldr	r5, [r4, #0]
 80080ba:	6808      	ldr	r0, [r1, #0]
 80080bc:	062e      	lsls	r6, r5, #24
 80080be:	f100 0304 	add.w	r3, r0, #4
 80080c2:	d50a      	bpl.n	80080da <_printf_i+0xce>
 80080c4:	6805      	ldr	r5, [r0, #0]
 80080c6:	600b      	str	r3, [r1, #0]
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	da03      	bge.n	80080d4 <_printf_i+0xc8>
 80080cc:	232d      	movs	r3, #45	; 0x2d
 80080ce:	426d      	negs	r5, r5
 80080d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d4:	485e      	ldr	r0, [pc, #376]	; (8008250 <_printf_i+0x244>)
 80080d6:	230a      	movs	r3, #10
 80080d8:	e019      	b.n	800810e <_printf_i+0x102>
 80080da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80080de:	6805      	ldr	r5, [r0, #0]
 80080e0:	600b      	str	r3, [r1, #0]
 80080e2:	bf18      	it	ne
 80080e4:	b22d      	sxthne	r5, r5
 80080e6:	e7ef      	b.n	80080c8 <_printf_i+0xbc>
 80080e8:	680b      	ldr	r3, [r1, #0]
 80080ea:	6825      	ldr	r5, [r4, #0]
 80080ec:	1d18      	adds	r0, r3, #4
 80080ee:	6008      	str	r0, [r1, #0]
 80080f0:	0628      	lsls	r0, r5, #24
 80080f2:	d501      	bpl.n	80080f8 <_printf_i+0xec>
 80080f4:	681d      	ldr	r5, [r3, #0]
 80080f6:	e002      	b.n	80080fe <_printf_i+0xf2>
 80080f8:	0669      	lsls	r1, r5, #25
 80080fa:	d5fb      	bpl.n	80080f4 <_printf_i+0xe8>
 80080fc:	881d      	ldrh	r5, [r3, #0]
 80080fe:	4854      	ldr	r0, [pc, #336]	; (8008250 <_printf_i+0x244>)
 8008100:	2f6f      	cmp	r7, #111	; 0x6f
 8008102:	bf0c      	ite	eq
 8008104:	2308      	moveq	r3, #8
 8008106:	230a      	movne	r3, #10
 8008108:	2100      	movs	r1, #0
 800810a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800810e:	6866      	ldr	r6, [r4, #4]
 8008110:	60a6      	str	r6, [r4, #8]
 8008112:	2e00      	cmp	r6, #0
 8008114:	bfa2      	ittt	ge
 8008116:	6821      	ldrge	r1, [r4, #0]
 8008118:	f021 0104 	bicge.w	r1, r1, #4
 800811c:	6021      	strge	r1, [r4, #0]
 800811e:	b90d      	cbnz	r5, 8008124 <_printf_i+0x118>
 8008120:	2e00      	cmp	r6, #0
 8008122:	d04d      	beq.n	80081c0 <_printf_i+0x1b4>
 8008124:	4616      	mov	r6, r2
 8008126:	fbb5 f1f3 	udiv	r1, r5, r3
 800812a:	fb03 5711 	mls	r7, r3, r1, r5
 800812e:	5dc7      	ldrb	r7, [r0, r7]
 8008130:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008134:	462f      	mov	r7, r5
 8008136:	42bb      	cmp	r3, r7
 8008138:	460d      	mov	r5, r1
 800813a:	d9f4      	bls.n	8008126 <_printf_i+0x11a>
 800813c:	2b08      	cmp	r3, #8
 800813e:	d10b      	bne.n	8008158 <_printf_i+0x14c>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	07df      	lsls	r7, r3, #31
 8008144:	d508      	bpl.n	8008158 <_printf_i+0x14c>
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	6861      	ldr	r1, [r4, #4]
 800814a:	4299      	cmp	r1, r3
 800814c:	bfde      	ittt	le
 800814e:	2330      	movle	r3, #48	; 0x30
 8008150:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008154:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008158:	1b92      	subs	r2, r2, r6
 800815a:	6122      	str	r2, [r4, #16]
 800815c:	f8cd a000 	str.w	sl, [sp]
 8008160:	464b      	mov	r3, r9
 8008162:	aa03      	add	r2, sp, #12
 8008164:	4621      	mov	r1, r4
 8008166:	4640      	mov	r0, r8
 8008168:	f7ff fee2 	bl	8007f30 <_printf_common>
 800816c:	3001      	adds	r0, #1
 800816e:	d14c      	bne.n	800820a <_printf_i+0x1fe>
 8008170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008174:	b004      	add	sp, #16
 8008176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817a:	4835      	ldr	r0, [pc, #212]	; (8008250 <_printf_i+0x244>)
 800817c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	680e      	ldr	r6, [r1, #0]
 8008184:	061f      	lsls	r7, r3, #24
 8008186:	f856 5b04 	ldr.w	r5, [r6], #4
 800818a:	600e      	str	r6, [r1, #0]
 800818c:	d514      	bpl.n	80081b8 <_printf_i+0x1ac>
 800818e:	07d9      	lsls	r1, r3, #31
 8008190:	bf44      	itt	mi
 8008192:	f043 0320 	orrmi.w	r3, r3, #32
 8008196:	6023      	strmi	r3, [r4, #0]
 8008198:	b91d      	cbnz	r5, 80081a2 <_printf_i+0x196>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	f023 0320 	bic.w	r3, r3, #32
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	2310      	movs	r3, #16
 80081a4:	e7b0      	b.n	8008108 <_printf_i+0xfc>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	f043 0320 	orr.w	r3, r3, #32
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	2378      	movs	r3, #120	; 0x78
 80081b0:	4828      	ldr	r0, [pc, #160]	; (8008254 <_printf_i+0x248>)
 80081b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081b6:	e7e3      	b.n	8008180 <_printf_i+0x174>
 80081b8:	065e      	lsls	r6, r3, #25
 80081ba:	bf48      	it	mi
 80081bc:	b2ad      	uxthmi	r5, r5
 80081be:	e7e6      	b.n	800818e <_printf_i+0x182>
 80081c0:	4616      	mov	r6, r2
 80081c2:	e7bb      	b.n	800813c <_printf_i+0x130>
 80081c4:	680b      	ldr	r3, [r1, #0]
 80081c6:	6826      	ldr	r6, [r4, #0]
 80081c8:	6960      	ldr	r0, [r4, #20]
 80081ca:	1d1d      	adds	r5, r3, #4
 80081cc:	600d      	str	r5, [r1, #0]
 80081ce:	0635      	lsls	r5, r6, #24
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	d501      	bpl.n	80081d8 <_printf_i+0x1cc>
 80081d4:	6018      	str	r0, [r3, #0]
 80081d6:	e002      	b.n	80081de <_printf_i+0x1d2>
 80081d8:	0671      	lsls	r1, r6, #25
 80081da:	d5fb      	bpl.n	80081d4 <_printf_i+0x1c8>
 80081dc:	8018      	strh	r0, [r3, #0]
 80081de:	2300      	movs	r3, #0
 80081e0:	6123      	str	r3, [r4, #16]
 80081e2:	4616      	mov	r6, r2
 80081e4:	e7ba      	b.n	800815c <_printf_i+0x150>
 80081e6:	680b      	ldr	r3, [r1, #0]
 80081e8:	1d1a      	adds	r2, r3, #4
 80081ea:	600a      	str	r2, [r1, #0]
 80081ec:	681e      	ldr	r6, [r3, #0]
 80081ee:	6862      	ldr	r2, [r4, #4]
 80081f0:	2100      	movs	r1, #0
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7f7 fff4 	bl	80001e0 <memchr>
 80081f8:	b108      	cbz	r0, 80081fe <_printf_i+0x1f2>
 80081fa:	1b80      	subs	r0, r0, r6
 80081fc:	6060      	str	r0, [r4, #4]
 80081fe:	6863      	ldr	r3, [r4, #4]
 8008200:	6123      	str	r3, [r4, #16]
 8008202:	2300      	movs	r3, #0
 8008204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008208:	e7a8      	b.n	800815c <_printf_i+0x150>
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	4632      	mov	r2, r6
 800820e:	4649      	mov	r1, r9
 8008210:	4640      	mov	r0, r8
 8008212:	47d0      	blx	sl
 8008214:	3001      	adds	r0, #1
 8008216:	d0ab      	beq.n	8008170 <_printf_i+0x164>
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	079b      	lsls	r3, r3, #30
 800821c:	d413      	bmi.n	8008246 <_printf_i+0x23a>
 800821e:	68e0      	ldr	r0, [r4, #12]
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	4298      	cmp	r0, r3
 8008224:	bfb8      	it	lt
 8008226:	4618      	movlt	r0, r3
 8008228:	e7a4      	b.n	8008174 <_printf_i+0x168>
 800822a:	2301      	movs	r3, #1
 800822c:	4632      	mov	r2, r6
 800822e:	4649      	mov	r1, r9
 8008230:	4640      	mov	r0, r8
 8008232:	47d0      	blx	sl
 8008234:	3001      	adds	r0, #1
 8008236:	d09b      	beq.n	8008170 <_printf_i+0x164>
 8008238:	3501      	adds	r5, #1
 800823a:	68e3      	ldr	r3, [r4, #12]
 800823c:	9903      	ldr	r1, [sp, #12]
 800823e:	1a5b      	subs	r3, r3, r1
 8008240:	42ab      	cmp	r3, r5
 8008242:	dcf2      	bgt.n	800822a <_printf_i+0x21e>
 8008244:	e7eb      	b.n	800821e <_printf_i+0x212>
 8008246:	2500      	movs	r5, #0
 8008248:	f104 0619 	add.w	r6, r4, #25
 800824c:	e7f5      	b.n	800823a <_printf_i+0x22e>
 800824e:	bf00      	nop
 8008250:	0800aa16 	.word	0x0800aa16
 8008254:	0800aa27 	.word	0x0800aa27

08008258 <quorem>:
 8008258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825c:	6903      	ldr	r3, [r0, #16]
 800825e:	690c      	ldr	r4, [r1, #16]
 8008260:	42a3      	cmp	r3, r4
 8008262:	4607      	mov	r7, r0
 8008264:	f2c0 8081 	blt.w	800836a <quorem+0x112>
 8008268:	3c01      	subs	r4, #1
 800826a:	f101 0814 	add.w	r8, r1, #20
 800826e:	f100 0514 	add.w	r5, r0, #20
 8008272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800827c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008280:	3301      	adds	r3, #1
 8008282:	429a      	cmp	r2, r3
 8008284:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008288:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800828c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008290:	d331      	bcc.n	80082f6 <quorem+0x9e>
 8008292:	f04f 0e00 	mov.w	lr, #0
 8008296:	4640      	mov	r0, r8
 8008298:	46ac      	mov	ip, r5
 800829a:	46f2      	mov	sl, lr
 800829c:	f850 2b04 	ldr.w	r2, [r0], #4
 80082a0:	b293      	uxth	r3, r2
 80082a2:	fb06 e303 	mla	r3, r6, r3, lr
 80082a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	ebaa 0303 	sub.w	r3, sl, r3
 80082b0:	0c12      	lsrs	r2, r2, #16
 80082b2:	f8dc a000 	ldr.w	sl, [ip]
 80082b6:	fb06 e202 	mla	r2, r6, r2, lr
 80082ba:	fa13 f38a 	uxtah	r3, r3, sl
 80082be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082c2:	fa1f fa82 	uxth.w	sl, r2
 80082c6:	f8dc 2000 	ldr.w	r2, [ip]
 80082ca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80082ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d8:	4581      	cmp	r9, r0
 80082da:	f84c 3b04 	str.w	r3, [ip], #4
 80082de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082e2:	d2db      	bcs.n	800829c <quorem+0x44>
 80082e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80082e8:	b92b      	cbnz	r3, 80082f6 <quorem+0x9e>
 80082ea:	9b01      	ldr	r3, [sp, #4]
 80082ec:	3b04      	subs	r3, #4
 80082ee:	429d      	cmp	r5, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	d32e      	bcc.n	8008352 <quorem+0xfa>
 80082f4:	613c      	str	r4, [r7, #16]
 80082f6:	4638      	mov	r0, r7
 80082f8:	f001 f8b0 	bl	800945c <__mcmp>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	db24      	blt.n	800834a <quorem+0xf2>
 8008300:	3601      	adds	r6, #1
 8008302:	4628      	mov	r0, r5
 8008304:	f04f 0c00 	mov.w	ip, #0
 8008308:	f858 2b04 	ldr.w	r2, [r8], #4
 800830c:	f8d0 e000 	ldr.w	lr, [r0]
 8008310:	b293      	uxth	r3, r2
 8008312:	ebac 0303 	sub.w	r3, ip, r3
 8008316:	0c12      	lsrs	r2, r2, #16
 8008318:	fa13 f38e 	uxtah	r3, r3, lr
 800831c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008324:	b29b      	uxth	r3, r3
 8008326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800832a:	45c1      	cmp	r9, r8
 800832c:	f840 3b04 	str.w	r3, [r0], #4
 8008330:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008334:	d2e8      	bcs.n	8008308 <quorem+0xb0>
 8008336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800833a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800833e:	b922      	cbnz	r2, 800834a <quorem+0xf2>
 8008340:	3b04      	subs	r3, #4
 8008342:	429d      	cmp	r5, r3
 8008344:	461a      	mov	r2, r3
 8008346:	d30a      	bcc.n	800835e <quorem+0x106>
 8008348:	613c      	str	r4, [r7, #16]
 800834a:	4630      	mov	r0, r6
 800834c:	b003      	add	sp, #12
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	3b04      	subs	r3, #4
 8008356:	2a00      	cmp	r2, #0
 8008358:	d1cc      	bne.n	80082f4 <quorem+0x9c>
 800835a:	3c01      	subs	r4, #1
 800835c:	e7c7      	b.n	80082ee <quorem+0x96>
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	3b04      	subs	r3, #4
 8008362:	2a00      	cmp	r2, #0
 8008364:	d1f0      	bne.n	8008348 <quorem+0xf0>
 8008366:	3c01      	subs	r4, #1
 8008368:	e7eb      	b.n	8008342 <quorem+0xea>
 800836a:	2000      	movs	r0, #0
 800836c:	e7ee      	b.n	800834c <quorem+0xf4>
	...

08008370 <_dtoa_r>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	ed2d 8b02 	vpush	{d8}
 8008378:	ec57 6b10 	vmov	r6, r7, d0
 800837c:	b095      	sub	sp, #84	; 0x54
 800837e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008380:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800838a:	4604      	mov	r4, r0
 800838c:	9209      	str	r2, [sp, #36]	; 0x24
 800838e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008390:	b975      	cbnz	r5, 80083b0 <_dtoa_r+0x40>
 8008392:	2010      	movs	r0, #16
 8008394:	f000 fddc 	bl	8008f50 <malloc>
 8008398:	4602      	mov	r2, r0
 800839a:	6260      	str	r0, [r4, #36]	; 0x24
 800839c:	b920      	cbnz	r0, 80083a8 <_dtoa_r+0x38>
 800839e:	4bb2      	ldr	r3, [pc, #712]	; (8008668 <_dtoa_r+0x2f8>)
 80083a0:	21ea      	movs	r1, #234	; 0xea
 80083a2:	48b2      	ldr	r0, [pc, #712]	; (800866c <_dtoa_r+0x2fc>)
 80083a4:	f001 fa24 	bl	80097f0 <__assert_func>
 80083a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083ac:	6005      	str	r5, [r0, #0]
 80083ae:	60c5      	str	r5, [r0, #12]
 80083b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	b151      	cbz	r1, 80083cc <_dtoa_r+0x5c>
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	604a      	str	r2, [r1, #4]
 80083ba:	2301      	movs	r3, #1
 80083bc:	4093      	lsls	r3, r2
 80083be:	608b      	str	r3, [r1, #8]
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fe0d 	bl	8008fe0 <_Bfree>
 80083c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c8:	2200      	movs	r2, #0
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	1e3b      	subs	r3, r7, #0
 80083ce:	bfb9      	ittee	lt
 80083d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083d4:	9303      	strlt	r3, [sp, #12]
 80083d6:	2300      	movge	r3, #0
 80083d8:	f8c8 3000 	strge.w	r3, [r8]
 80083dc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80083e0:	4ba3      	ldr	r3, [pc, #652]	; (8008670 <_dtoa_r+0x300>)
 80083e2:	bfbc      	itt	lt
 80083e4:	2201      	movlt	r2, #1
 80083e6:	f8c8 2000 	strlt.w	r2, [r8]
 80083ea:	ea33 0309 	bics.w	r3, r3, r9
 80083ee:	d11b      	bne.n	8008428 <_dtoa_r+0xb8>
 80083f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083fc:	4333      	orrs	r3, r6
 80083fe:	f000 857a 	beq.w	8008ef6 <_dtoa_r+0xb86>
 8008402:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008404:	b963      	cbnz	r3, 8008420 <_dtoa_r+0xb0>
 8008406:	4b9b      	ldr	r3, [pc, #620]	; (8008674 <_dtoa_r+0x304>)
 8008408:	e024      	b.n	8008454 <_dtoa_r+0xe4>
 800840a:	4b9b      	ldr	r3, [pc, #620]	; (8008678 <_dtoa_r+0x308>)
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	9800      	ldr	r0, [sp, #0]
 8008416:	b015      	add	sp, #84	; 0x54
 8008418:	ecbd 8b02 	vpop	{d8}
 800841c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008420:	4b94      	ldr	r3, [pc, #592]	; (8008674 <_dtoa_r+0x304>)
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	3303      	adds	r3, #3
 8008426:	e7f3      	b.n	8008410 <_dtoa_r+0xa0>
 8008428:	ed9d 7b02 	vldr	d7, [sp, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	ec51 0b17 	vmov	r0, r1, d7
 8008432:	2300      	movs	r3, #0
 8008434:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008438:	f7f8 fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800843c:	4680      	mov	r8, r0
 800843e:	b158      	cbz	r0, 8008458 <_dtoa_r+0xe8>
 8008440:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008442:	2301      	movs	r3, #1
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8551 	beq.w	8008ef0 <_dtoa_r+0xb80>
 800844e:	488b      	ldr	r0, [pc, #556]	; (800867c <_dtoa_r+0x30c>)
 8008450:	6018      	str	r0, [r3, #0]
 8008452:	1e43      	subs	r3, r0, #1
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	e7dd      	b.n	8008414 <_dtoa_r+0xa4>
 8008458:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800845c:	aa12      	add	r2, sp, #72	; 0x48
 800845e:	a913      	add	r1, sp, #76	; 0x4c
 8008460:	4620      	mov	r0, r4
 8008462:	f001 f89f 	bl	80095a4 <__d2b>
 8008466:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800846a:	4683      	mov	fp, r0
 800846c:	2d00      	cmp	r5, #0
 800846e:	d07c      	beq.n	800856a <_dtoa_r+0x1fa>
 8008470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008472:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800847a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800847e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008482:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008486:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800848a:	4b7d      	ldr	r3, [pc, #500]	; (8008680 <_dtoa_r+0x310>)
 800848c:	2200      	movs	r2, #0
 800848e:	4630      	mov	r0, r6
 8008490:	4639      	mov	r1, r7
 8008492:	f7f7 fef9 	bl	8000288 <__aeabi_dsub>
 8008496:	a36e      	add	r3, pc, #440	; (adr r3, 8008650 <_dtoa_r+0x2e0>)
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f7f8 f8ac 	bl	80005f8 <__aeabi_dmul>
 80084a0:	a36d      	add	r3, pc, #436	; (adr r3, 8008658 <_dtoa_r+0x2e8>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f7 fef1 	bl	800028c <__adddf3>
 80084aa:	4606      	mov	r6, r0
 80084ac:	4628      	mov	r0, r5
 80084ae:	460f      	mov	r7, r1
 80084b0:	f7f8 f838 	bl	8000524 <__aeabi_i2d>
 80084b4:	a36a      	add	r3, pc, #424	; (adr r3, 8008660 <_dtoa_r+0x2f0>)
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	f7f8 f89d 	bl	80005f8 <__aeabi_dmul>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4630      	mov	r0, r6
 80084c4:	4639      	mov	r1, r7
 80084c6:	f7f7 fee1 	bl	800028c <__adddf3>
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	f7f8 fb43 	bl	8000b58 <__aeabi_d2iz>
 80084d2:	2200      	movs	r2, #0
 80084d4:	4682      	mov	sl, r0
 80084d6:	2300      	movs	r3, #0
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f8 fafe 	bl	8000adc <__aeabi_dcmplt>
 80084e0:	b148      	cbz	r0, 80084f6 <_dtoa_r+0x186>
 80084e2:	4650      	mov	r0, sl
 80084e4:	f7f8 f81e 	bl	8000524 <__aeabi_i2d>
 80084e8:	4632      	mov	r2, r6
 80084ea:	463b      	mov	r3, r7
 80084ec:	f7f8 faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80084f0:	b908      	cbnz	r0, 80084f6 <_dtoa_r+0x186>
 80084f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80084f6:	f1ba 0f16 	cmp.w	sl, #22
 80084fa:	d854      	bhi.n	80085a6 <_dtoa_r+0x236>
 80084fc:	4b61      	ldr	r3, [pc, #388]	; (8008684 <_dtoa_r+0x314>)
 80084fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800850a:	f7f8 fae7 	bl	8000adc <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	d04b      	beq.n	80085aa <_dtoa_r+0x23a>
 8008512:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008516:	2300      	movs	r3, #0
 8008518:	930e      	str	r3, [sp, #56]	; 0x38
 800851a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800851c:	1b5d      	subs	r5, r3, r5
 800851e:	1e6b      	subs	r3, r5, #1
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	bf43      	ittte	mi
 8008524:	2300      	movmi	r3, #0
 8008526:	f1c5 0801 	rsbmi	r8, r5, #1
 800852a:	9304      	strmi	r3, [sp, #16]
 800852c:	f04f 0800 	movpl.w	r8, #0
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	db3b      	blt.n	80085ae <_dtoa_r+0x23e>
 8008536:	9b04      	ldr	r3, [sp, #16]
 8008538:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800853c:	4453      	add	r3, sl
 800853e:	9304      	str	r3, [sp, #16]
 8008540:	2300      	movs	r3, #0
 8008542:	9306      	str	r3, [sp, #24]
 8008544:	9b05      	ldr	r3, [sp, #20]
 8008546:	2b09      	cmp	r3, #9
 8008548:	d869      	bhi.n	800861e <_dtoa_r+0x2ae>
 800854a:	2b05      	cmp	r3, #5
 800854c:	bfc4      	itt	gt
 800854e:	3b04      	subgt	r3, #4
 8008550:	9305      	strgt	r3, [sp, #20]
 8008552:	9b05      	ldr	r3, [sp, #20]
 8008554:	f1a3 0302 	sub.w	r3, r3, #2
 8008558:	bfcc      	ite	gt
 800855a:	2500      	movgt	r5, #0
 800855c:	2501      	movle	r5, #1
 800855e:	2b03      	cmp	r3, #3
 8008560:	d869      	bhi.n	8008636 <_dtoa_r+0x2c6>
 8008562:	e8df f003 	tbb	[pc, r3]
 8008566:	4e2c      	.short	0x4e2c
 8008568:	5a4c      	.short	0x5a4c
 800856a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800856e:	441d      	add	r5, r3
 8008570:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008574:	2b20      	cmp	r3, #32
 8008576:	bfc1      	itttt	gt
 8008578:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800857c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008580:	fa09 f303 	lslgt.w	r3, r9, r3
 8008584:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008588:	bfda      	itte	le
 800858a:	f1c3 0320 	rsble	r3, r3, #32
 800858e:	fa06 f003 	lslle.w	r0, r6, r3
 8008592:	4318      	orrgt	r0, r3
 8008594:	f7f7 ffb6 	bl	8000504 <__aeabi_ui2d>
 8008598:	2301      	movs	r3, #1
 800859a:	4606      	mov	r6, r0
 800859c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80085a0:	3d01      	subs	r5, #1
 80085a2:	9310      	str	r3, [sp, #64]	; 0x40
 80085a4:	e771      	b.n	800848a <_dtoa_r+0x11a>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e7b6      	b.n	8008518 <_dtoa_r+0x1a8>
 80085aa:	900e      	str	r0, [sp, #56]	; 0x38
 80085ac:	e7b5      	b.n	800851a <_dtoa_r+0x1aa>
 80085ae:	f1ca 0300 	rsb	r3, sl, #0
 80085b2:	9306      	str	r3, [sp, #24]
 80085b4:	2300      	movs	r3, #0
 80085b6:	eba8 080a 	sub.w	r8, r8, sl
 80085ba:	930d      	str	r3, [sp, #52]	; 0x34
 80085bc:	e7c2      	b.n	8008544 <_dtoa_r+0x1d4>
 80085be:	2300      	movs	r3, #0
 80085c0:	9308      	str	r3, [sp, #32]
 80085c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dc39      	bgt.n	800863c <_dtoa_r+0x2cc>
 80085c8:	f04f 0901 	mov.w	r9, #1
 80085cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80085d0:	464b      	mov	r3, r9
 80085d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80085d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085d8:	2200      	movs	r2, #0
 80085da:	6042      	str	r2, [r0, #4]
 80085dc:	2204      	movs	r2, #4
 80085de:	f102 0614 	add.w	r6, r2, #20
 80085e2:	429e      	cmp	r6, r3
 80085e4:	6841      	ldr	r1, [r0, #4]
 80085e6:	d92f      	bls.n	8008648 <_dtoa_r+0x2d8>
 80085e8:	4620      	mov	r0, r4
 80085ea:	f000 fcb9 	bl	8008f60 <_Balloc>
 80085ee:	9000      	str	r0, [sp, #0]
 80085f0:	2800      	cmp	r0, #0
 80085f2:	d14b      	bne.n	800868c <_dtoa_r+0x31c>
 80085f4:	4b24      	ldr	r3, [pc, #144]	; (8008688 <_dtoa_r+0x318>)
 80085f6:	4602      	mov	r2, r0
 80085f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085fc:	e6d1      	b.n	80083a2 <_dtoa_r+0x32>
 80085fe:	2301      	movs	r3, #1
 8008600:	e7de      	b.n	80085c0 <_dtoa_r+0x250>
 8008602:	2300      	movs	r3, #0
 8008604:	9308      	str	r3, [sp, #32]
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	eb0a 0903 	add.w	r9, sl, r3
 800860c:	f109 0301 	add.w	r3, r9, #1
 8008610:	2b01      	cmp	r3, #1
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	bfb8      	it	lt
 8008616:	2301      	movlt	r3, #1
 8008618:	e7dd      	b.n	80085d6 <_dtoa_r+0x266>
 800861a:	2301      	movs	r3, #1
 800861c:	e7f2      	b.n	8008604 <_dtoa_r+0x294>
 800861e:	2501      	movs	r5, #1
 8008620:	2300      	movs	r3, #0
 8008622:	9305      	str	r3, [sp, #20]
 8008624:	9508      	str	r5, [sp, #32]
 8008626:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800862a:	2200      	movs	r2, #0
 800862c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008630:	2312      	movs	r3, #18
 8008632:	9209      	str	r2, [sp, #36]	; 0x24
 8008634:	e7cf      	b.n	80085d6 <_dtoa_r+0x266>
 8008636:	2301      	movs	r3, #1
 8008638:	9308      	str	r3, [sp, #32]
 800863a:	e7f4      	b.n	8008626 <_dtoa_r+0x2b6>
 800863c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008640:	f8cd 9004 	str.w	r9, [sp, #4]
 8008644:	464b      	mov	r3, r9
 8008646:	e7c6      	b.n	80085d6 <_dtoa_r+0x266>
 8008648:	3101      	adds	r1, #1
 800864a:	6041      	str	r1, [r0, #4]
 800864c:	0052      	lsls	r2, r2, #1
 800864e:	e7c6      	b.n	80085de <_dtoa_r+0x26e>
 8008650:	636f4361 	.word	0x636f4361
 8008654:	3fd287a7 	.word	0x3fd287a7
 8008658:	8b60c8b3 	.word	0x8b60c8b3
 800865c:	3fc68a28 	.word	0x3fc68a28
 8008660:	509f79fb 	.word	0x509f79fb
 8008664:	3fd34413 	.word	0x3fd34413
 8008668:	0800aa45 	.word	0x0800aa45
 800866c:	0800aa5c 	.word	0x0800aa5c
 8008670:	7ff00000 	.word	0x7ff00000
 8008674:	0800aa41 	.word	0x0800aa41
 8008678:	0800aa38 	.word	0x0800aa38
 800867c:	0800aa15 	.word	0x0800aa15
 8008680:	3ff80000 	.word	0x3ff80000
 8008684:	0800ab58 	.word	0x0800ab58
 8008688:	0800aabb 	.word	0x0800aabb
 800868c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868e:	9a00      	ldr	r2, [sp, #0]
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	9b01      	ldr	r3, [sp, #4]
 8008694:	2b0e      	cmp	r3, #14
 8008696:	f200 80ad 	bhi.w	80087f4 <_dtoa_r+0x484>
 800869a:	2d00      	cmp	r5, #0
 800869c:	f000 80aa 	beq.w	80087f4 <_dtoa_r+0x484>
 80086a0:	f1ba 0f00 	cmp.w	sl, #0
 80086a4:	dd36      	ble.n	8008714 <_dtoa_r+0x3a4>
 80086a6:	4ac3      	ldr	r2, [pc, #780]	; (80089b4 <_dtoa_r+0x644>)
 80086a8:	f00a 030f 	and.w	r3, sl, #15
 80086ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086b0:	ed93 7b00 	vldr	d7, [r3]
 80086b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80086b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80086bc:	eeb0 8a47 	vmov.f32	s16, s14
 80086c0:	eef0 8a67 	vmov.f32	s17, s15
 80086c4:	d016      	beq.n	80086f4 <_dtoa_r+0x384>
 80086c6:	4bbc      	ldr	r3, [pc, #752]	; (80089b8 <_dtoa_r+0x648>)
 80086c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80086cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086d0:	f7f8 f8bc 	bl	800084c <__aeabi_ddiv>
 80086d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086d8:	f007 070f 	and.w	r7, r7, #15
 80086dc:	2503      	movs	r5, #3
 80086de:	4eb6      	ldr	r6, [pc, #728]	; (80089b8 <_dtoa_r+0x648>)
 80086e0:	b957      	cbnz	r7, 80086f8 <_dtoa_r+0x388>
 80086e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086e6:	ec53 2b18 	vmov	r2, r3, d8
 80086ea:	f7f8 f8af 	bl	800084c <__aeabi_ddiv>
 80086ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086f2:	e029      	b.n	8008748 <_dtoa_r+0x3d8>
 80086f4:	2502      	movs	r5, #2
 80086f6:	e7f2      	b.n	80086de <_dtoa_r+0x36e>
 80086f8:	07f9      	lsls	r1, r7, #31
 80086fa:	d508      	bpl.n	800870e <_dtoa_r+0x39e>
 80086fc:	ec51 0b18 	vmov	r0, r1, d8
 8008700:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008704:	f7f7 ff78 	bl	80005f8 <__aeabi_dmul>
 8008708:	ec41 0b18 	vmov	d8, r0, r1
 800870c:	3501      	adds	r5, #1
 800870e:	107f      	asrs	r7, r7, #1
 8008710:	3608      	adds	r6, #8
 8008712:	e7e5      	b.n	80086e0 <_dtoa_r+0x370>
 8008714:	f000 80a6 	beq.w	8008864 <_dtoa_r+0x4f4>
 8008718:	f1ca 0600 	rsb	r6, sl, #0
 800871c:	4ba5      	ldr	r3, [pc, #660]	; (80089b4 <_dtoa_r+0x644>)
 800871e:	4fa6      	ldr	r7, [pc, #664]	; (80089b8 <_dtoa_r+0x648>)
 8008720:	f006 020f 	and.w	r2, r6, #15
 8008724:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008730:	f7f7 ff62 	bl	80005f8 <__aeabi_dmul>
 8008734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008738:	1136      	asrs	r6, r6, #4
 800873a:	2300      	movs	r3, #0
 800873c:	2502      	movs	r5, #2
 800873e:	2e00      	cmp	r6, #0
 8008740:	f040 8085 	bne.w	800884e <_dtoa_r+0x4de>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1d2      	bne.n	80086ee <_dtoa_r+0x37e>
 8008748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 808c 	beq.w	8008868 <_dtoa_r+0x4f8>
 8008750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008754:	4b99      	ldr	r3, [pc, #612]	; (80089bc <_dtoa_r+0x64c>)
 8008756:	2200      	movs	r2, #0
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	f7f8 f9be 	bl	8000adc <__aeabi_dcmplt>
 8008760:	2800      	cmp	r0, #0
 8008762:	f000 8081 	beq.w	8008868 <_dtoa_r+0x4f8>
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d07d      	beq.n	8008868 <_dtoa_r+0x4f8>
 800876c:	f1b9 0f00 	cmp.w	r9, #0
 8008770:	dd3c      	ble.n	80087ec <_dtoa_r+0x47c>
 8008772:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008776:	9307      	str	r3, [sp, #28]
 8008778:	2200      	movs	r2, #0
 800877a:	4b91      	ldr	r3, [pc, #580]	; (80089c0 <_dtoa_r+0x650>)
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f7 ff3a 	bl	80005f8 <__aeabi_dmul>
 8008784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008788:	3501      	adds	r5, #1
 800878a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800878e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008792:	4628      	mov	r0, r5
 8008794:	f7f7 fec6 	bl	8000524 <__aeabi_i2d>
 8008798:	4632      	mov	r2, r6
 800879a:	463b      	mov	r3, r7
 800879c:	f7f7 ff2c 	bl	80005f8 <__aeabi_dmul>
 80087a0:	4b88      	ldr	r3, [pc, #544]	; (80089c4 <_dtoa_r+0x654>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	f7f7 fd72 	bl	800028c <__adddf3>
 80087a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087b0:	9303      	str	r3, [sp, #12]
 80087b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d15c      	bne.n	8008872 <_dtoa_r+0x502>
 80087b8:	4b83      	ldr	r3, [pc, #524]	; (80089c8 <_dtoa_r+0x658>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	4630      	mov	r0, r6
 80087be:	4639      	mov	r1, r7
 80087c0:	f7f7 fd62 	bl	8000288 <__aeabi_dsub>
 80087c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087c8:	4606      	mov	r6, r0
 80087ca:	460f      	mov	r7, r1
 80087cc:	f7f8 f9a4 	bl	8000b18 <__aeabi_dcmpgt>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	f040 8296 	bne.w	8008d02 <_dtoa_r+0x992>
 80087d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087da:	4630      	mov	r0, r6
 80087dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087e0:	4639      	mov	r1, r7
 80087e2:	f7f8 f97b 	bl	8000adc <__aeabi_dcmplt>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f040 8288 	bne.w	8008cfc <_dtoa_r+0x98c>
 80087ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80087f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f2c0 8158 	blt.w	8008aac <_dtoa_r+0x73c>
 80087fc:	f1ba 0f0e 	cmp.w	sl, #14
 8008800:	f300 8154 	bgt.w	8008aac <_dtoa_r+0x73c>
 8008804:	4b6b      	ldr	r3, [pc, #428]	; (80089b4 <_dtoa_r+0x644>)
 8008806:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800880a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800880e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	f280 80e3 	bge.w	80089dc <_dtoa_r+0x66c>
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	f300 80df 	bgt.w	80089dc <_dtoa_r+0x66c>
 800881e:	f040 826d 	bne.w	8008cfc <_dtoa_r+0x98c>
 8008822:	4b69      	ldr	r3, [pc, #420]	; (80089c8 <_dtoa_r+0x658>)
 8008824:	2200      	movs	r2, #0
 8008826:	4640      	mov	r0, r8
 8008828:	4649      	mov	r1, r9
 800882a:	f7f7 fee5 	bl	80005f8 <__aeabi_dmul>
 800882e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008832:	f7f8 f967 	bl	8000b04 <__aeabi_dcmpge>
 8008836:	9e01      	ldr	r6, [sp, #4]
 8008838:	4637      	mov	r7, r6
 800883a:	2800      	cmp	r0, #0
 800883c:	f040 8243 	bne.w	8008cc6 <_dtoa_r+0x956>
 8008840:	9d00      	ldr	r5, [sp, #0]
 8008842:	2331      	movs	r3, #49	; 0x31
 8008844:	f805 3b01 	strb.w	r3, [r5], #1
 8008848:	f10a 0a01 	add.w	sl, sl, #1
 800884c:	e23f      	b.n	8008cce <_dtoa_r+0x95e>
 800884e:	07f2      	lsls	r2, r6, #31
 8008850:	d505      	bpl.n	800885e <_dtoa_r+0x4ee>
 8008852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008856:	f7f7 fecf 	bl	80005f8 <__aeabi_dmul>
 800885a:	3501      	adds	r5, #1
 800885c:	2301      	movs	r3, #1
 800885e:	1076      	asrs	r6, r6, #1
 8008860:	3708      	adds	r7, #8
 8008862:	e76c      	b.n	800873e <_dtoa_r+0x3ce>
 8008864:	2502      	movs	r5, #2
 8008866:	e76f      	b.n	8008748 <_dtoa_r+0x3d8>
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	f8cd a01c 	str.w	sl, [sp, #28]
 800886e:	930c      	str	r3, [sp, #48]	; 0x30
 8008870:	e78d      	b.n	800878e <_dtoa_r+0x41e>
 8008872:	9900      	ldr	r1, [sp, #0]
 8008874:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008876:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008878:	4b4e      	ldr	r3, [pc, #312]	; (80089b4 <_dtoa_r+0x644>)
 800887a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800887e:	4401      	add	r1, r0
 8008880:	9102      	str	r1, [sp, #8]
 8008882:	9908      	ldr	r1, [sp, #32]
 8008884:	eeb0 8a47 	vmov.f32	s16, s14
 8008888:	eef0 8a67 	vmov.f32	s17, s15
 800888c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008890:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008894:	2900      	cmp	r1, #0
 8008896:	d045      	beq.n	8008924 <_dtoa_r+0x5b4>
 8008898:	494c      	ldr	r1, [pc, #304]	; (80089cc <_dtoa_r+0x65c>)
 800889a:	2000      	movs	r0, #0
 800889c:	f7f7 ffd6 	bl	800084c <__aeabi_ddiv>
 80088a0:	ec53 2b18 	vmov	r2, r3, d8
 80088a4:	f7f7 fcf0 	bl	8000288 <__aeabi_dsub>
 80088a8:	9d00      	ldr	r5, [sp, #0]
 80088aa:	ec41 0b18 	vmov	d8, r0, r1
 80088ae:	4639      	mov	r1, r7
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7f8 f951 	bl	8000b58 <__aeabi_d2iz>
 80088b6:	900c      	str	r0, [sp, #48]	; 0x30
 80088b8:	f7f7 fe34 	bl	8000524 <__aeabi_i2d>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4630      	mov	r0, r6
 80088c2:	4639      	mov	r1, r7
 80088c4:	f7f7 fce0 	bl	8000288 <__aeabi_dsub>
 80088c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088ca:	3330      	adds	r3, #48	; 0x30
 80088cc:	f805 3b01 	strb.w	r3, [r5], #1
 80088d0:	ec53 2b18 	vmov	r2, r3, d8
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	f7f8 f900 	bl	8000adc <__aeabi_dcmplt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d165      	bne.n	80089ac <_dtoa_r+0x63c>
 80088e0:	4632      	mov	r2, r6
 80088e2:	463b      	mov	r3, r7
 80088e4:	4935      	ldr	r1, [pc, #212]	; (80089bc <_dtoa_r+0x64c>)
 80088e6:	2000      	movs	r0, #0
 80088e8:	f7f7 fcce 	bl	8000288 <__aeabi_dsub>
 80088ec:	ec53 2b18 	vmov	r2, r3, d8
 80088f0:	f7f8 f8f4 	bl	8000adc <__aeabi_dcmplt>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f040 80b9 	bne.w	8008a6c <_dtoa_r+0x6fc>
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	429d      	cmp	r5, r3
 80088fe:	f43f af75 	beq.w	80087ec <_dtoa_r+0x47c>
 8008902:	4b2f      	ldr	r3, [pc, #188]	; (80089c0 <_dtoa_r+0x650>)
 8008904:	ec51 0b18 	vmov	r0, r1, d8
 8008908:	2200      	movs	r2, #0
 800890a:	f7f7 fe75 	bl	80005f8 <__aeabi_dmul>
 800890e:	4b2c      	ldr	r3, [pc, #176]	; (80089c0 <_dtoa_r+0x650>)
 8008910:	ec41 0b18 	vmov	d8, r0, r1
 8008914:	2200      	movs	r2, #0
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 fe6d 	bl	80005f8 <__aeabi_dmul>
 800891e:	4606      	mov	r6, r0
 8008920:	460f      	mov	r7, r1
 8008922:	e7c4      	b.n	80088ae <_dtoa_r+0x53e>
 8008924:	ec51 0b17 	vmov	r0, r1, d7
 8008928:	f7f7 fe66 	bl	80005f8 <__aeabi_dmul>
 800892c:	9b02      	ldr	r3, [sp, #8]
 800892e:	9d00      	ldr	r5, [sp, #0]
 8008930:	930c      	str	r3, [sp, #48]	; 0x30
 8008932:	ec41 0b18 	vmov	d8, r0, r1
 8008936:	4639      	mov	r1, r7
 8008938:	4630      	mov	r0, r6
 800893a:	f7f8 f90d 	bl	8000b58 <__aeabi_d2iz>
 800893e:	9011      	str	r0, [sp, #68]	; 0x44
 8008940:	f7f7 fdf0 	bl	8000524 <__aeabi_i2d>
 8008944:	4602      	mov	r2, r0
 8008946:	460b      	mov	r3, r1
 8008948:	4630      	mov	r0, r6
 800894a:	4639      	mov	r1, r7
 800894c:	f7f7 fc9c 	bl	8000288 <__aeabi_dsub>
 8008950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008952:	3330      	adds	r3, #48	; 0x30
 8008954:	f805 3b01 	strb.w	r3, [r5], #1
 8008958:	9b02      	ldr	r3, [sp, #8]
 800895a:	429d      	cmp	r5, r3
 800895c:	4606      	mov	r6, r0
 800895e:	460f      	mov	r7, r1
 8008960:	f04f 0200 	mov.w	r2, #0
 8008964:	d134      	bne.n	80089d0 <_dtoa_r+0x660>
 8008966:	4b19      	ldr	r3, [pc, #100]	; (80089cc <_dtoa_r+0x65c>)
 8008968:	ec51 0b18 	vmov	r0, r1, d8
 800896c:	f7f7 fc8e 	bl	800028c <__adddf3>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f7f8 f8ce 	bl	8000b18 <__aeabi_dcmpgt>
 800897c:	2800      	cmp	r0, #0
 800897e:	d175      	bne.n	8008a6c <_dtoa_r+0x6fc>
 8008980:	ec53 2b18 	vmov	r2, r3, d8
 8008984:	4911      	ldr	r1, [pc, #68]	; (80089cc <_dtoa_r+0x65c>)
 8008986:	2000      	movs	r0, #0
 8008988:	f7f7 fc7e 	bl	8000288 <__aeabi_dsub>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f8 f8a2 	bl	8000adc <__aeabi_dcmplt>
 8008998:	2800      	cmp	r0, #0
 800899a:	f43f af27 	beq.w	80087ec <_dtoa_r+0x47c>
 800899e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089a0:	1e6b      	subs	r3, r5, #1
 80089a2:	930c      	str	r3, [sp, #48]	; 0x30
 80089a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089a8:	2b30      	cmp	r3, #48	; 0x30
 80089aa:	d0f8      	beq.n	800899e <_dtoa_r+0x62e>
 80089ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80089b0:	e04a      	b.n	8008a48 <_dtoa_r+0x6d8>
 80089b2:	bf00      	nop
 80089b4:	0800ab58 	.word	0x0800ab58
 80089b8:	0800ab30 	.word	0x0800ab30
 80089bc:	3ff00000 	.word	0x3ff00000
 80089c0:	40240000 	.word	0x40240000
 80089c4:	401c0000 	.word	0x401c0000
 80089c8:	40140000 	.word	0x40140000
 80089cc:	3fe00000 	.word	0x3fe00000
 80089d0:	4baf      	ldr	r3, [pc, #700]	; (8008c90 <_dtoa_r+0x920>)
 80089d2:	f7f7 fe11 	bl	80005f8 <__aeabi_dmul>
 80089d6:	4606      	mov	r6, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	e7ac      	b.n	8008936 <_dtoa_r+0x5c6>
 80089dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089e0:	9d00      	ldr	r5, [sp, #0]
 80089e2:	4642      	mov	r2, r8
 80089e4:	464b      	mov	r3, r9
 80089e6:	4630      	mov	r0, r6
 80089e8:	4639      	mov	r1, r7
 80089ea:	f7f7 ff2f 	bl	800084c <__aeabi_ddiv>
 80089ee:	f7f8 f8b3 	bl	8000b58 <__aeabi_d2iz>
 80089f2:	9002      	str	r0, [sp, #8]
 80089f4:	f7f7 fd96 	bl	8000524 <__aeabi_i2d>
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	f7f7 fdfc 	bl	80005f8 <__aeabi_dmul>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4630      	mov	r0, r6
 8008a06:	4639      	mov	r1, r7
 8008a08:	f7f7 fc3e 	bl	8000288 <__aeabi_dsub>
 8008a0c:	9e02      	ldr	r6, [sp, #8]
 8008a0e:	9f01      	ldr	r7, [sp, #4]
 8008a10:	3630      	adds	r6, #48	; 0x30
 8008a12:	f805 6b01 	strb.w	r6, [r5], #1
 8008a16:	9e00      	ldr	r6, [sp, #0]
 8008a18:	1bae      	subs	r6, r5, r6
 8008a1a:	42b7      	cmp	r7, r6
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	d137      	bne.n	8008a92 <_dtoa_r+0x722>
 8008a22:	f7f7 fc33 	bl	800028c <__adddf3>
 8008a26:	4642      	mov	r2, r8
 8008a28:	464b      	mov	r3, r9
 8008a2a:	4606      	mov	r6, r0
 8008a2c:	460f      	mov	r7, r1
 8008a2e:	f7f8 f873 	bl	8000b18 <__aeabi_dcmpgt>
 8008a32:	b9c8      	cbnz	r0, 8008a68 <_dtoa_r+0x6f8>
 8008a34:	4642      	mov	r2, r8
 8008a36:	464b      	mov	r3, r9
 8008a38:	4630      	mov	r0, r6
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	f7f8 f844 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a40:	b110      	cbz	r0, 8008a48 <_dtoa_r+0x6d8>
 8008a42:	9b02      	ldr	r3, [sp, #8]
 8008a44:	07d9      	lsls	r1, r3, #31
 8008a46:	d40f      	bmi.n	8008a68 <_dtoa_r+0x6f8>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	4659      	mov	r1, fp
 8008a4c:	f000 fac8 	bl	8008fe0 <_Bfree>
 8008a50:	2300      	movs	r3, #0
 8008a52:	702b      	strb	r3, [r5, #0]
 8008a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a56:	f10a 0001 	add.w	r0, sl, #1
 8008a5a:	6018      	str	r0, [r3, #0]
 8008a5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f43f acd8 	beq.w	8008414 <_dtoa_r+0xa4>
 8008a64:	601d      	str	r5, [r3, #0]
 8008a66:	e4d5      	b.n	8008414 <_dtoa_r+0xa4>
 8008a68:	f8cd a01c 	str.w	sl, [sp, #28]
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	461d      	mov	r5, r3
 8008a70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a74:	2a39      	cmp	r2, #57	; 0x39
 8008a76:	d108      	bne.n	8008a8a <_dtoa_r+0x71a>
 8008a78:	9a00      	ldr	r2, [sp, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d1f7      	bne.n	8008a6e <_dtoa_r+0x6fe>
 8008a7e:	9a07      	ldr	r2, [sp, #28]
 8008a80:	9900      	ldr	r1, [sp, #0]
 8008a82:	3201      	adds	r2, #1
 8008a84:	9207      	str	r2, [sp, #28]
 8008a86:	2230      	movs	r2, #48	; 0x30
 8008a88:	700a      	strb	r2, [r1, #0]
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	3201      	adds	r2, #1
 8008a8e:	701a      	strb	r2, [r3, #0]
 8008a90:	e78c      	b.n	80089ac <_dtoa_r+0x63c>
 8008a92:	4b7f      	ldr	r3, [pc, #508]	; (8008c90 <_dtoa_r+0x920>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	f7f7 fdaf 	bl	80005f8 <__aeabi_dmul>
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460f      	mov	r7, r1
 8008aa2:	f7f8 f811 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d09b      	beq.n	80089e2 <_dtoa_r+0x672>
 8008aaa:	e7cd      	b.n	8008a48 <_dtoa_r+0x6d8>
 8008aac:	9a08      	ldr	r2, [sp, #32]
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	f000 80c4 	beq.w	8008c3c <_dtoa_r+0x8cc>
 8008ab4:	9a05      	ldr	r2, [sp, #20]
 8008ab6:	2a01      	cmp	r2, #1
 8008ab8:	f300 80a8 	bgt.w	8008c0c <_dtoa_r+0x89c>
 8008abc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	f000 80a0 	beq.w	8008c04 <_dtoa_r+0x894>
 8008ac4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ac8:	9e06      	ldr	r6, [sp, #24]
 8008aca:	4645      	mov	r5, r8
 8008acc:	9a04      	ldr	r2, [sp, #16]
 8008ace:	2101      	movs	r1, #1
 8008ad0:	441a      	add	r2, r3
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	4498      	add	r8, r3
 8008ad6:	9204      	str	r2, [sp, #16]
 8008ad8:	f000 fb3e 	bl	8009158 <__i2b>
 8008adc:	4607      	mov	r7, r0
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	dd0b      	ble.n	8008afa <_dtoa_r+0x78a>
 8008ae2:	9b04      	ldr	r3, [sp, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd08      	ble.n	8008afa <_dtoa_r+0x78a>
 8008ae8:	42ab      	cmp	r3, r5
 8008aea:	9a04      	ldr	r2, [sp, #16]
 8008aec:	bfa8      	it	ge
 8008aee:	462b      	movge	r3, r5
 8008af0:	eba8 0803 	sub.w	r8, r8, r3
 8008af4:	1aed      	subs	r5, r5, r3
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	9b06      	ldr	r3, [sp, #24]
 8008afc:	b1fb      	cbz	r3, 8008b3e <_dtoa_r+0x7ce>
 8008afe:	9b08      	ldr	r3, [sp, #32]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 809f 	beq.w	8008c44 <_dtoa_r+0x8d4>
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	dd11      	ble.n	8008b2e <_dtoa_r+0x7be>
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fbde 	bl	80092d0 <__pow5mult>
 8008b14:	465a      	mov	r2, fp
 8008b16:	4601      	mov	r1, r0
 8008b18:	4607      	mov	r7, r0
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fb32 	bl	8009184 <__multiply>
 8008b20:	4659      	mov	r1, fp
 8008b22:	9007      	str	r0, [sp, #28]
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fa5b 	bl	8008fe0 <_Bfree>
 8008b2a:	9b07      	ldr	r3, [sp, #28]
 8008b2c:	469b      	mov	fp, r3
 8008b2e:	9b06      	ldr	r3, [sp, #24]
 8008b30:	1b9a      	subs	r2, r3, r6
 8008b32:	d004      	beq.n	8008b3e <_dtoa_r+0x7ce>
 8008b34:	4659      	mov	r1, fp
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fbca 	bl	80092d0 <__pow5mult>
 8008b3c:	4683      	mov	fp, r0
 8008b3e:	2101      	movs	r1, #1
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fb09 	bl	8009158 <__i2b>
 8008b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	dd7c      	ble.n	8008c48 <_dtoa_r+0x8d8>
 8008b4e:	461a      	mov	r2, r3
 8008b50:	4601      	mov	r1, r0
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 fbbc 	bl	80092d0 <__pow5mult>
 8008b58:	9b05      	ldr	r3, [sp, #20]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	4606      	mov	r6, r0
 8008b5e:	dd76      	ble.n	8008c4e <_dtoa_r+0x8de>
 8008b60:	2300      	movs	r3, #0
 8008b62:	9306      	str	r3, [sp, #24]
 8008b64:	6933      	ldr	r3, [r6, #16]
 8008b66:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b6a:	6918      	ldr	r0, [r3, #16]
 8008b6c:	f000 faa4 	bl	80090b8 <__hi0bits>
 8008b70:	f1c0 0020 	rsb	r0, r0, #32
 8008b74:	9b04      	ldr	r3, [sp, #16]
 8008b76:	4418      	add	r0, r3
 8008b78:	f010 001f 	ands.w	r0, r0, #31
 8008b7c:	f000 8086 	beq.w	8008c8c <_dtoa_r+0x91c>
 8008b80:	f1c0 0320 	rsb	r3, r0, #32
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	dd7f      	ble.n	8008c88 <_dtoa_r+0x918>
 8008b88:	f1c0 001c 	rsb	r0, r0, #28
 8008b8c:	9b04      	ldr	r3, [sp, #16]
 8008b8e:	4403      	add	r3, r0
 8008b90:	4480      	add	r8, r0
 8008b92:	4405      	add	r5, r0
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	f1b8 0f00 	cmp.w	r8, #0
 8008b9a:	dd05      	ble.n	8008ba8 <_dtoa_r+0x838>
 8008b9c:	4659      	mov	r1, fp
 8008b9e:	4642      	mov	r2, r8
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fbef 	bl	8009384 <__lshift>
 8008ba6:	4683      	mov	fp, r0
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd05      	ble.n	8008bba <_dtoa_r+0x84a>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fbe6 	bl	8009384 <__lshift>
 8008bb8:	4606      	mov	r6, r0
 8008bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d069      	beq.n	8008c94 <_dtoa_r+0x924>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4658      	mov	r0, fp
 8008bc4:	f000 fc4a 	bl	800945c <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	da63      	bge.n	8008c94 <_dtoa_r+0x924>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4659      	mov	r1, fp
 8008bd0:	220a      	movs	r2, #10
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fa26 	bl	8009024 <__multadd>
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008bde:	4683      	mov	fp, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 818f 	beq.w	8008f04 <_dtoa_r+0xb94>
 8008be6:	4639      	mov	r1, r7
 8008be8:	2300      	movs	r3, #0
 8008bea:	220a      	movs	r2, #10
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 fa19 	bl	8009024 <__multadd>
 8008bf2:	f1b9 0f00 	cmp.w	r9, #0
 8008bf6:	4607      	mov	r7, r0
 8008bf8:	f300 808e 	bgt.w	8008d18 <_dtoa_r+0x9a8>
 8008bfc:	9b05      	ldr	r3, [sp, #20]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	dc50      	bgt.n	8008ca4 <_dtoa_r+0x934>
 8008c02:	e089      	b.n	8008d18 <_dtoa_r+0x9a8>
 8008c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c0a:	e75d      	b.n	8008ac8 <_dtoa_r+0x758>
 8008c0c:	9b01      	ldr	r3, [sp, #4]
 8008c0e:	1e5e      	subs	r6, r3, #1
 8008c10:	9b06      	ldr	r3, [sp, #24]
 8008c12:	42b3      	cmp	r3, r6
 8008c14:	bfbf      	itttt	lt
 8008c16:	9b06      	ldrlt	r3, [sp, #24]
 8008c18:	9606      	strlt	r6, [sp, #24]
 8008c1a:	1af2      	sublt	r2, r6, r3
 8008c1c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008c1e:	bfb6      	itet	lt
 8008c20:	189b      	addlt	r3, r3, r2
 8008c22:	1b9e      	subge	r6, r3, r6
 8008c24:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	bfb8      	it	lt
 8008c2a:	2600      	movlt	r6, #0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfb5      	itete	lt
 8008c30:	eba8 0503 	sublt.w	r5, r8, r3
 8008c34:	9b01      	ldrge	r3, [sp, #4]
 8008c36:	2300      	movlt	r3, #0
 8008c38:	4645      	movge	r5, r8
 8008c3a:	e747      	b.n	8008acc <_dtoa_r+0x75c>
 8008c3c:	9e06      	ldr	r6, [sp, #24]
 8008c3e:	9f08      	ldr	r7, [sp, #32]
 8008c40:	4645      	mov	r5, r8
 8008c42:	e74c      	b.n	8008ade <_dtoa_r+0x76e>
 8008c44:	9a06      	ldr	r2, [sp, #24]
 8008c46:	e775      	b.n	8008b34 <_dtoa_r+0x7c4>
 8008c48:	9b05      	ldr	r3, [sp, #20]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	dc18      	bgt.n	8008c80 <_dtoa_r+0x910>
 8008c4e:	9b02      	ldr	r3, [sp, #8]
 8008c50:	b9b3      	cbnz	r3, 8008c80 <_dtoa_r+0x910>
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c58:	b9a3      	cbnz	r3, 8008c84 <_dtoa_r+0x914>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c60:	0d1b      	lsrs	r3, r3, #20
 8008c62:	051b      	lsls	r3, r3, #20
 8008c64:	b12b      	cbz	r3, 8008c72 <_dtoa_r+0x902>
 8008c66:	9b04      	ldr	r3, [sp, #16]
 8008c68:	3301      	adds	r3, #1
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	f108 0801 	add.w	r8, r8, #1
 8008c70:	2301      	movs	r3, #1
 8008c72:	9306      	str	r3, [sp, #24]
 8008c74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f47f af74 	bne.w	8008b64 <_dtoa_r+0x7f4>
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	e779      	b.n	8008b74 <_dtoa_r+0x804>
 8008c80:	2300      	movs	r3, #0
 8008c82:	e7f6      	b.n	8008c72 <_dtoa_r+0x902>
 8008c84:	9b02      	ldr	r3, [sp, #8]
 8008c86:	e7f4      	b.n	8008c72 <_dtoa_r+0x902>
 8008c88:	d085      	beq.n	8008b96 <_dtoa_r+0x826>
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	301c      	adds	r0, #28
 8008c8e:	e77d      	b.n	8008b8c <_dtoa_r+0x81c>
 8008c90:	40240000 	.word	0x40240000
 8008c94:	9b01      	ldr	r3, [sp, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dc38      	bgt.n	8008d0c <_dtoa_r+0x99c>
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	dd35      	ble.n	8008d0c <_dtoa_r+0x99c>
 8008ca0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008ca4:	f1b9 0f00 	cmp.w	r9, #0
 8008ca8:	d10d      	bne.n	8008cc6 <_dtoa_r+0x956>
 8008caa:	4631      	mov	r1, r6
 8008cac:	464b      	mov	r3, r9
 8008cae:	2205      	movs	r2, #5
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 f9b7 	bl	8009024 <__multadd>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	4606      	mov	r6, r0
 8008cba:	4658      	mov	r0, fp
 8008cbc:	f000 fbce 	bl	800945c <__mcmp>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	f73f adbd 	bgt.w	8008840 <_dtoa_r+0x4d0>
 8008cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc8:	9d00      	ldr	r5, [sp, #0]
 8008cca:	ea6f 0a03 	mvn.w	sl, r3
 8008cce:	f04f 0800 	mov.w	r8, #0
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 f983 	bl	8008fe0 <_Bfree>
 8008cda:	2f00      	cmp	r7, #0
 8008cdc:	f43f aeb4 	beq.w	8008a48 <_dtoa_r+0x6d8>
 8008ce0:	f1b8 0f00 	cmp.w	r8, #0
 8008ce4:	d005      	beq.n	8008cf2 <_dtoa_r+0x982>
 8008ce6:	45b8      	cmp	r8, r7
 8008ce8:	d003      	beq.n	8008cf2 <_dtoa_r+0x982>
 8008cea:	4641      	mov	r1, r8
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 f977 	bl	8008fe0 <_Bfree>
 8008cf2:	4639      	mov	r1, r7
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 f973 	bl	8008fe0 <_Bfree>
 8008cfa:	e6a5      	b.n	8008a48 <_dtoa_r+0x6d8>
 8008cfc:	2600      	movs	r6, #0
 8008cfe:	4637      	mov	r7, r6
 8008d00:	e7e1      	b.n	8008cc6 <_dtoa_r+0x956>
 8008d02:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008d04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d08:	4637      	mov	r7, r6
 8008d0a:	e599      	b.n	8008840 <_dtoa_r+0x4d0>
 8008d0c:	9b08      	ldr	r3, [sp, #32]
 8008d0e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80fd 	beq.w	8008f12 <_dtoa_r+0xba2>
 8008d18:	2d00      	cmp	r5, #0
 8008d1a:	dd05      	ble.n	8008d28 <_dtoa_r+0x9b8>
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	462a      	mov	r2, r5
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fb2f 	bl	8009384 <__lshift>
 8008d26:	4607      	mov	r7, r0
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d05c      	beq.n	8008de8 <_dtoa_r+0xa78>
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 f915 	bl	8008f60 <_Balloc>
 8008d36:	4605      	mov	r5, r0
 8008d38:	b928      	cbnz	r0, 8008d46 <_dtoa_r+0x9d6>
 8008d3a:	4b80      	ldr	r3, [pc, #512]	; (8008f3c <_dtoa_r+0xbcc>)
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d42:	f7ff bb2e 	b.w	80083a2 <_dtoa_r+0x32>
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	3202      	adds	r2, #2
 8008d4a:	0092      	lsls	r2, r2, #2
 8008d4c:	f107 010c 	add.w	r1, r7, #12
 8008d50:	300c      	adds	r0, #12
 8008d52:	f7fe fe01 	bl	8007958 <memcpy>
 8008d56:	2201      	movs	r2, #1
 8008d58:	4629      	mov	r1, r5
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 fb12 	bl	8009384 <__lshift>
 8008d60:	9b00      	ldr	r3, [sp, #0]
 8008d62:	3301      	adds	r3, #1
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	9b00      	ldr	r3, [sp, #0]
 8008d68:	444b      	add	r3, r9
 8008d6a:	9307      	str	r3, [sp, #28]
 8008d6c:	9b02      	ldr	r3, [sp, #8]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	46b8      	mov	r8, r7
 8008d74:	9306      	str	r3, [sp, #24]
 8008d76:	4607      	mov	r7, r0
 8008d78:	9b01      	ldr	r3, [sp, #4]
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	4658      	mov	r0, fp
 8008d80:	9302      	str	r3, [sp, #8]
 8008d82:	f7ff fa69 	bl	8008258 <quorem>
 8008d86:	4603      	mov	r3, r0
 8008d88:	3330      	adds	r3, #48	; 0x30
 8008d8a:	9004      	str	r0, [sp, #16]
 8008d8c:	4641      	mov	r1, r8
 8008d8e:	4658      	mov	r0, fp
 8008d90:	9308      	str	r3, [sp, #32]
 8008d92:	f000 fb63 	bl	800945c <__mcmp>
 8008d96:	463a      	mov	r2, r7
 8008d98:	4681      	mov	r9, r0
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fb79 	bl	8009494 <__mdiff>
 8008da2:	68c2      	ldr	r2, [r0, #12]
 8008da4:	9b08      	ldr	r3, [sp, #32]
 8008da6:	4605      	mov	r5, r0
 8008da8:	bb02      	cbnz	r2, 8008dec <_dtoa_r+0xa7c>
 8008daa:	4601      	mov	r1, r0
 8008dac:	4658      	mov	r0, fp
 8008dae:	f000 fb55 	bl	800945c <__mcmp>
 8008db2:	9b08      	ldr	r3, [sp, #32]
 8008db4:	4602      	mov	r2, r0
 8008db6:	4629      	mov	r1, r5
 8008db8:	4620      	mov	r0, r4
 8008dba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008dbe:	f000 f90f 	bl	8008fe0 <_Bfree>
 8008dc2:	9b05      	ldr	r3, [sp, #20]
 8008dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dc6:	9d01      	ldr	r5, [sp, #4]
 8008dc8:	ea43 0102 	orr.w	r1, r3, r2
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	d10d      	bne.n	8008df0 <_dtoa_r+0xa80>
 8008dd4:	2b39      	cmp	r3, #57	; 0x39
 8008dd6:	d029      	beq.n	8008e2c <_dtoa_r+0xabc>
 8008dd8:	f1b9 0f00 	cmp.w	r9, #0
 8008ddc:	dd01      	ble.n	8008de2 <_dtoa_r+0xa72>
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	3331      	adds	r3, #49	; 0x31
 8008de2:	9a02      	ldr	r2, [sp, #8]
 8008de4:	7013      	strb	r3, [r2, #0]
 8008de6:	e774      	b.n	8008cd2 <_dtoa_r+0x962>
 8008de8:	4638      	mov	r0, r7
 8008dea:	e7b9      	b.n	8008d60 <_dtoa_r+0x9f0>
 8008dec:	2201      	movs	r2, #1
 8008dee:	e7e2      	b.n	8008db6 <_dtoa_r+0xa46>
 8008df0:	f1b9 0f00 	cmp.w	r9, #0
 8008df4:	db06      	blt.n	8008e04 <_dtoa_r+0xa94>
 8008df6:	9905      	ldr	r1, [sp, #20]
 8008df8:	ea41 0909 	orr.w	r9, r1, r9
 8008dfc:	9906      	ldr	r1, [sp, #24]
 8008dfe:	ea59 0101 	orrs.w	r1, r9, r1
 8008e02:	d120      	bne.n	8008e46 <_dtoa_r+0xad6>
 8008e04:	2a00      	cmp	r2, #0
 8008e06:	ddec      	ble.n	8008de2 <_dtoa_r+0xa72>
 8008e08:	4659      	mov	r1, fp
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	f000 fab8 	bl	8009384 <__lshift>
 8008e14:	4631      	mov	r1, r6
 8008e16:	4683      	mov	fp, r0
 8008e18:	f000 fb20 	bl	800945c <__mcmp>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	dc02      	bgt.n	8008e28 <_dtoa_r+0xab8>
 8008e22:	d1de      	bne.n	8008de2 <_dtoa_r+0xa72>
 8008e24:	07da      	lsls	r2, r3, #31
 8008e26:	d5dc      	bpl.n	8008de2 <_dtoa_r+0xa72>
 8008e28:	2b39      	cmp	r3, #57	; 0x39
 8008e2a:	d1d8      	bne.n	8008dde <_dtoa_r+0xa6e>
 8008e2c:	9a02      	ldr	r2, [sp, #8]
 8008e2e:	2339      	movs	r3, #57	; 0x39
 8008e30:	7013      	strb	r3, [r2, #0]
 8008e32:	462b      	mov	r3, r5
 8008e34:	461d      	mov	r5, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e3c:	2a39      	cmp	r2, #57	; 0x39
 8008e3e:	d050      	beq.n	8008ee2 <_dtoa_r+0xb72>
 8008e40:	3201      	adds	r2, #1
 8008e42:	701a      	strb	r2, [r3, #0]
 8008e44:	e745      	b.n	8008cd2 <_dtoa_r+0x962>
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	dd03      	ble.n	8008e52 <_dtoa_r+0xae2>
 8008e4a:	2b39      	cmp	r3, #57	; 0x39
 8008e4c:	d0ee      	beq.n	8008e2c <_dtoa_r+0xabc>
 8008e4e:	3301      	adds	r3, #1
 8008e50:	e7c7      	b.n	8008de2 <_dtoa_r+0xa72>
 8008e52:	9a01      	ldr	r2, [sp, #4]
 8008e54:	9907      	ldr	r1, [sp, #28]
 8008e56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008e5a:	428a      	cmp	r2, r1
 8008e5c:	d02a      	beq.n	8008eb4 <_dtoa_r+0xb44>
 8008e5e:	4659      	mov	r1, fp
 8008e60:	2300      	movs	r3, #0
 8008e62:	220a      	movs	r2, #10
 8008e64:	4620      	mov	r0, r4
 8008e66:	f000 f8dd 	bl	8009024 <__multadd>
 8008e6a:	45b8      	cmp	r8, r7
 8008e6c:	4683      	mov	fp, r0
 8008e6e:	f04f 0300 	mov.w	r3, #0
 8008e72:	f04f 020a 	mov.w	r2, #10
 8008e76:	4641      	mov	r1, r8
 8008e78:	4620      	mov	r0, r4
 8008e7a:	d107      	bne.n	8008e8c <_dtoa_r+0xb1c>
 8008e7c:	f000 f8d2 	bl	8009024 <__multadd>
 8008e80:	4680      	mov	r8, r0
 8008e82:	4607      	mov	r7, r0
 8008e84:	9b01      	ldr	r3, [sp, #4]
 8008e86:	3301      	adds	r3, #1
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	e775      	b.n	8008d78 <_dtoa_r+0xa08>
 8008e8c:	f000 f8ca 	bl	8009024 <__multadd>
 8008e90:	4639      	mov	r1, r7
 8008e92:	4680      	mov	r8, r0
 8008e94:	2300      	movs	r3, #0
 8008e96:	220a      	movs	r2, #10
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 f8c3 	bl	8009024 <__multadd>
 8008e9e:	4607      	mov	r7, r0
 8008ea0:	e7f0      	b.n	8008e84 <_dtoa_r+0xb14>
 8008ea2:	f1b9 0f00 	cmp.w	r9, #0
 8008ea6:	9a00      	ldr	r2, [sp, #0]
 8008ea8:	bfcc      	ite	gt
 8008eaa:	464d      	movgt	r5, r9
 8008eac:	2501      	movle	r5, #1
 8008eae:	4415      	add	r5, r2
 8008eb0:	f04f 0800 	mov.w	r8, #0
 8008eb4:	4659      	mov	r1, fp
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	4620      	mov	r0, r4
 8008eba:	9301      	str	r3, [sp, #4]
 8008ebc:	f000 fa62 	bl	8009384 <__lshift>
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4683      	mov	fp, r0
 8008ec4:	f000 faca 	bl	800945c <__mcmp>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	dcb2      	bgt.n	8008e32 <_dtoa_r+0xac2>
 8008ecc:	d102      	bne.n	8008ed4 <_dtoa_r+0xb64>
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	07db      	lsls	r3, r3, #31
 8008ed2:	d4ae      	bmi.n	8008e32 <_dtoa_r+0xac2>
 8008ed4:	462b      	mov	r3, r5
 8008ed6:	461d      	mov	r5, r3
 8008ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008edc:	2a30      	cmp	r2, #48	; 0x30
 8008ede:	d0fa      	beq.n	8008ed6 <_dtoa_r+0xb66>
 8008ee0:	e6f7      	b.n	8008cd2 <_dtoa_r+0x962>
 8008ee2:	9a00      	ldr	r2, [sp, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d1a5      	bne.n	8008e34 <_dtoa_r+0xac4>
 8008ee8:	f10a 0a01 	add.w	sl, sl, #1
 8008eec:	2331      	movs	r3, #49	; 0x31
 8008eee:	e779      	b.n	8008de4 <_dtoa_r+0xa74>
 8008ef0:	4b13      	ldr	r3, [pc, #76]	; (8008f40 <_dtoa_r+0xbd0>)
 8008ef2:	f7ff baaf 	b.w	8008454 <_dtoa_r+0xe4>
 8008ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f47f aa86 	bne.w	800840a <_dtoa_r+0x9a>
 8008efe:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <_dtoa_r+0xbd4>)
 8008f00:	f7ff baa8 	b.w	8008454 <_dtoa_r+0xe4>
 8008f04:	f1b9 0f00 	cmp.w	r9, #0
 8008f08:	dc03      	bgt.n	8008f12 <_dtoa_r+0xba2>
 8008f0a:	9b05      	ldr	r3, [sp, #20]
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	f73f aec9 	bgt.w	8008ca4 <_dtoa_r+0x934>
 8008f12:	9d00      	ldr	r5, [sp, #0]
 8008f14:	4631      	mov	r1, r6
 8008f16:	4658      	mov	r0, fp
 8008f18:	f7ff f99e 	bl	8008258 <quorem>
 8008f1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f20:	f805 3b01 	strb.w	r3, [r5], #1
 8008f24:	9a00      	ldr	r2, [sp, #0]
 8008f26:	1aaa      	subs	r2, r5, r2
 8008f28:	4591      	cmp	r9, r2
 8008f2a:	ddba      	ble.n	8008ea2 <_dtoa_r+0xb32>
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	2300      	movs	r3, #0
 8008f30:	220a      	movs	r2, #10
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 f876 	bl	8009024 <__multadd>
 8008f38:	4683      	mov	fp, r0
 8008f3a:	e7eb      	b.n	8008f14 <_dtoa_r+0xba4>
 8008f3c:	0800aabb 	.word	0x0800aabb
 8008f40:	0800aa14 	.word	0x0800aa14
 8008f44:	0800aa38 	.word	0x0800aa38

08008f48 <_localeconv_r>:
 8008f48:	4800      	ldr	r0, [pc, #0]	; (8008f4c <_localeconv_r+0x4>)
 8008f4a:	4770      	bx	lr
 8008f4c:	20000160 	.word	0x20000160

08008f50 <malloc>:
 8008f50:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <malloc+0xc>)
 8008f52:	4601      	mov	r1, r0
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	f000 bbe1 	b.w	800971c <_malloc_r>
 8008f5a:	bf00      	nop
 8008f5c:	2000000c 	.word	0x2000000c

08008f60 <_Balloc>:
 8008f60:	b570      	push	{r4, r5, r6, lr}
 8008f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f64:	4604      	mov	r4, r0
 8008f66:	460d      	mov	r5, r1
 8008f68:	b976      	cbnz	r6, 8008f88 <_Balloc+0x28>
 8008f6a:	2010      	movs	r0, #16
 8008f6c:	f7ff fff0 	bl	8008f50 <malloc>
 8008f70:	4602      	mov	r2, r0
 8008f72:	6260      	str	r0, [r4, #36]	; 0x24
 8008f74:	b920      	cbnz	r0, 8008f80 <_Balloc+0x20>
 8008f76:	4b18      	ldr	r3, [pc, #96]	; (8008fd8 <_Balloc+0x78>)
 8008f78:	4818      	ldr	r0, [pc, #96]	; (8008fdc <_Balloc+0x7c>)
 8008f7a:	2166      	movs	r1, #102	; 0x66
 8008f7c:	f000 fc38 	bl	80097f0 <__assert_func>
 8008f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f84:	6006      	str	r6, [r0, #0]
 8008f86:	60c6      	str	r6, [r0, #12]
 8008f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f8a:	68f3      	ldr	r3, [r6, #12]
 8008f8c:	b183      	cbz	r3, 8008fb0 <_Balloc+0x50>
 8008f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f96:	b9b8      	cbnz	r0, 8008fc8 <_Balloc+0x68>
 8008f98:	2101      	movs	r1, #1
 8008f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f9e:	1d72      	adds	r2, r6, #5
 8008fa0:	0092      	lsls	r2, r2, #2
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fb5a 	bl	800965c <_calloc_r>
 8008fa8:	b160      	cbz	r0, 8008fc4 <_Balloc+0x64>
 8008faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fae:	e00e      	b.n	8008fce <_Balloc+0x6e>
 8008fb0:	2221      	movs	r2, #33	; 0x21
 8008fb2:	2104      	movs	r1, #4
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 fb51 	bl	800965c <_calloc_r>
 8008fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fbc:	60f0      	str	r0, [r6, #12]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e4      	bne.n	8008f8e <_Balloc+0x2e>
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	6802      	ldr	r2, [r0, #0]
 8008fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fd4:	e7f7      	b.n	8008fc6 <_Balloc+0x66>
 8008fd6:	bf00      	nop
 8008fd8:	0800aa45 	.word	0x0800aa45
 8008fdc:	0800aacc 	.word	0x0800aacc

08008fe0 <_Bfree>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	b976      	cbnz	r6, 8009008 <_Bfree+0x28>
 8008fea:	2010      	movs	r0, #16
 8008fec:	f7ff ffb0 	bl	8008f50 <malloc>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6268      	str	r0, [r5, #36]	; 0x24
 8008ff4:	b920      	cbnz	r0, 8009000 <_Bfree+0x20>
 8008ff6:	4b09      	ldr	r3, [pc, #36]	; (800901c <_Bfree+0x3c>)
 8008ff8:	4809      	ldr	r0, [pc, #36]	; (8009020 <_Bfree+0x40>)
 8008ffa:	218a      	movs	r1, #138	; 0x8a
 8008ffc:	f000 fbf8 	bl	80097f0 <__assert_func>
 8009000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009004:	6006      	str	r6, [r0, #0]
 8009006:	60c6      	str	r6, [r0, #12]
 8009008:	b13c      	cbz	r4, 800901a <_Bfree+0x3a>
 800900a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800900c:	6862      	ldr	r2, [r4, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009014:	6021      	str	r1, [r4, #0]
 8009016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800901a:	bd70      	pop	{r4, r5, r6, pc}
 800901c:	0800aa45 	.word	0x0800aa45
 8009020:	0800aacc 	.word	0x0800aacc

08009024 <__multadd>:
 8009024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009028:	690e      	ldr	r6, [r1, #16]
 800902a:	4607      	mov	r7, r0
 800902c:	4698      	mov	r8, r3
 800902e:	460c      	mov	r4, r1
 8009030:	f101 0014 	add.w	r0, r1, #20
 8009034:	2300      	movs	r3, #0
 8009036:	6805      	ldr	r5, [r0, #0]
 8009038:	b2a9      	uxth	r1, r5
 800903a:	fb02 8101 	mla	r1, r2, r1, r8
 800903e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009042:	0c2d      	lsrs	r5, r5, #16
 8009044:	fb02 c505 	mla	r5, r2, r5, ip
 8009048:	b289      	uxth	r1, r1
 800904a:	3301      	adds	r3, #1
 800904c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009050:	429e      	cmp	r6, r3
 8009052:	f840 1b04 	str.w	r1, [r0], #4
 8009056:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800905a:	dcec      	bgt.n	8009036 <__multadd+0x12>
 800905c:	f1b8 0f00 	cmp.w	r8, #0
 8009060:	d022      	beq.n	80090a8 <__multadd+0x84>
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	42b3      	cmp	r3, r6
 8009066:	dc19      	bgt.n	800909c <__multadd+0x78>
 8009068:	6861      	ldr	r1, [r4, #4]
 800906a:	4638      	mov	r0, r7
 800906c:	3101      	adds	r1, #1
 800906e:	f7ff ff77 	bl	8008f60 <_Balloc>
 8009072:	4605      	mov	r5, r0
 8009074:	b928      	cbnz	r0, 8009082 <__multadd+0x5e>
 8009076:	4602      	mov	r2, r0
 8009078:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <__multadd+0x8c>)
 800907a:	480e      	ldr	r0, [pc, #56]	; (80090b4 <__multadd+0x90>)
 800907c:	21b5      	movs	r1, #181	; 0xb5
 800907e:	f000 fbb7 	bl	80097f0 <__assert_func>
 8009082:	6922      	ldr	r2, [r4, #16]
 8009084:	3202      	adds	r2, #2
 8009086:	f104 010c 	add.w	r1, r4, #12
 800908a:	0092      	lsls	r2, r2, #2
 800908c:	300c      	adds	r0, #12
 800908e:	f7fe fc63 	bl	8007958 <memcpy>
 8009092:	4621      	mov	r1, r4
 8009094:	4638      	mov	r0, r7
 8009096:	f7ff ffa3 	bl	8008fe0 <_Bfree>
 800909a:	462c      	mov	r4, r5
 800909c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80090a0:	3601      	adds	r6, #1
 80090a2:	f8c3 8014 	str.w	r8, [r3, #20]
 80090a6:	6126      	str	r6, [r4, #16]
 80090a8:	4620      	mov	r0, r4
 80090aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ae:	bf00      	nop
 80090b0:	0800aabb 	.word	0x0800aabb
 80090b4:	0800aacc 	.word	0x0800aacc

080090b8 <__hi0bits>:
 80090b8:	0c03      	lsrs	r3, r0, #16
 80090ba:	041b      	lsls	r3, r3, #16
 80090bc:	b9d3      	cbnz	r3, 80090f4 <__hi0bits+0x3c>
 80090be:	0400      	lsls	r0, r0, #16
 80090c0:	2310      	movs	r3, #16
 80090c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090c6:	bf04      	itt	eq
 80090c8:	0200      	lsleq	r0, r0, #8
 80090ca:	3308      	addeq	r3, #8
 80090cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090d0:	bf04      	itt	eq
 80090d2:	0100      	lsleq	r0, r0, #4
 80090d4:	3304      	addeq	r3, #4
 80090d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090da:	bf04      	itt	eq
 80090dc:	0080      	lsleq	r0, r0, #2
 80090de:	3302      	addeq	r3, #2
 80090e0:	2800      	cmp	r0, #0
 80090e2:	db05      	blt.n	80090f0 <__hi0bits+0x38>
 80090e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090e8:	f103 0301 	add.w	r3, r3, #1
 80090ec:	bf08      	it	eq
 80090ee:	2320      	moveq	r3, #32
 80090f0:	4618      	mov	r0, r3
 80090f2:	4770      	bx	lr
 80090f4:	2300      	movs	r3, #0
 80090f6:	e7e4      	b.n	80090c2 <__hi0bits+0xa>

080090f8 <__lo0bits>:
 80090f8:	6803      	ldr	r3, [r0, #0]
 80090fa:	f013 0207 	ands.w	r2, r3, #7
 80090fe:	4601      	mov	r1, r0
 8009100:	d00b      	beq.n	800911a <__lo0bits+0x22>
 8009102:	07da      	lsls	r2, r3, #31
 8009104:	d424      	bmi.n	8009150 <__lo0bits+0x58>
 8009106:	0798      	lsls	r0, r3, #30
 8009108:	bf49      	itett	mi
 800910a:	085b      	lsrmi	r3, r3, #1
 800910c:	089b      	lsrpl	r3, r3, #2
 800910e:	2001      	movmi	r0, #1
 8009110:	600b      	strmi	r3, [r1, #0]
 8009112:	bf5c      	itt	pl
 8009114:	600b      	strpl	r3, [r1, #0]
 8009116:	2002      	movpl	r0, #2
 8009118:	4770      	bx	lr
 800911a:	b298      	uxth	r0, r3
 800911c:	b9b0      	cbnz	r0, 800914c <__lo0bits+0x54>
 800911e:	0c1b      	lsrs	r3, r3, #16
 8009120:	2010      	movs	r0, #16
 8009122:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009126:	bf04      	itt	eq
 8009128:	0a1b      	lsreq	r3, r3, #8
 800912a:	3008      	addeq	r0, #8
 800912c:	071a      	lsls	r2, r3, #28
 800912e:	bf04      	itt	eq
 8009130:	091b      	lsreq	r3, r3, #4
 8009132:	3004      	addeq	r0, #4
 8009134:	079a      	lsls	r2, r3, #30
 8009136:	bf04      	itt	eq
 8009138:	089b      	lsreq	r3, r3, #2
 800913a:	3002      	addeq	r0, #2
 800913c:	07da      	lsls	r2, r3, #31
 800913e:	d403      	bmi.n	8009148 <__lo0bits+0x50>
 8009140:	085b      	lsrs	r3, r3, #1
 8009142:	f100 0001 	add.w	r0, r0, #1
 8009146:	d005      	beq.n	8009154 <__lo0bits+0x5c>
 8009148:	600b      	str	r3, [r1, #0]
 800914a:	4770      	bx	lr
 800914c:	4610      	mov	r0, r2
 800914e:	e7e8      	b.n	8009122 <__lo0bits+0x2a>
 8009150:	2000      	movs	r0, #0
 8009152:	4770      	bx	lr
 8009154:	2020      	movs	r0, #32
 8009156:	4770      	bx	lr

08009158 <__i2b>:
 8009158:	b510      	push	{r4, lr}
 800915a:	460c      	mov	r4, r1
 800915c:	2101      	movs	r1, #1
 800915e:	f7ff feff 	bl	8008f60 <_Balloc>
 8009162:	4602      	mov	r2, r0
 8009164:	b928      	cbnz	r0, 8009172 <__i2b+0x1a>
 8009166:	4b05      	ldr	r3, [pc, #20]	; (800917c <__i2b+0x24>)
 8009168:	4805      	ldr	r0, [pc, #20]	; (8009180 <__i2b+0x28>)
 800916a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800916e:	f000 fb3f 	bl	80097f0 <__assert_func>
 8009172:	2301      	movs	r3, #1
 8009174:	6144      	str	r4, [r0, #20]
 8009176:	6103      	str	r3, [r0, #16]
 8009178:	bd10      	pop	{r4, pc}
 800917a:	bf00      	nop
 800917c:	0800aabb 	.word	0x0800aabb
 8009180:	0800aacc 	.word	0x0800aacc

08009184 <__multiply>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	4614      	mov	r4, r2
 800918a:	690a      	ldr	r2, [r1, #16]
 800918c:	6923      	ldr	r3, [r4, #16]
 800918e:	429a      	cmp	r2, r3
 8009190:	bfb8      	it	lt
 8009192:	460b      	movlt	r3, r1
 8009194:	460d      	mov	r5, r1
 8009196:	bfbc      	itt	lt
 8009198:	4625      	movlt	r5, r4
 800919a:	461c      	movlt	r4, r3
 800919c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80091a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091a4:	68ab      	ldr	r3, [r5, #8]
 80091a6:	6869      	ldr	r1, [r5, #4]
 80091a8:	eb0a 0709 	add.w	r7, sl, r9
 80091ac:	42bb      	cmp	r3, r7
 80091ae:	b085      	sub	sp, #20
 80091b0:	bfb8      	it	lt
 80091b2:	3101      	addlt	r1, #1
 80091b4:	f7ff fed4 	bl	8008f60 <_Balloc>
 80091b8:	b930      	cbnz	r0, 80091c8 <__multiply+0x44>
 80091ba:	4602      	mov	r2, r0
 80091bc:	4b42      	ldr	r3, [pc, #264]	; (80092c8 <__multiply+0x144>)
 80091be:	4843      	ldr	r0, [pc, #268]	; (80092cc <__multiply+0x148>)
 80091c0:	f240 115d 	movw	r1, #349	; 0x15d
 80091c4:	f000 fb14 	bl	80097f0 <__assert_func>
 80091c8:	f100 0614 	add.w	r6, r0, #20
 80091cc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80091d0:	4633      	mov	r3, r6
 80091d2:	2200      	movs	r2, #0
 80091d4:	4543      	cmp	r3, r8
 80091d6:	d31e      	bcc.n	8009216 <__multiply+0x92>
 80091d8:	f105 0c14 	add.w	ip, r5, #20
 80091dc:	f104 0314 	add.w	r3, r4, #20
 80091e0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80091e4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80091e8:	9202      	str	r2, [sp, #8]
 80091ea:	ebac 0205 	sub.w	r2, ip, r5
 80091ee:	3a15      	subs	r2, #21
 80091f0:	f022 0203 	bic.w	r2, r2, #3
 80091f4:	3204      	adds	r2, #4
 80091f6:	f105 0115 	add.w	r1, r5, #21
 80091fa:	458c      	cmp	ip, r1
 80091fc:	bf38      	it	cc
 80091fe:	2204      	movcc	r2, #4
 8009200:	9201      	str	r2, [sp, #4]
 8009202:	9a02      	ldr	r2, [sp, #8]
 8009204:	9303      	str	r3, [sp, #12]
 8009206:	429a      	cmp	r2, r3
 8009208:	d808      	bhi.n	800921c <__multiply+0x98>
 800920a:	2f00      	cmp	r7, #0
 800920c:	dc55      	bgt.n	80092ba <__multiply+0x136>
 800920e:	6107      	str	r7, [r0, #16]
 8009210:	b005      	add	sp, #20
 8009212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009216:	f843 2b04 	str.w	r2, [r3], #4
 800921a:	e7db      	b.n	80091d4 <__multiply+0x50>
 800921c:	f8b3 a000 	ldrh.w	sl, [r3]
 8009220:	f1ba 0f00 	cmp.w	sl, #0
 8009224:	d020      	beq.n	8009268 <__multiply+0xe4>
 8009226:	f105 0e14 	add.w	lr, r5, #20
 800922a:	46b1      	mov	r9, r6
 800922c:	2200      	movs	r2, #0
 800922e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009232:	f8d9 b000 	ldr.w	fp, [r9]
 8009236:	b2a1      	uxth	r1, r4
 8009238:	fa1f fb8b 	uxth.w	fp, fp
 800923c:	fb0a b101 	mla	r1, sl, r1, fp
 8009240:	4411      	add	r1, r2
 8009242:	f8d9 2000 	ldr.w	r2, [r9]
 8009246:	0c24      	lsrs	r4, r4, #16
 8009248:	0c12      	lsrs	r2, r2, #16
 800924a:	fb0a 2404 	mla	r4, sl, r4, r2
 800924e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009252:	b289      	uxth	r1, r1
 8009254:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009258:	45f4      	cmp	ip, lr
 800925a:	f849 1b04 	str.w	r1, [r9], #4
 800925e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009262:	d8e4      	bhi.n	800922e <__multiply+0xaa>
 8009264:	9901      	ldr	r1, [sp, #4]
 8009266:	5072      	str	r2, [r6, r1]
 8009268:	9a03      	ldr	r2, [sp, #12]
 800926a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800926e:	3304      	adds	r3, #4
 8009270:	f1b9 0f00 	cmp.w	r9, #0
 8009274:	d01f      	beq.n	80092b6 <__multiply+0x132>
 8009276:	6834      	ldr	r4, [r6, #0]
 8009278:	f105 0114 	add.w	r1, r5, #20
 800927c:	46b6      	mov	lr, r6
 800927e:	f04f 0a00 	mov.w	sl, #0
 8009282:	880a      	ldrh	r2, [r1, #0]
 8009284:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009288:	fb09 b202 	mla	r2, r9, r2, fp
 800928c:	4492      	add	sl, r2
 800928e:	b2a4      	uxth	r4, r4
 8009290:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009294:	f84e 4b04 	str.w	r4, [lr], #4
 8009298:	f851 4b04 	ldr.w	r4, [r1], #4
 800929c:	f8be 2000 	ldrh.w	r2, [lr]
 80092a0:	0c24      	lsrs	r4, r4, #16
 80092a2:	fb09 2404 	mla	r4, r9, r4, r2
 80092a6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80092aa:	458c      	cmp	ip, r1
 80092ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092b0:	d8e7      	bhi.n	8009282 <__multiply+0xfe>
 80092b2:	9a01      	ldr	r2, [sp, #4]
 80092b4:	50b4      	str	r4, [r6, r2]
 80092b6:	3604      	adds	r6, #4
 80092b8:	e7a3      	b.n	8009202 <__multiply+0x7e>
 80092ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1a5      	bne.n	800920e <__multiply+0x8a>
 80092c2:	3f01      	subs	r7, #1
 80092c4:	e7a1      	b.n	800920a <__multiply+0x86>
 80092c6:	bf00      	nop
 80092c8:	0800aabb 	.word	0x0800aabb
 80092cc:	0800aacc 	.word	0x0800aacc

080092d0 <__pow5mult>:
 80092d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092d4:	4615      	mov	r5, r2
 80092d6:	f012 0203 	ands.w	r2, r2, #3
 80092da:	4606      	mov	r6, r0
 80092dc:	460f      	mov	r7, r1
 80092de:	d007      	beq.n	80092f0 <__pow5mult+0x20>
 80092e0:	4c25      	ldr	r4, [pc, #148]	; (8009378 <__pow5mult+0xa8>)
 80092e2:	3a01      	subs	r2, #1
 80092e4:	2300      	movs	r3, #0
 80092e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092ea:	f7ff fe9b 	bl	8009024 <__multadd>
 80092ee:	4607      	mov	r7, r0
 80092f0:	10ad      	asrs	r5, r5, #2
 80092f2:	d03d      	beq.n	8009370 <__pow5mult+0xa0>
 80092f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80092f6:	b97c      	cbnz	r4, 8009318 <__pow5mult+0x48>
 80092f8:	2010      	movs	r0, #16
 80092fa:	f7ff fe29 	bl	8008f50 <malloc>
 80092fe:	4602      	mov	r2, r0
 8009300:	6270      	str	r0, [r6, #36]	; 0x24
 8009302:	b928      	cbnz	r0, 8009310 <__pow5mult+0x40>
 8009304:	4b1d      	ldr	r3, [pc, #116]	; (800937c <__pow5mult+0xac>)
 8009306:	481e      	ldr	r0, [pc, #120]	; (8009380 <__pow5mult+0xb0>)
 8009308:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800930c:	f000 fa70 	bl	80097f0 <__assert_func>
 8009310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009314:	6004      	str	r4, [r0, #0]
 8009316:	60c4      	str	r4, [r0, #12]
 8009318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800931c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009320:	b94c      	cbnz	r4, 8009336 <__pow5mult+0x66>
 8009322:	f240 2171 	movw	r1, #625	; 0x271
 8009326:	4630      	mov	r0, r6
 8009328:	f7ff ff16 	bl	8009158 <__i2b>
 800932c:	2300      	movs	r3, #0
 800932e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009332:	4604      	mov	r4, r0
 8009334:	6003      	str	r3, [r0, #0]
 8009336:	f04f 0900 	mov.w	r9, #0
 800933a:	07eb      	lsls	r3, r5, #31
 800933c:	d50a      	bpl.n	8009354 <__pow5mult+0x84>
 800933e:	4639      	mov	r1, r7
 8009340:	4622      	mov	r2, r4
 8009342:	4630      	mov	r0, r6
 8009344:	f7ff ff1e 	bl	8009184 <__multiply>
 8009348:	4639      	mov	r1, r7
 800934a:	4680      	mov	r8, r0
 800934c:	4630      	mov	r0, r6
 800934e:	f7ff fe47 	bl	8008fe0 <_Bfree>
 8009352:	4647      	mov	r7, r8
 8009354:	106d      	asrs	r5, r5, #1
 8009356:	d00b      	beq.n	8009370 <__pow5mult+0xa0>
 8009358:	6820      	ldr	r0, [r4, #0]
 800935a:	b938      	cbnz	r0, 800936c <__pow5mult+0x9c>
 800935c:	4622      	mov	r2, r4
 800935e:	4621      	mov	r1, r4
 8009360:	4630      	mov	r0, r6
 8009362:	f7ff ff0f 	bl	8009184 <__multiply>
 8009366:	6020      	str	r0, [r4, #0]
 8009368:	f8c0 9000 	str.w	r9, [r0]
 800936c:	4604      	mov	r4, r0
 800936e:	e7e4      	b.n	800933a <__pow5mult+0x6a>
 8009370:	4638      	mov	r0, r7
 8009372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009376:	bf00      	nop
 8009378:	0800ac20 	.word	0x0800ac20
 800937c:	0800aa45 	.word	0x0800aa45
 8009380:	0800aacc 	.word	0x0800aacc

08009384 <__lshift>:
 8009384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	460c      	mov	r4, r1
 800938a:	6849      	ldr	r1, [r1, #4]
 800938c:	6923      	ldr	r3, [r4, #16]
 800938e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009392:	68a3      	ldr	r3, [r4, #8]
 8009394:	4607      	mov	r7, r0
 8009396:	4691      	mov	r9, r2
 8009398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800939c:	f108 0601 	add.w	r6, r8, #1
 80093a0:	42b3      	cmp	r3, r6
 80093a2:	db0b      	blt.n	80093bc <__lshift+0x38>
 80093a4:	4638      	mov	r0, r7
 80093a6:	f7ff fddb 	bl	8008f60 <_Balloc>
 80093aa:	4605      	mov	r5, r0
 80093ac:	b948      	cbnz	r0, 80093c2 <__lshift+0x3e>
 80093ae:	4602      	mov	r2, r0
 80093b0:	4b28      	ldr	r3, [pc, #160]	; (8009454 <__lshift+0xd0>)
 80093b2:	4829      	ldr	r0, [pc, #164]	; (8009458 <__lshift+0xd4>)
 80093b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093b8:	f000 fa1a 	bl	80097f0 <__assert_func>
 80093bc:	3101      	adds	r1, #1
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	e7ee      	b.n	80093a0 <__lshift+0x1c>
 80093c2:	2300      	movs	r3, #0
 80093c4:	f100 0114 	add.w	r1, r0, #20
 80093c8:	f100 0210 	add.w	r2, r0, #16
 80093cc:	4618      	mov	r0, r3
 80093ce:	4553      	cmp	r3, sl
 80093d0:	db33      	blt.n	800943a <__lshift+0xb6>
 80093d2:	6920      	ldr	r0, [r4, #16]
 80093d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093d8:	f104 0314 	add.w	r3, r4, #20
 80093dc:	f019 091f 	ands.w	r9, r9, #31
 80093e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093e8:	d02b      	beq.n	8009442 <__lshift+0xbe>
 80093ea:	f1c9 0e20 	rsb	lr, r9, #32
 80093ee:	468a      	mov	sl, r1
 80093f0:	2200      	movs	r2, #0
 80093f2:	6818      	ldr	r0, [r3, #0]
 80093f4:	fa00 f009 	lsl.w	r0, r0, r9
 80093f8:	4302      	orrs	r2, r0
 80093fa:	f84a 2b04 	str.w	r2, [sl], #4
 80093fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009402:	459c      	cmp	ip, r3
 8009404:	fa22 f20e 	lsr.w	r2, r2, lr
 8009408:	d8f3      	bhi.n	80093f2 <__lshift+0x6e>
 800940a:	ebac 0304 	sub.w	r3, ip, r4
 800940e:	3b15      	subs	r3, #21
 8009410:	f023 0303 	bic.w	r3, r3, #3
 8009414:	3304      	adds	r3, #4
 8009416:	f104 0015 	add.w	r0, r4, #21
 800941a:	4584      	cmp	ip, r0
 800941c:	bf38      	it	cc
 800941e:	2304      	movcc	r3, #4
 8009420:	50ca      	str	r2, [r1, r3]
 8009422:	b10a      	cbz	r2, 8009428 <__lshift+0xa4>
 8009424:	f108 0602 	add.w	r6, r8, #2
 8009428:	3e01      	subs	r6, #1
 800942a:	4638      	mov	r0, r7
 800942c:	612e      	str	r6, [r5, #16]
 800942e:	4621      	mov	r1, r4
 8009430:	f7ff fdd6 	bl	8008fe0 <_Bfree>
 8009434:	4628      	mov	r0, r5
 8009436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943a:	f842 0f04 	str.w	r0, [r2, #4]!
 800943e:	3301      	adds	r3, #1
 8009440:	e7c5      	b.n	80093ce <__lshift+0x4a>
 8009442:	3904      	subs	r1, #4
 8009444:	f853 2b04 	ldr.w	r2, [r3], #4
 8009448:	f841 2f04 	str.w	r2, [r1, #4]!
 800944c:	459c      	cmp	ip, r3
 800944e:	d8f9      	bhi.n	8009444 <__lshift+0xc0>
 8009450:	e7ea      	b.n	8009428 <__lshift+0xa4>
 8009452:	bf00      	nop
 8009454:	0800aabb 	.word	0x0800aabb
 8009458:	0800aacc 	.word	0x0800aacc

0800945c <__mcmp>:
 800945c:	b530      	push	{r4, r5, lr}
 800945e:	6902      	ldr	r2, [r0, #16]
 8009460:	690c      	ldr	r4, [r1, #16]
 8009462:	1b12      	subs	r2, r2, r4
 8009464:	d10e      	bne.n	8009484 <__mcmp+0x28>
 8009466:	f100 0314 	add.w	r3, r0, #20
 800946a:	3114      	adds	r1, #20
 800946c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009470:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009474:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009478:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800947c:	42a5      	cmp	r5, r4
 800947e:	d003      	beq.n	8009488 <__mcmp+0x2c>
 8009480:	d305      	bcc.n	800948e <__mcmp+0x32>
 8009482:	2201      	movs	r2, #1
 8009484:	4610      	mov	r0, r2
 8009486:	bd30      	pop	{r4, r5, pc}
 8009488:	4283      	cmp	r3, r0
 800948a:	d3f3      	bcc.n	8009474 <__mcmp+0x18>
 800948c:	e7fa      	b.n	8009484 <__mcmp+0x28>
 800948e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009492:	e7f7      	b.n	8009484 <__mcmp+0x28>

08009494 <__mdiff>:
 8009494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	460c      	mov	r4, r1
 800949a:	4606      	mov	r6, r0
 800949c:	4611      	mov	r1, r2
 800949e:	4620      	mov	r0, r4
 80094a0:	4617      	mov	r7, r2
 80094a2:	f7ff ffdb 	bl	800945c <__mcmp>
 80094a6:	1e05      	subs	r5, r0, #0
 80094a8:	d110      	bne.n	80094cc <__mdiff+0x38>
 80094aa:	4629      	mov	r1, r5
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff fd57 	bl	8008f60 <_Balloc>
 80094b2:	b930      	cbnz	r0, 80094c2 <__mdiff+0x2e>
 80094b4:	4b39      	ldr	r3, [pc, #228]	; (800959c <__mdiff+0x108>)
 80094b6:	4602      	mov	r2, r0
 80094b8:	f240 2132 	movw	r1, #562	; 0x232
 80094bc:	4838      	ldr	r0, [pc, #224]	; (80095a0 <__mdiff+0x10c>)
 80094be:	f000 f997 	bl	80097f0 <__assert_func>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80094c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094cc:	bfa4      	itt	ge
 80094ce:	463b      	movge	r3, r7
 80094d0:	4627      	movge	r7, r4
 80094d2:	4630      	mov	r0, r6
 80094d4:	6879      	ldr	r1, [r7, #4]
 80094d6:	bfa6      	itte	ge
 80094d8:	461c      	movge	r4, r3
 80094da:	2500      	movge	r5, #0
 80094dc:	2501      	movlt	r5, #1
 80094de:	f7ff fd3f 	bl	8008f60 <_Balloc>
 80094e2:	b920      	cbnz	r0, 80094ee <__mdiff+0x5a>
 80094e4:	4b2d      	ldr	r3, [pc, #180]	; (800959c <__mdiff+0x108>)
 80094e6:	4602      	mov	r2, r0
 80094e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80094ec:	e7e6      	b.n	80094bc <__mdiff+0x28>
 80094ee:	693e      	ldr	r6, [r7, #16]
 80094f0:	60c5      	str	r5, [r0, #12]
 80094f2:	6925      	ldr	r5, [r4, #16]
 80094f4:	f107 0114 	add.w	r1, r7, #20
 80094f8:	f104 0914 	add.w	r9, r4, #20
 80094fc:	f100 0e14 	add.w	lr, r0, #20
 8009500:	f107 0210 	add.w	r2, r7, #16
 8009504:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009508:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800950c:	46f2      	mov	sl, lr
 800950e:	2700      	movs	r7, #0
 8009510:	f859 3b04 	ldr.w	r3, [r9], #4
 8009514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009518:	fa1f f883 	uxth.w	r8, r3
 800951c:	fa17 f78b 	uxtah	r7, r7, fp
 8009520:	0c1b      	lsrs	r3, r3, #16
 8009522:	eba7 0808 	sub.w	r8, r7, r8
 8009526:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800952a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800952e:	fa1f f888 	uxth.w	r8, r8
 8009532:	141f      	asrs	r7, r3, #16
 8009534:	454d      	cmp	r5, r9
 8009536:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800953a:	f84a 3b04 	str.w	r3, [sl], #4
 800953e:	d8e7      	bhi.n	8009510 <__mdiff+0x7c>
 8009540:	1b2b      	subs	r3, r5, r4
 8009542:	3b15      	subs	r3, #21
 8009544:	f023 0303 	bic.w	r3, r3, #3
 8009548:	3304      	adds	r3, #4
 800954a:	3415      	adds	r4, #21
 800954c:	42a5      	cmp	r5, r4
 800954e:	bf38      	it	cc
 8009550:	2304      	movcc	r3, #4
 8009552:	4419      	add	r1, r3
 8009554:	4473      	add	r3, lr
 8009556:	469e      	mov	lr, r3
 8009558:	460d      	mov	r5, r1
 800955a:	4565      	cmp	r5, ip
 800955c:	d30e      	bcc.n	800957c <__mdiff+0xe8>
 800955e:	f10c 0203 	add.w	r2, ip, #3
 8009562:	1a52      	subs	r2, r2, r1
 8009564:	f022 0203 	bic.w	r2, r2, #3
 8009568:	3903      	subs	r1, #3
 800956a:	458c      	cmp	ip, r1
 800956c:	bf38      	it	cc
 800956e:	2200      	movcc	r2, #0
 8009570:	441a      	add	r2, r3
 8009572:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009576:	b17b      	cbz	r3, 8009598 <__mdiff+0x104>
 8009578:	6106      	str	r6, [r0, #16]
 800957a:	e7a5      	b.n	80094c8 <__mdiff+0x34>
 800957c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009580:	fa17 f488 	uxtah	r4, r7, r8
 8009584:	1422      	asrs	r2, r4, #16
 8009586:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800958a:	b2a4      	uxth	r4, r4
 800958c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009590:	f84e 4b04 	str.w	r4, [lr], #4
 8009594:	1417      	asrs	r7, r2, #16
 8009596:	e7e0      	b.n	800955a <__mdiff+0xc6>
 8009598:	3e01      	subs	r6, #1
 800959a:	e7ea      	b.n	8009572 <__mdiff+0xde>
 800959c:	0800aabb 	.word	0x0800aabb
 80095a0:	0800aacc 	.word	0x0800aacc

080095a4 <__d2b>:
 80095a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095a8:	4689      	mov	r9, r1
 80095aa:	2101      	movs	r1, #1
 80095ac:	ec57 6b10 	vmov	r6, r7, d0
 80095b0:	4690      	mov	r8, r2
 80095b2:	f7ff fcd5 	bl	8008f60 <_Balloc>
 80095b6:	4604      	mov	r4, r0
 80095b8:	b930      	cbnz	r0, 80095c8 <__d2b+0x24>
 80095ba:	4602      	mov	r2, r0
 80095bc:	4b25      	ldr	r3, [pc, #148]	; (8009654 <__d2b+0xb0>)
 80095be:	4826      	ldr	r0, [pc, #152]	; (8009658 <__d2b+0xb4>)
 80095c0:	f240 310a 	movw	r1, #778	; 0x30a
 80095c4:	f000 f914 	bl	80097f0 <__assert_func>
 80095c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80095cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095d0:	bb35      	cbnz	r5, 8009620 <__d2b+0x7c>
 80095d2:	2e00      	cmp	r6, #0
 80095d4:	9301      	str	r3, [sp, #4]
 80095d6:	d028      	beq.n	800962a <__d2b+0x86>
 80095d8:	4668      	mov	r0, sp
 80095da:	9600      	str	r6, [sp, #0]
 80095dc:	f7ff fd8c 	bl	80090f8 <__lo0bits>
 80095e0:	9900      	ldr	r1, [sp, #0]
 80095e2:	b300      	cbz	r0, 8009626 <__d2b+0x82>
 80095e4:	9a01      	ldr	r2, [sp, #4]
 80095e6:	f1c0 0320 	rsb	r3, r0, #32
 80095ea:	fa02 f303 	lsl.w	r3, r2, r3
 80095ee:	430b      	orrs	r3, r1
 80095f0:	40c2      	lsrs	r2, r0
 80095f2:	6163      	str	r3, [r4, #20]
 80095f4:	9201      	str	r2, [sp, #4]
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	61a3      	str	r3, [r4, #24]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bf14      	ite	ne
 80095fe:	2202      	movne	r2, #2
 8009600:	2201      	moveq	r2, #1
 8009602:	6122      	str	r2, [r4, #16]
 8009604:	b1d5      	cbz	r5, 800963c <__d2b+0x98>
 8009606:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800960a:	4405      	add	r5, r0
 800960c:	f8c9 5000 	str.w	r5, [r9]
 8009610:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009614:	f8c8 0000 	str.w	r0, [r8]
 8009618:	4620      	mov	r0, r4
 800961a:	b003      	add	sp, #12
 800961c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009624:	e7d5      	b.n	80095d2 <__d2b+0x2e>
 8009626:	6161      	str	r1, [r4, #20]
 8009628:	e7e5      	b.n	80095f6 <__d2b+0x52>
 800962a:	a801      	add	r0, sp, #4
 800962c:	f7ff fd64 	bl	80090f8 <__lo0bits>
 8009630:	9b01      	ldr	r3, [sp, #4]
 8009632:	6163      	str	r3, [r4, #20]
 8009634:	2201      	movs	r2, #1
 8009636:	6122      	str	r2, [r4, #16]
 8009638:	3020      	adds	r0, #32
 800963a:	e7e3      	b.n	8009604 <__d2b+0x60>
 800963c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009640:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009644:	f8c9 0000 	str.w	r0, [r9]
 8009648:	6918      	ldr	r0, [r3, #16]
 800964a:	f7ff fd35 	bl	80090b8 <__hi0bits>
 800964e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009652:	e7df      	b.n	8009614 <__d2b+0x70>
 8009654:	0800aabb 	.word	0x0800aabb
 8009658:	0800aacc 	.word	0x0800aacc

0800965c <_calloc_r>:
 800965c:	b513      	push	{r0, r1, r4, lr}
 800965e:	434a      	muls	r2, r1
 8009660:	4611      	mov	r1, r2
 8009662:	9201      	str	r2, [sp, #4]
 8009664:	f000 f85a 	bl	800971c <_malloc_r>
 8009668:	4604      	mov	r4, r0
 800966a:	b118      	cbz	r0, 8009674 <_calloc_r+0x18>
 800966c:	9a01      	ldr	r2, [sp, #4]
 800966e:	2100      	movs	r1, #0
 8009670:	f7fe f980 	bl	8007974 <memset>
 8009674:	4620      	mov	r0, r4
 8009676:	b002      	add	sp, #8
 8009678:	bd10      	pop	{r4, pc}
	...

0800967c <_free_r>:
 800967c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800967e:	2900      	cmp	r1, #0
 8009680:	d048      	beq.n	8009714 <_free_r+0x98>
 8009682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009686:	9001      	str	r0, [sp, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f1a1 0404 	sub.w	r4, r1, #4
 800968e:	bfb8      	it	lt
 8009690:	18e4      	addlt	r4, r4, r3
 8009692:	f000 f8ef 	bl	8009874 <__malloc_lock>
 8009696:	4a20      	ldr	r2, [pc, #128]	; (8009718 <_free_r+0x9c>)
 8009698:	9801      	ldr	r0, [sp, #4]
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	4615      	mov	r5, r2
 800969e:	b933      	cbnz	r3, 80096ae <_free_r+0x32>
 80096a0:	6063      	str	r3, [r4, #4]
 80096a2:	6014      	str	r4, [r2, #0]
 80096a4:	b003      	add	sp, #12
 80096a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096aa:	f000 b8e9 	b.w	8009880 <__malloc_unlock>
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	d90b      	bls.n	80096ca <_free_r+0x4e>
 80096b2:	6821      	ldr	r1, [r4, #0]
 80096b4:	1862      	adds	r2, r4, r1
 80096b6:	4293      	cmp	r3, r2
 80096b8:	bf04      	itt	eq
 80096ba:	681a      	ldreq	r2, [r3, #0]
 80096bc:	685b      	ldreq	r3, [r3, #4]
 80096be:	6063      	str	r3, [r4, #4]
 80096c0:	bf04      	itt	eq
 80096c2:	1852      	addeq	r2, r2, r1
 80096c4:	6022      	streq	r2, [r4, #0]
 80096c6:	602c      	str	r4, [r5, #0]
 80096c8:	e7ec      	b.n	80096a4 <_free_r+0x28>
 80096ca:	461a      	mov	r2, r3
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	b10b      	cbz	r3, 80096d4 <_free_r+0x58>
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	d9fa      	bls.n	80096ca <_free_r+0x4e>
 80096d4:	6811      	ldr	r1, [r2, #0]
 80096d6:	1855      	adds	r5, r2, r1
 80096d8:	42a5      	cmp	r5, r4
 80096da:	d10b      	bne.n	80096f4 <_free_r+0x78>
 80096dc:	6824      	ldr	r4, [r4, #0]
 80096de:	4421      	add	r1, r4
 80096e0:	1854      	adds	r4, r2, r1
 80096e2:	42a3      	cmp	r3, r4
 80096e4:	6011      	str	r1, [r2, #0]
 80096e6:	d1dd      	bne.n	80096a4 <_free_r+0x28>
 80096e8:	681c      	ldr	r4, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	6053      	str	r3, [r2, #4]
 80096ee:	4421      	add	r1, r4
 80096f0:	6011      	str	r1, [r2, #0]
 80096f2:	e7d7      	b.n	80096a4 <_free_r+0x28>
 80096f4:	d902      	bls.n	80096fc <_free_r+0x80>
 80096f6:	230c      	movs	r3, #12
 80096f8:	6003      	str	r3, [r0, #0]
 80096fa:	e7d3      	b.n	80096a4 <_free_r+0x28>
 80096fc:	6825      	ldr	r5, [r4, #0]
 80096fe:	1961      	adds	r1, r4, r5
 8009700:	428b      	cmp	r3, r1
 8009702:	bf04      	itt	eq
 8009704:	6819      	ldreq	r1, [r3, #0]
 8009706:	685b      	ldreq	r3, [r3, #4]
 8009708:	6063      	str	r3, [r4, #4]
 800970a:	bf04      	itt	eq
 800970c:	1949      	addeq	r1, r1, r5
 800970e:	6021      	streq	r1, [r4, #0]
 8009710:	6054      	str	r4, [r2, #4]
 8009712:	e7c7      	b.n	80096a4 <_free_r+0x28>
 8009714:	b003      	add	sp, #12
 8009716:	bd30      	pop	{r4, r5, pc}
 8009718:	200002d4 	.word	0x200002d4

0800971c <_malloc_r>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	1ccd      	adds	r5, r1, #3
 8009720:	f025 0503 	bic.w	r5, r5, #3
 8009724:	3508      	adds	r5, #8
 8009726:	2d0c      	cmp	r5, #12
 8009728:	bf38      	it	cc
 800972a:	250c      	movcc	r5, #12
 800972c:	2d00      	cmp	r5, #0
 800972e:	4606      	mov	r6, r0
 8009730:	db01      	blt.n	8009736 <_malloc_r+0x1a>
 8009732:	42a9      	cmp	r1, r5
 8009734:	d903      	bls.n	800973e <_malloc_r+0x22>
 8009736:	230c      	movs	r3, #12
 8009738:	6033      	str	r3, [r6, #0]
 800973a:	2000      	movs	r0, #0
 800973c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800973e:	f000 f899 	bl	8009874 <__malloc_lock>
 8009742:	4921      	ldr	r1, [pc, #132]	; (80097c8 <_malloc_r+0xac>)
 8009744:	680a      	ldr	r2, [r1, #0]
 8009746:	4614      	mov	r4, r2
 8009748:	b99c      	cbnz	r4, 8009772 <_malloc_r+0x56>
 800974a:	4f20      	ldr	r7, [pc, #128]	; (80097cc <_malloc_r+0xb0>)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	b923      	cbnz	r3, 800975a <_malloc_r+0x3e>
 8009750:	4621      	mov	r1, r4
 8009752:	4630      	mov	r0, r6
 8009754:	f000 f83c 	bl	80097d0 <_sbrk_r>
 8009758:	6038      	str	r0, [r7, #0]
 800975a:	4629      	mov	r1, r5
 800975c:	4630      	mov	r0, r6
 800975e:	f000 f837 	bl	80097d0 <_sbrk_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	d123      	bne.n	80097ae <_malloc_r+0x92>
 8009766:	230c      	movs	r3, #12
 8009768:	6033      	str	r3, [r6, #0]
 800976a:	4630      	mov	r0, r6
 800976c:	f000 f888 	bl	8009880 <__malloc_unlock>
 8009770:	e7e3      	b.n	800973a <_malloc_r+0x1e>
 8009772:	6823      	ldr	r3, [r4, #0]
 8009774:	1b5b      	subs	r3, r3, r5
 8009776:	d417      	bmi.n	80097a8 <_malloc_r+0x8c>
 8009778:	2b0b      	cmp	r3, #11
 800977a:	d903      	bls.n	8009784 <_malloc_r+0x68>
 800977c:	6023      	str	r3, [r4, #0]
 800977e:	441c      	add	r4, r3
 8009780:	6025      	str	r5, [r4, #0]
 8009782:	e004      	b.n	800978e <_malloc_r+0x72>
 8009784:	6863      	ldr	r3, [r4, #4]
 8009786:	42a2      	cmp	r2, r4
 8009788:	bf0c      	ite	eq
 800978a:	600b      	streq	r3, [r1, #0]
 800978c:	6053      	strne	r3, [r2, #4]
 800978e:	4630      	mov	r0, r6
 8009790:	f000 f876 	bl	8009880 <__malloc_unlock>
 8009794:	f104 000b 	add.w	r0, r4, #11
 8009798:	1d23      	adds	r3, r4, #4
 800979a:	f020 0007 	bic.w	r0, r0, #7
 800979e:	1ac2      	subs	r2, r0, r3
 80097a0:	d0cc      	beq.n	800973c <_malloc_r+0x20>
 80097a2:	1a1b      	subs	r3, r3, r0
 80097a4:	50a3      	str	r3, [r4, r2]
 80097a6:	e7c9      	b.n	800973c <_malloc_r+0x20>
 80097a8:	4622      	mov	r2, r4
 80097aa:	6864      	ldr	r4, [r4, #4]
 80097ac:	e7cc      	b.n	8009748 <_malloc_r+0x2c>
 80097ae:	1cc4      	adds	r4, r0, #3
 80097b0:	f024 0403 	bic.w	r4, r4, #3
 80097b4:	42a0      	cmp	r0, r4
 80097b6:	d0e3      	beq.n	8009780 <_malloc_r+0x64>
 80097b8:	1a21      	subs	r1, r4, r0
 80097ba:	4630      	mov	r0, r6
 80097bc:	f000 f808 	bl	80097d0 <_sbrk_r>
 80097c0:	3001      	adds	r0, #1
 80097c2:	d1dd      	bne.n	8009780 <_malloc_r+0x64>
 80097c4:	e7cf      	b.n	8009766 <_malloc_r+0x4a>
 80097c6:	bf00      	nop
 80097c8:	200002d4 	.word	0x200002d4
 80097cc:	200002d8 	.word	0x200002d8

080097d0 <_sbrk_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d06      	ldr	r5, [pc, #24]	; (80097ec <_sbrk_r+0x1c>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7f9 fc2c 	bl	8003038 <_sbrk>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_sbrk_r+0x1a>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_sbrk_r+0x1a>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20000630 	.word	0x20000630

080097f0 <__assert_func>:
 80097f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097f2:	4614      	mov	r4, r2
 80097f4:	461a      	mov	r2, r3
 80097f6:	4b09      	ldr	r3, [pc, #36]	; (800981c <__assert_func+0x2c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4605      	mov	r5, r0
 80097fc:	68d8      	ldr	r0, [r3, #12]
 80097fe:	b14c      	cbz	r4, 8009814 <__assert_func+0x24>
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <__assert_func+0x30>)
 8009802:	9100      	str	r1, [sp, #0]
 8009804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009808:	4906      	ldr	r1, [pc, #24]	; (8009824 <__assert_func+0x34>)
 800980a:	462b      	mov	r3, r5
 800980c:	f000 f80e 	bl	800982c <fiprintf>
 8009810:	f000 fa64 	bl	8009cdc <abort>
 8009814:	4b04      	ldr	r3, [pc, #16]	; (8009828 <__assert_func+0x38>)
 8009816:	461c      	mov	r4, r3
 8009818:	e7f3      	b.n	8009802 <__assert_func+0x12>
 800981a:	bf00      	nop
 800981c:	2000000c 	.word	0x2000000c
 8009820:	0800ac2c 	.word	0x0800ac2c
 8009824:	0800ac39 	.word	0x0800ac39
 8009828:	0800ac67 	.word	0x0800ac67

0800982c <fiprintf>:
 800982c:	b40e      	push	{r1, r2, r3}
 800982e:	b503      	push	{r0, r1, lr}
 8009830:	4601      	mov	r1, r0
 8009832:	ab03      	add	r3, sp, #12
 8009834:	4805      	ldr	r0, [pc, #20]	; (800984c <fiprintf+0x20>)
 8009836:	f853 2b04 	ldr.w	r2, [r3], #4
 800983a:	6800      	ldr	r0, [r0, #0]
 800983c:	9301      	str	r3, [sp, #4]
 800983e:	f000 f84f 	bl	80098e0 <_vfiprintf_r>
 8009842:	b002      	add	sp, #8
 8009844:	f85d eb04 	ldr.w	lr, [sp], #4
 8009848:	b003      	add	sp, #12
 800984a:	4770      	bx	lr
 800984c:	2000000c 	.word	0x2000000c

08009850 <__ascii_mbtowc>:
 8009850:	b082      	sub	sp, #8
 8009852:	b901      	cbnz	r1, 8009856 <__ascii_mbtowc+0x6>
 8009854:	a901      	add	r1, sp, #4
 8009856:	b142      	cbz	r2, 800986a <__ascii_mbtowc+0x1a>
 8009858:	b14b      	cbz	r3, 800986e <__ascii_mbtowc+0x1e>
 800985a:	7813      	ldrb	r3, [r2, #0]
 800985c:	600b      	str	r3, [r1, #0]
 800985e:	7812      	ldrb	r2, [r2, #0]
 8009860:	1e10      	subs	r0, r2, #0
 8009862:	bf18      	it	ne
 8009864:	2001      	movne	r0, #1
 8009866:	b002      	add	sp, #8
 8009868:	4770      	bx	lr
 800986a:	4610      	mov	r0, r2
 800986c:	e7fb      	b.n	8009866 <__ascii_mbtowc+0x16>
 800986e:	f06f 0001 	mvn.w	r0, #1
 8009872:	e7f8      	b.n	8009866 <__ascii_mbtowc+0x16>

08009874 <__malloc_lock>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__malloc_lock+0x8>)
 8009876:	f000 bbf1 	b.w	800a05c <__retarget_lock_acquire_recursive>
 800987a:	bf00      	nop
 800987c:	20000638 	.word	0x20000638

08009880 <__malloc_unlock>:
 8009880:	4801      	ldr	r0, [pc, #4]	; (8009888 <__malloc_unlock+0x8>)
 8009882:	f000 bbec 	b.w	800a05e <__retarget_lock_release_recursive>
 8009886:	bf00      	nop
 8009888:	20000638 	.word	0x20000638

0800988c <__sfputc_r>:
 800988c:	6893      	ldr	r3, [r2, #8]
 800988e:	3b01      	subs	r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	b410      	push	{r4}
 8009894:	6093      	str	r3, [r2, #8]
 8009896:	da08      	bge.n	80098aa <__sfputc_r+0x1e>
 8009898:	6994      	ldr	r4, [r2, #24]
 800989a:	42a3      	cmp	r3, r4
 800989c:	db01      	blt.n	80098a2 <__sfputc_r+0x16>
 800989e:	290a      	cmp	r1, #10
 80098a0:	d103      	bne.n	80098aa <__sfputc_r+0x1e>
 80098a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098a6:	f000 b94b 	b.w	8009b40 <__swbuf_r>
 80098aa:	6813      	ldr	r3, [r2, #0]
 80098ac:	1c58      	adds	r0, r3, #1
 80098ae:	6010      	str	r0, [r2, #0]
 80098b0:	7019      	strb	r1, [r3, #0]
 80098b2:	4608      	mov	r0, r1
 80098b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <__sfputs_r>:
 80098ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098bc:	4606      	mov	r6, r0
 80098be:	460f      	mov	r7, r1
 80098c0:	4614      	mov	r4, r2
 80098c2:	18d5      	adds	r5, r2, r3
 80098c4:	42ac      	cmp	r4, r5
 80098c6:	d101      	bne.n	80098cc <__sfputs_r+0x12>
 80098c8:	2000      	movs	r0, #0
 80098ca:	e007      	b.n	80098dc <__sfputs_r+0x22>
 80098cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d0:	463a      	mov	r2, r7
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ffda 	bl	800988c <__sfputc_r>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d1f3      	bne.n	80098c4 <__sfputs_r+0xa>
 80098dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098e0 <_vfiprintf_r>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	460d      	mov	r5, r1
 80098e6:	b09d      	sub	sp, #116	; 0x74
 80098e8:	4614      	mov	r4, r2
 80098ea:	4698      	mov	r8, r3
 80098ec:	4606      	mov	r6, r0
 80098ee:	b118      	cbz	r0, 80098f8 <_vfiprintf_r+0x18>
 80098f0:	6983      	ldr	r3, [r0, #24]
 80098f2:	b90b      	cbnz	r3, 80098f8 <_vfiprintf_r+0x18>
 80098f4:	f000 fb14 	bl	8009f20 <__sinit>
 80098f8:	4b89      	ldr	r3, [pc, #548]	; (8009b20 <_vfiprintf_r+0x240>)
 80098fa:	429d      	cmp	r5, r3
 80098fc:	d11b      	bne.n	8009936 <_vfiprintf_r+0x56>
 80098fe:	6875      	ldr	r5, [r6, #4]
 8009900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009902:	07d9      	lsls	r1, r3, #31
 8009904:	d405      	bmi.n	8009912 <_vfiprintf_r+0x32>
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	059a      	lsls	r2, r3, #22
 800990a:	d402      	bmi.n	8009912 <_vfiprintf_r+0x32>
 800990c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800990e:	f000 fba5 	bl	800a05c <__retarget_lock_acquire_recursive>
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	071b      	lsls	r3, r3, #28
 8009916:	d501      	bpl.n	800991c <_vfiprintf_r+0x3c>
 8009918:	692b      	ldr	r3, [r5, #16]
 800991a:	b9eb      	cbnz	r3, 8009958 <_vfiprintf_r+0x78>
 800991c:	4629      	mov	r1, r5
 800991e:	4630      	mov	r0, r6
 8009920:	f000 f96e 	bl	8009c00 <__swsetup_r>
 8009924:	b1c0      	cbz	r0, 8009958 <_vfiprintf_r+0x78>
 8009926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009928:	07dc      	lsls	r4, r3, #31
 800992a:	d50e      	bpl.n	800994a <_vfiprintf_r+0x6a>
 800992c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009930:	b01d      	add	sp, #116	; 0x74
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	4b7b      	ldr	r3, [pc, #492]	; (8009b24 <_vfiprintf_r+0x244>)
 8009938:	429d      	cmp	r5, r3
 800993a:	d101      	bne.n	8009940 <_vfiprintf_r+0x60>
 800993c:	68b5      	ldr	r5, [r6, #8]
 800993e:	e7df      	b.n	8009900 <_vfiprintf_r+0x20>
 8009940:	4b79      	ldr	r3, [pc, #484]	; (8009b28 <_vfiprintf_r+0x248>)
 8009942:	429d      	cmp	r5, r3
 8009944:	bf08      	it	eq
 8009946:	68f5      	ldreq	r5, [r6, #12]
 8009948:	e7da      	b.n	8009900 <_vfiprintf_r+0x20>
 800994a:	89ab      	ldrh	r3, [r5, #12]
 800994c:	0598      	lsls	r0, r3, #22
 800994e:	d4ed      	bmi.n	800992c <_vfiprintf_r+0x4c>
 8009950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009952:	f000 fb84 	bl	800a05e <__retarget_lock_release_recursive>
 8009956:	e7e9      	b.n	800992c <_vfiprintf_r+0x4c>
 8009958:	2300      	movs	r3, #0
 800995a:	9309      	str	r3, [sp, #36]	; 0x24
 800995c:	2320      	movs	r3, #32
 800995e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009962:	f8cd 800c 	str.w	r8, [sp, #12]
 8009966:	2330      	movs	r3, #48	; 0x30
 8009968:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b2c <_vfiprintf_r+0x24c>
 800996c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009970:	f04f 0901 	mov.w	r9, #1
 8009974:	4623      	mov	r3, r4
 8009976:	469a      	mov	sl, r3
 8009978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800997c:	b10a      	cbz	r2, 8009982 <_vfiprintf_r+0xa2>
 800997e:	2a25      	cmp	r2, #37	; 0x25
 8009980:	d1f9      	bne.n	8009976 <_vfiprintf_r+0x96>
 8009982:	ebba 0b04 	subs.w	fp, sl, r4
 8009986:	d00b      	beq.n	80099a0 <_vfiprintf_r+0xc0>
 8009988:	465b      	mov	r3, fp
 800998a:	4622      	mov	r2, r4
 800998c:	4629      	mov	r1, r5
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ff93 	bl	80098ba <__sfputs_r>
 8009994:	3001      	adds	r0, #1
 8009996:	f000 80aa 	beq.w	8009aee <_vfiprintf_r+0x20e>
 800999a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800999c:	445a      	add	r2, fp
 800999e:	9209      	str	r2, [sp, #36]	; 0x24
 80099a0:	f89a 3000 	ldrb.w	r3, [sl]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80a2 	beq.w	8009aee <_vfiprintf_r+0x20e>
 80099aa:	2300      	movs	r3, #0
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b4:	f10a 0a01 	add.w	sl, sl, #1
 80099b8:	9304      	str	r3, [sp, #16]
 80099ba:	9307      	str	r3, [sp, #28]
 80099bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099c0:	931a      	str	r3, [sp, #104]	; 0x68
 80099c2:	4654      	mov	r4, sl
 80099c4:	2205      	movs	r2, #5
 80099c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ca:	4858      	ldr	r0, [pc, #352]	; (8009b2c <_vfiprintf_r+0x24c>)
 80099cc:	f7f6 fc08 	bl	80001e0 <memchr>
 80099d0:	9a04      	ldr	r2, [sp, #16]
 80099d2:	b9d8      	cbnz	r0, 8009a0c <_vfiprintf_r+0x12c>
 80099d4:	06d1      	lsls	r1, r2, #27
 80099d6:	bf44      	itt	mi
 80099d8:	2320      	movmi	r3, #32
 80099da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099de:	0713      	lsls	r3, r2, #28
 80099e0:	bf44      	itt	mi
 80099e2:	232b      	movmi	r3, #43	; 0x2b
 80099e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e8:	f89a 3000 	ldrb.w	r3, [sl]
 80099ec:	2b2a      	cmp	r3, #42	; 0x2a
 80099ee:	d015      	beq.n	8009a1c <_vfiprintf_r+0x13c>
 80099f0:	9a07      	ldr	r2, [sp, #28]
 80099f2:	4654      	mov	r4, sl
 80099f4:	2000      	movs	r0, #0
 80099f6:	f04f 0c0a 	mov.w	ip, #10
 80099fa:	4621      	mov	r1, r4
 80099fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a00:	3b30      	subs	r3, #48	; 0x30
 8009a02:	2b09      	cmp	r3, #9
 8009a04:	d94e      	bls.n	8009aa4 <_vfiprintf_r+0x1c4>
 8009a06:	b1b0      	cbz	r0, 8009a36 <_vfiprintf_r+0x156>
 8009a08:	9207      	str	r2, [sp, #28]
 8009a0a:	e014      	b.n	8009a36 <_vfiprintf_r+0x156>
 8009a0c:	eba0 0308 	sub.w	r3, r0, r8
 8009a10:	fa09 f303 	lsl.w	r3, r9, r3
 8009a14:	4313      	orrs	r3, r2
 8009a16:	9304      	str	r3, [sp, #16]
 8009a18:	46a2      	mov	sl, r4
 8009a1a:	e7d2      	b.n	80099c2 <_vfiprintf_r+0xe2>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	1d19      	adds	r1, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	9103      	str	r1, [sp, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfbb      	ittet	lt
 8009a28:	425b      	neglt	r3, r3
 8009a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8009a2e:	9307      	strge	r3, [sp, #28]
 8009a30:	9307      	strlt	r3, [sp, #28]
 8009a32:	bfb8      	it	lt
 8009a34:	9204      	strlt	r2, [sp, #16]
 8009a36:	7823      	ldrb	r3, [r4, #0]
 8009a38:	2b2e      	cmp	r3, #46	; 0x2e
 8009a3a:	d10c      	bne.n	8009a56 <_vfiprintf_r+0x176>
 8009a3c:	7863      	ldrb	r3, [r4, #1]
 8009a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a40:	d135      	bne.n	8009aae <_vfiprintf_r+0x1ce>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	1d1a      	adds	r2, r3, #4
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	9203      	str	r2, [sp, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfb8      	it	lt
 8009a4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a52:	3402      	adds	r4, #2
 8009a54:	9305      	str	r3, [sp, #20]
 8009a56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b3c <_vfiprintf_r+0x25c>
 8009a5a:	7821      	ldrb	r1, [r4, #0]
 8009a5c:	2203      	movs	r2, #3
 8009a5e:	4650      	mov	r0, sl
 8009a60:	f7f6 fbbe 	bl	80001e0 <memchr>
 8009a64:	b140      	cbz	r0, 8009a78 <_vfiprintf_r+0x198>
 8009a66:	2340      	movs	r3, #64	; 0x40
 8009a68:	eba0 000a 	sub.w	r0, r0, sl
 8009a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8009a70:	9b04      	ldr	r3, [sp, #16]
 8009a72:	4303      	orrs	r3, r0
 8009a74:	3401      	adds	r4, #1
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a7c:	482c      	ldr	r0, [pc, #176]	; (8009b30 <_vfiprintf_r+0x250>)
 8009a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a82:	2206      	movs	r2, #6
 8009a84:	f7f6 fbac 	bl	80001e0 <memchr>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d03f      	beq.n	8009b0c <_vfiprintf_r+0x22c>
 8009a8c:	4b29      	ldr	r3, [pc, #164]	; (8009b34 <_vfiprintf_r+0x254>)
 8009a8e:	bb1b      	cbnz	r3, 8009ad8 <_vfiprintf_r+0x1f8>
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	3307      	adds	r3, #7
 8009a94:	f023 0307 	bic.w	r3, r3, #7
 8009a98:	3308      	adds	r3, #8
 8009a9a:	9303      	str	r3, [sp, #12]
 8009a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9e:	443b      	add	r3, r7
 8009aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa2:	e767      	b.n	8009974 <_vfiprintf_r+0x94>
 8009aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	2001      	movs	r0, #1
 8009aac:	e7a5      	b.n	80099fa <_vfiprintf_r+0x11a>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	3401      	adds	r4, #1
 8009ab2:	9305      	str	r3, [sp, #20]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	f04f 0c0a 	mov.w	ip, #10
 8009aba:	4620      	mov	r0, r4
 8009abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ac0:	3a30      	subs	r2, #48	; 0x30
 8009ac2:	2a09      	cmp	r2, #9
 8009ac4:	d903      	bls.n	8009ace <_vfiprintf_r+0x1ee>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0c5      	beq.n	8009a56 <_vfiprintf_r+0x176>
 8009aca:	9105      	str	r1, [sp, #20]
 8009acc:	e7c3      	b.n	8009a56 <_vfiprintf_r+0x176>
 8009ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e7f0      	b.n	8009aba <_vfiprintf_r+0x1da>
 8009ad8:	ab03      	add	r3, sp, #12
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	462a      	mov	r2, r5
 8009ade:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <_vfiprintf_r+0x258>)
 8009ae0:	a904      	add	r1, sp, #16
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7fd ffee 	bl	8007ac4 <_printf_float>
 8009ae8:	4607      	mov	r7, r0
 8009aea:	1c78      	adds	r0, r7, #1
 8009aec:	d1d6      	bne.n	8009a9c <_vfiprintf_r+0x1bc>
 8009aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af0:	07d9      	lsls	r1, r3, #31
 8009af2:	d405      	bmi.n	8009b00 <_vfiprintf_r+0x220>
 8009af4:	89ab      	ldrh	r3, [r5, #12]
 8009af6:	059a      	lsls	r2, r3, #22
 8009af8:	d402      	bmi.n	8009b00 <_vfiprintf_r+0x220>
 8009afa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009afc:	f000 faaf 	bl	800a05e <__retarget_lock_release_recursive>
 8009b00:	89ab      	ldrh	r3, [r5, #12]
 8009b02:	065b      	lsls	r3, r3, #25
 8009b04:	f53f af12 	bmi.w	800992c <_vfiprintf_r+0x4c>
 8009b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b0a:	e711      	b.n	8009930 <_vfiprintf_r+0x50>
 8009b0c:	ab03      	add	r3, sp, #12
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	462a      	mov	r2, r5
 8009b12:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <_vfiprintf_r+0x258>)
 8009b14:	a904      	add	r1, sp, #16
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7fe fa78 	bl	800800c <_printf_i>
 8009b1c:	e7e4      	b.n	8009ae8 <_vfiprintf_r+0x208>
 8009b1e:	bf00      	nop
 8009b20:	0800ada4 	.word	0x0800ada4
 8009b24:	0800adc4 	.word	0x0800adc4
 8009b28:	0800ad84 	.word	0x0800ad84
 8009b2c:	0800ac72 	.word	0x0800ac72
 8009b30:	0800ac7c 	.word	0x0800ac7c
 8009b34:	08007ac5 	.word	0x08007ac5
 8009b38:	080098bb 	.word	0x080098bb
 8009b3c:	0800ac78 	.word	0x0800ac78

08009b40 <__swbuf_r>:
 8009b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b42:	460e      	mov	r6, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	4605      	mov	r5, r0
 8009b48:	b118      	cbz	r0, 8009b52 <__swbuf_r+0x12>
 8009b4a:	6983      	ldr	r3, [r0, #24]
 8009b4c:	b90b      	cbnz	r3, 8009b52 <__swbuf_r+0x12>
 8009b4e:	f000 f9e7 	bl	8009f20 <__sinit>
 8009b52:	4b21      	ldr	r3, [pc, #132]	; (8009bd8 <__swbuf_r+0x98>)
 8009b54:	429c      	cmp	r4, r3
 8009b56:	d12b      	bne.n	8009bb0 <__swbuf_r+0x70>
 8009b58:	686c      	ldr	r4, [r5, #4]
 8009b5a:	69a3      	ldr	r3, [r4, #24]
 8009b5c:	60a3      	str	r3, [r4, #8]
 8009b5e:	89a3      	ldrh	r3, [r4, #12]
 8009b60:	071a      	lsls	r2, r3, #28
 8009b62:	d52f      	bpl.n	8009bc4 <__swbuf_r+0x84>
 8009b64:	6923      	ldr	r3, [r4, #16]
 8009b66:	b36b      	cbz	r3, 8009bc4 <__swbuf_r+0x84>
 8009b68:	6923      	ldr	r3, [r4, #16]
 8009b6a:	6820      	ldr	r0, [r4, #0]
 8009b6c:	1ac0      	subs	r0, r0, r3
 8009b6e:	6963      	ldr	r3, [r4, #20]
 8009b70:	b2f6      	uxtb	r6, r6
 8009b72:	4283      	cmp	r3, r0
 8009b74:	4637      	mov	r7, r6
 8009b76:	dc04      	bgt.n	8009b82 <__swbuf_r+0x42>
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f000 f93c 	bl	8009df8 <_fflush_r>
 8009b80:	bb30      	cbnz	r0, 8009bd0 <__swbuf_r+0x90>
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	3b01      	subs	r3, #1
 8009b86:	60a3      	str	r3, [r4, #8]
 8009b88:	6823      	ldr	r3, [r4, #0]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	6022      	str	r2, [r4, #0]
 8009b8e:	701e      	strb	r6, [r3, #0]
 8009b90:	6963      	ldr	r3, [r4, #20]
 8009b92:	3001      	adds	r0, #1
 8009b94:	4283      	cmp	r3, r0
 8009b96:	d004      	beq.n	8009ba2 <__swbuf_r+0x62>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	07db      	lsls	r3, r3, #31
 8009b9c:	d506      	bpl.n	8009bac <__swbuf_r+0x6c>
 8009b9e:	2e0a      	cmp	r6, #10
 8009ba0:	d104      	bne.n	8009bac <__swbuf_r+0x6c>
 8009ba2:	4621      	mov	r1, r4
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f000 f927 	bl	8009df8 <_fflush_r>
 8009baa:	b988      	cbnz	r0, 8009bd0 <__swbuf_r+0x90>
 8009bac:	4638      	mov	r0, r7
 8009bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <__swbuf_r+0x9c>)
 8009bb2:	429c      	cmp	r4, r3
 8009bb4:	d101      	bne.n	8009bba <__swbuf_r+0x7a>
 8009bb6:	68ac      	ldr	r4, [r5, #8]
 8009bb8:	e7cf      	b.n	8009b5a <__swbuf_r+0x1a>
 8009bba:	4b09      	ldr	r3, [pc, #36]	; (8009be0 <__swbuf_r+0xa0>)
 8009bbc:	429c      	cmp	r4, r3
 8009bbe:	bf08      	it	eq
 8009bc0:	68ec      	ldreq	r4, [r5, #12]
 8009bc2:	e7ca      	b.n	8009b5a <__swbuf_r+0x1a>
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 f81a 	bl	8009c00 <__swsetup_r>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	d0cb      	beq.n	8009b68 <__swbuf_r+0x28>
 8009bd0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009bd4:	e7ea      	b.n	8009bac <__swbuf_r+0x6c>
 8009bd6:	bf00      	nop
 8009bd8:	0800ada4 	.word	0x0800ada4
 8009bdc:	0800adc4 	.word	0x0800adc4
 8009be0:	0800ad84 	.word	0x0800ad84

08009be4 <__ascii_wctomb>:
 8009be4:	b149      	cbz	r1, 8009bfa <__ascii_wctomb+0x16>
 8009be6:	2aff      	cmp	r2, #255	; 0xff
 8009be8:	bf85      	ittet	hi
 8009bea:	238a      	movhi	r3, #138	; 0x8a
 8009bec:	6003      	strhi	r3, [r0, #0]
 8009bee:	700a      	strbls	r2, [r1, #0]
 8009bf0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009bf4:	bf98      	it	ls
 8009bf6:	2001      	movls	r0, #1
 8009bf8:	4770      	bx	lr
 8009bfa:	4608      	mov	r0, r1
 8009bfc:	4770      	bx	lr
	...

08009c00 <__swsetup_r>:
 8009c00:	4b32      	ldr	r3, [pc, #200]	; (8009ccc <__swsetup_r+0xcc>)
 8009c02:	b570      	push	{r4, r5, r6, lr}
 8009c04:	681d      	ldr	r5, [r3, #0]
 8009c06:	4606      	mov	r6, r0
 8009c08:	460c      	mov	r4, r1
 8009c0a:	b125      	cbz	r5, 8009c16 <__swsetup_r+0x16>
 8009c0c:	69ab      	ldr	r3, [r5, #24]
 8009c0e:	b913      	cbnz	r3, 8009c16 <__swsetup_r+0x16>
 8009c10:	4628      	mov	r0, r5
 8009c12:	f000 f985 	bl	8009f20 <__sinit>
 8009c16:	4b2e      	ldr	r3, [pc, #184]	; (8009cd0 <__swsetup_r+0xd0>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d10f      	bne.n	8009c3c <__swsetup_r+0x3c>
 8009c1c:	686c      	ldr	r4, [r5, #4]
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c24:	0719      	lsls	r1, r3, #28
 8009c26:	d42c      	bmi.n	8009c82 <__swsetup_r+0x82>
 8009c28:	06dd      	lsls	r5, r3, #27
 8009c2a:	d411      	bmi.n	8009c50 <__swsetup_r+0x50>
 8009c2c:	2309      	movs	r3, #9
 8009c2e:	6033      	str	r3, [r6, #0]
 8009c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c3a:	e03e      	b.n	8009cba <__swsetup_r+0xba>
 8009c3c:	4b25      	ldr	r3, [pc, #148]	; (8009cd4 <__swsetup_r+0xd4>)
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	d101      	bne.n	8009c46 <__swsetup_r+0x46>
 8009c42:	68ac      	ldr	r4, [r5, #8]
 8009c44:	e7eb      	b.n	8009c1e <__swsetup_r+0x1e>
 8009c46:	4b24      	ldr	r3, [pc, #144]	; (8009cd8 <__swsetup_r+0xd8>)
 8009c48:	429c      	cmp	r4, r3
 8009c4a:	bf08      	it	eq
 8009c4c:	68ec      	ldreq	r4, [r5, #12]
 8009c4e:	e7e6      	b.n	8009c1e <__swsetup_r+0x1e>
 8009c50:	0758      	lsls	r0, r3, #29
 8009c52:	d512      	bpl.n	8009c7a <__swsetup_r+0x7a>
 8009c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c56:	b141      	cbz	r1, 8009c6a <__swsetup_r+0x6a>
 8009c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c5c:	4299      	cmp	r1, r3
 8009c5e:	d002      	beq.n	8009c66 <__swsetup_r+0x66>
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff fd0b 	bl	800967c <_free_r>
 8009c66:	2300      	movs	r3, #0
 8009c68:	6363      	str	r3, [r4, #52]	; 0x34
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	2300      	movs	r3, #0
 8009c74:	6063      	str	r3, [r4, #4]
 8009c76:	6923      	ldr	r3, [r4, #16]
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f043 0308 	orr.w	r3, r3, #8
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	6923      	ldr	r3, [r4, #16]
 8009c84:	b94b      	cbnz	r3, 8009c9a <__swsetup_r+0x9a>
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c90:	d003      	beq.n	8009c9a <__swsetup_r+0x9a>
 8009c92:	4621      	mov	r1, r4
 8009c94:	4630      	mov	r0, r6
 8009c96:	f000 fa07 	bl	800a0a8 <__smakebuf_r>
 8009c9a:	89a0      	ldrh	r0, [r4, #12]
 8009c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca0:	f010 0301 	ands.w	r3, r0, #1
 8009ca4:	d00a      	beq.n	8009cbc <__swsetup_r+0xbc>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60a3      	str	r3, [r4, #8]
 8009caa:	6963      	ldr	r3, [r4, #20]
 8009cac:	425b      	negs	r3, r3
 8009cae:	61a3      	str	r3, [r4, #24]
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	b943      	cbnz	r3, 8009cc6 <__swsetup_r+0xc6>
 8009cb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cb8:	d1ba      	bne.n	8009c30 <__swsetup_r+0x30>
 8009cba:	bd70      	pop	{r4, r5, r6, pc}
 8009cbc:	0781      	lsls	r1, r0, #30
 8009cbe:	bf58      	it	pl
 8009cc0:	6963      	ldrpl	r3, [r4, #20]
 8009cc2:	60a3      	str	r3, [r4, #8]
 8009cc4:	e7f4      	b.n	8009cb0 <__swsetup_r+0xb0>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e7f7      	b.n	8009cba <__swsetup_r+0xba>
 8009cca:	bf00      	nop
 8009ccc:	2000000c 	.word	0x2000000c
 8009cd0:	0800ada4 	.word	0x0800ada4
 8009cd4:	0800adc4 	.word	0x0800adc4
 8009cd8:	0800ad84 	.word	0x0800ad84

08009cdc <abort>:
 8009cdc:	b508      	push	{r3, lr}
 8009cde:	2006      	movs	r0, #6
 8009ce0:	f000 fa4a 	bl	800a178 <raise>
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	f7f9 f92f 	bl	8002f48 <_exit>
	...

08009cec <__sflush_r>:
 8009cec:	898a      	ldrh	r2, [r1, #12]
 8009cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	0710      	lsls	r0, r2, #28
 8009cf6:	460c      	mov	r4, r1
 8009cf8:	d458      	bmi.n	8009dac <__sflush_r+0xc0>
 8009cfa:	684b      	ldr	r3, [r1, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dc05      	bgt.n	8009d0c <__sflush_r+0x20>
 8009d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	dc02      	bgt.n	8009d0c <__sflush_r+0x20>
 8009d06:	2000      	movs	r0, #0
 8009d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	d0f9      	beq.n	8009d06 <__sflush_r+0x1a>
 8009d12:	2300      	movs	r3, #0
 8009d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d18:	682f      	ldr	r7, [r5, #0]
 8009d1a:	602b      	str	r3, [r5, #0]
 8009d1c:	d032      	beq.n	8009d84 <__sflush_r+0x98>
 8009d1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	075a      	lsls	r2, r3, #29
 8009d24:	d505      	bpl.n	8009d32 <__sflush_r+0x46>
 8009d26:	6863      	ldr	r3, [r4, #4]
 8009d28:	1ac0      	subs	r0, r0, r3
 8009d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d2c:	b10b      	cbz	r3, 8009d32 <__sflush_r+0x46>
 8009d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d30:	1ac0      	subs	r0, r0, r3
 8009d32:	2300      	movs	r3, #0
 8009d34:	4602      	mov	r2, r0
 8009d36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d38:	6a21      	ldr	r1, [r4, #32]
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b0      	blx	r6
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	d106      	bne.n	8009d52 <__sflush_r+0x66>
 8009d44:	6829      	ldr	r1, [r5, #0]
 8009d46:	291d      	cmp	r1, #29
 8009d48:	d82c      	bhi.n	8009da4 <__sflush_r+0xb8>
 8009d4a:	4a2a      	ldr	r2, [pc, #168]	; (8009df4 <__sflush_r+0x108>)
 8009d4c:	40ca      	lsrs	r2, r1
 8009d4e:	07d6      	lsls	r6, r2, #31
 8009d50:	d528      	bpl.n	8009da4 <__sflush_r+0xb8>
 8009d52:	2200      	movs	r2, #0
 8009d54:	6062      	str	r2, [r4, #4]
 8009d56:	04d9      	lsls	r1, r3, #19
 8009d58:	6922      	ldr	r2, [r4, #16]
 8009d5a:	6022      	str	r2, [r4, #0]
 8009d5c:	d504      	bpl.n	8009d68 <__sflush_r+0x7c>
 8009d5e:	1c42      	adds	r2, r0, #1
 8009d60:	d101      	bne.n	8009d66 <__sflush_r+0x7a>
 8009d62:	682b      	ldr	r3, [r5, #0]
 8009d64:	b903      	cbnz	r3, 8009d68 <__sflush_r+0x7c>
 8009d66:	6560      	str	r0, [r4, #84]	; 0x54
 8009d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d6a:	602f      	str	r7, [r5, #0]
 8009d6c:	2900      	cmp	r1, #0
 8009d6e:	d0ca      	beq.n	8009d06 <__sflush_r+0x1a>
 8009d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d74:	4299      	cmp	r1, r3
 8009d76:	d002      	beq.n	8009d7e <__sflush_r+0x92>
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f7ff fc7f 	bl	800967c <_free_r>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	6360      	str	r0, [r4, #52]	; 0x34
 8009d82:	e7c1      	b.n	8009d08 <__sflush_r+0x1c>
 8009d84:	6a21      	ldr	r1, [r4, #32]
 8009d86:	2301      	movs	r3, #1
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b0      	blx	r6
 8009d8c:	1c41      	adds	r1, r0, #1
 8009d8e:	d1c7      	bne.n	8009d20 <__sflush_r+0x34>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0c4      	beq.n	8009d20 <__sflush_r+0x34>
 8009d96:	2b1d      	cmp	r3, #29
 8009d98:	d001      	beq.n	8009d9e <__sflush_r+0xb2>
 8009d9a:	2b16      	cmp	r3, #22
 8009d9c:	d101      	bne.n	8009da2 <__sflush_r+0xb6>
 8009d9e:	602f      	str	r7, [r5, #0]
 8009da0:	e7b1      	b.n	8009d06 <__sflush_r+0x1a>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	e7ad      	b.n	8009d08 <__sflush_r+0x1c>
 8009dac:	690f      	ldr	r7, [r1, #16]
 8009dae:	2f00      	cmp	r7, #0
 8009db0:	d0a9      	beq.n	8009d06 <__sflush_r+0x1a>
 8009db2:	0793      	lsls	r3, r2, #30
 8009db4:	680e      	ldr	r6, [r1, #0]
 8009db6:	bf08      	it	eq
 8009db8:	694b      	ldreq	r3, [r1, #20]
 8009dba:	600f      	str	r7, [r1, #0]
 8009dbc:	bf18      	it	ne
 8009dbe:	2300      	movne	r3, #0
 8009dc0:	eba6 0807 	sub.w	r8, r6, r7
 8009dc4:	608b      	str	r3, [r1, #8]
 8009dc6:	f1b8 0f00 	cmp.w	r8, #0
 8009dca:	dd9c      	ble.n	8009d06 <__sflush_r+0x1a>
 8009dcc:	6a21      	ldr	r1, [r4, #32]
 8009dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dd0:	4643      	mov	r3, r8
 8009dd2:	463a      	mov	r2, r7
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	47b0      	blx	r6
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	dc06      	bgt.n	8009dea <__sflush_r+0xfe>
 8009ddc:	89a3      	ldrh	r3, [r4, #12]
 8009dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009de8:	e78e      	b.n	8009d08 <__sflush_r+0x1c>
 8009dea:	4407      	add	r7, r0
 8009dec:	eba8 0800 	sub.w	r8, r8, r0
 8009df0:	e7e9      	b.n	8009dc6 <__sflush_r+0xda>
 8009df2:	bf00      	nop
 8009df4:	20400001 	.word	0x20400001

08009df8 <_fflush_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	690b      	ldr	r3, [r1, #16]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b913      	cbnz	r3, 8009e08 <_fflush_r+0x10>
 8009e02:	2500      	movs	r5, #0
 8009e04:	4628      	mov	r0, r5
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	b118      	cbz	r0, 8009e12 <_fflush_r+0x1a>
 8009e0a:	6983      	ldr	r3, [r0, #24]
 8009e0c:	b90b      	cbnz	r3, 8009e12 <_fflush_r+0x1a>
 8009e0e:	f000 f887 	bl	8009f20 <__sinit>
 8009e12:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <_fflush_r+0x6c>)
 8009e14:	429c      	cmp	r4, r3
 8009e16:	d11b      	bne.n	8009e50 <_fflush_r+0x58>
 8009e18:	686c      	ldr	r4, [r5, #4]
 8009e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0ef      	beq.n	8009e02 <_fflush_r+0xa>
 8009e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e24:	07d0      	lsls	r0, r2, #31
 8009e26:	d404      	bmi.n	8009e32 <_fflush_r+0x3a>
 8009e28:	0599      	lsls	r1, r3, #22
 8009e2a:	d402      	bmi.n	8009e32 <_fflush_r+0x3a>
 8009e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e2e:	f000 f915 	bl	800a05c <__retarget_lock_acquire_recursive>
 8009e32:	4628      	mov	r0, r5
 8009e34:	4621      	mov	r1, r4
 8009e36:	f7ff ff59 	bl	8009cec <__sflush_r>
 8009e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e3c:	07da      	lsls	r2, r3, #31
 8009e3e:	4605      	mov	r5, r0
 8009e40:	d4e0      	bmi.n	8009e04 <_fflush_r+0xc>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	059b      	lsls	r3, r3, #22
 8009e46:	d4dd      	bmi.n	8009e04 <_fflush_r+0xc>
 8009e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e4a:	f000 f908 	bl	800a05e <__retarget_lock_release_recursive>
 8009e4e:	e7d9      	b.n	8009e04 <_fflush_r+0xc>
 8009e50:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <_fflush_r+0x70>)
 8009e52:	429c      	cmp	r4, r3
 8009e54:	d101      	bne.n	8009e5a <_fflush_r+0x62>
 8009e56:	68ac      	ldr	r4, [r5, #8]
 8009e58:	e7df      	b.n	8009e1a <_fflush_r+0x22>
 8009e5a:	4b04      	ldr	r3, [pc, #16]	; (8009e6c <_fflush_r+0x74>)
 8009e5c:	429c      	cmp	r4, r3
 8009e5e:	bf08      	it	eq
 8009e60:	68ec      	ldreq	r4, [r5, #12]
 8009e62:	e7da      	b.n	8009e1a <_fflush_r+0x22>
 8009e64:	0800ada4 	.word	0x0800ada4
 8009e68:	0800adc4 	.word	0x0800adc4
 8009e6c:	0800ad84 	.word	0x0800ad84

08009e70 <std>:
 8009e70:	2300      	movs	r3, #0
 8009e72:	b510      	push	{r4, lr}
 8009e74:	4604      	mov	r4, r0
 8009e76:	e9c0 3300 	strd	r3, r3, [r0]
 8009e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e7e:	6083      	str	r3, [r0, #8]
 8009e80:	8181      	strh	r1, [r0, #12]
 8009e82:	6643      	str	r3, [r0, #100]	; 0x64
 8009e84:	81c2      	strh	r2, [r0, #14]
 8009e86:	6183      	str	r3, [r0, #24]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	305c      	adds	r0, #92	; 0x5c
 8009e8e:	f7fd fd71 	bl	8007974 <memset>
 8009e92:	4b05      	ldr	r3, [pc, #20]	; (8009ea8 <std+0x38>)
 8009e94:	6263      	str	r3, [r4, #36]	; 0x24
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <std+0x3c>)
 8009e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <std+0x40>)
 8009e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <std+0x44>)
 8009ea0:	6224      	str	r4, [r4, #32]
 8009ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ea4:	bd10      	pop	{r4, pc}
 8009ea6:	bf00      	nop
 8009ea8:	0800a1b1 	.word	0x0800a1b1
 8009eac:	0800a1d3 	.word	0x0800a1d3
 8009eb0:	0800a20b 	.word	0x0800a20b
 8009eb4:	0800a22f 	.word	0x0800a22f

08009eb8 <_cleanup_r>:
 8009eb8:	4901      	ldr	r1, [pc, #4]	; (8009ec0 <_cleanup_r+0x8>)
 8009eba:	f000 b8af 	b.w	800a01c <_fwalk_reent>
 8009ebe:	bf00      	nop
 8009ec0:	08009df9 	.word	0x08009df9

08009ec4 <__sfmoreglue>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	1e4a      	subs	r2, r1, #1
 8009ec8:	2568      	movs	r5, #104	; 0x68
 8009eca:	4355      	muls	r5, r2
 8009ecc:	460e      	mov	r6, r1
 8009ece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ed2:	f7ff fc23 	bl	800971c <_malloc_r>
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	b140      	cbz	r0, 8009eec <__sfmoreglue+0x28>
 8009eda:	2100      	movs	r1, #0
 8009edc:	e9c0 1600 	strd	r1, r6, [r0]
 8009ee0:	300c      	adds	r0, #12
 8009ee2:	60a0      	str	r0, [r4, #8]
 8009ee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ee8:	f7fd fd44 	bl	8007974 <memset>
 8009eec:	4620      	mov	r0, r4
 8009eee:	bd70      	pop	{r4, r5, r6, pc}

08009ef0 <__sfp_lock_acquire>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__sfp_lock_acquire+0x8>)
 8009ef2:	f000 b8b3 	b.w	800a05c <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	2000063c 	.word	0x2000063c

08009efc <__sfp_lock_release>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__sfp_lock_release+0x8>)
 8009efe:	f000 b8ae 	b.w	800a05e <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	2000063c 	.word	0x2000063c

08009f08 <__sinit_lock_acquire>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__sinit_lock_acquire+0x8>)
 8009f0a:	f000 b8a7 	b.w	800a05c <__retarget_lock_acquire_recursive>
 8009f0e:	bf00      	nop
 8009f10:	20000637 	.word	0x20000637

08009f14 <__sinit_lock_release>:
 8009f14:	4801      	ldr	r0, [pc, #4]	; (8009f1c <__sinit_lock_release+0x8>)
 8009f16:	f000 b8a2 	b.w	800a05e <__retarget_lock_release_recursive>
 8009f1a:	bf00      	nop
 8009f1c:	20000637 	.word	0x20000637

08009f20 <__sinit>:
 8009f20:	b510      	push	{r4, lr}
 8009f22:	4604      	mov	r4, r0
 8009f24:	f7ff fff0 	bl	8009f08 <__sinit_lock_acquire>
 8009f28:	69a3      	ldr	r3, [r4, #24]
 8009f2a:	b11b      	cbz	r3, 8009f34 <__sinit+0x14>
 8009f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f30:	f7ff bff0 	b.w	8009f14 <__sinit_lock_release>
 8009f34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f38:	6523      	str	r3, [r4, #80]	; 0x50
 8009f3a:	4b13      	ldr	r3, [pc, #76]	; (8009f88 <__sinit+0x68>)
 8009f3c:	4a13      	ldr	r2, [pc, #76]	; (8009f8c <__sinit+0x6c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f42:	42a3      	cmp	r3, r4
 8009f44:	bf04      	itt	eq
 8009f46:	2301      	moveq	r3, #1
 8009f48:	61a3      	streq	r3, [r4, #24]
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 f820 	bl	8009f90 <__sfp>
 8009f50:	6060      	str	r0, [r4, #4]
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f81c 	bl	8009f90 <__sfp>
 8009f58:	60a0      	str	r0, [r4, #8]
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f818 	bl	8009f90 <__sfp>
 8009f60:	2200      	movs	r2, #0
 8009f62:	60e0      	str	r0, [r4, #12]
 8009f64:	2104      	movs	r1, #4
 8009f66:	6860      	ldr	r0, [r4, #4]
 8009f68:	f7ff ff82 	bl	8009e70 <std>
 8009f6c:	68a0      	ldr	r0, [r4, #8]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	2109      	movs	r1, #9
 8009f72:	f7ff ff7d 	bl	8009e70 <std>
 8009f76:	68e0      	ldr	r0, [r4, #12]
 8009f78:	2202      	movs	r2, #2
 8009f7a:	2112      	movs	r1, #18
 8009f7c:	f7ff ff78 	bl	8009e70 <std>
 8009f80:	2301      	movs	r3, #1
 8009f82:	61a3      	str	r3, [r4, #24]
 8009f84:	e7d2      	b.n	8009f2c <__sinit+0xc>
 8009f86:	bf00      	nop
 8009f88:	0800aa00 	.word	0x0800aa00
 8009f8c:	08009eb9 	.word	0x08009eb9

08009f90 <__sfp>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	4607      	mov	r7, r0
 8009f94:	f7ff ffac 	bl	8009ef0 <__sfp_lock_acquire>
 8009f98:	4b1e      	ldr	r3, [pc, #120]	; (800a014 <__sfp+0x84>)
 8009f9a:	681e      	ldr	r6, [r3, #0]
 8009f9c:	69b3      	ldr	r3, [r6, #24]
 8009f9e:	b913      	cbnz	r3, 8009fa6 <__sfp+0x16>
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7ff ffbd 	bl	8009f20 <__sinit>
 8009fa6:	3648      	adds	r6, #72	; 0x48
 8009fa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	d503      	bpl.n	8009fb8 <__sfp+0x28>
 8009fb0:	6833      	ldr	r3, [r6, #0]
 8009fb2:	b30b      	cbz	r3, 8009ff8 <__sfp+0x68>
 8009fb4:	6836      	ldr	r6, [r6, #0]
 8009fb6:	e7f7      	b.n	8009fa8 <__sfp+0x18>
 8009fb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fbc:	b9d5      	cbnz	r5, 8009ff4 <__sfp+0x64>
 8009fbe:	4b16      	ldr	r3, [pc, #88]	; (800a018 <__sfp+0x88>)
 8009fc0:	60e3      	str	r3, [r4, #12]
 8009fc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fc6:	6665      	str	r5, [r4, #100]	; 0x64
 8009fc8:	f000 f847 	bl	800a05a <__retarget_lock_init_recursive>
 8009fcc:	f7ff ff96 	bl	8009efc <__sfp_lock_release>
 8009fd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fd8:	6025      	str	r5, [r4, #0]
 8009fda:	61a5      	str	r5, [r4, #24]
 8009fdc:	2208      	movs	r2, #8
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fe4:	f7fd fcc6 	bl	8007974 <memset>
 8009fe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff4:	3468      	adds	r4, #104	; 0x68
 8009ff6:	e7d9      	b.n	8009fac <__sfp+0x1c>
 8009ff8:	2104      	movs	r1, #4
 8009ffa:	4638      	mov	r0, r7
 8009ffc:	f7ff ff62 	bl	8009ec4 <__sfmoreglue>
 800a000:	4604      	mov	r4, r0
 800a002:	6030      	str	r0, [r6, #0]
 800a004:	2800      	cmp	r0, #0
 800a006:	d1d5      	bne.n	8009fb4 <__sfp+0x24>
 800a008:	f7ff ff78 	bl	8009efc <__sfp_lock_release>
 800a00c:	230c      	movs	r3, #12
 800a00e:	603b      	str	r3, [r7, #0]
 800a010:	e7ee      	b.n	8009ff0 <__sfp+0x60>
 800a012:	bf00      	nop
 800a014:	0800aa00 	.word	0x0800aa00
 800a018:	ffff0001 	.word	0xffff0001

0800a01c <_fwalk_reent>:
 800a01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a020:	4606      	mov	r6, r0
 800a022:	4688      	mov	r8, r1
 800a024:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a028:	2700      	movs	r7, #0
 800a02a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a02e:	f1b9 0901 	subs.w	r9, r9, #1
 800a032:	d505      	bpl.n	800a040 <_fwalk_reent+0x24>
 800a034:	6824      	ldr	r4, [r4, #0]
 800a036:	2c00      	cmp	r4, #0
 800a038:	d1f7      	bne.n	800a02a <_fwalk_reent+0xe>
 800a03a:	4638      	mov	r0, r7
 800a03c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a040:	89ab      	ldrh	r3, [r5, #12]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d907      	bls.n	800a056 <_fwalk_reent+0x3a>
 800a046:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a04a:	3301      	adds	r3, #1
 800a04c:	d003      	beq.n	800a056 <_fwalk_reent+0x3a>
 800a04e:	4629      	mov	r1, r5
 800a050:	4630      	mov	r0, r6
 800a052:	47c0      	blx	r8
 800a054:	4307      	orrs	r7, r0
 800a056:	3568      	adds	r5, #104	; 0x68
 800a058:	e7e9      	b.n	800a02e <_fwalk_reent+0x12>

0800a05a <__retarget_lock_init_recursive>:
 800a05a:	4770      	bx	lr

0800a05c <__retarget_lock_acquire_recursive>:
 800a05c:	4770      	bx	lr

0800a05e <__retarget_lock_release_recursive>:
 800a05e:	4770      	bx	lr

0800a060 <__swhatbuf_r>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	460e      	mov	r6, r1
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	2900      	cmp	r1, #0
 800a06a:	b096      	sub	sp, #88	; 0x58
 800a06c:	4614      	mov	r4, r2
 800a06e:	461d      	mov	r5, r3
 800a070:	da07      	bge.n	800a082 <__swhatbuf_r+0x22>
 800a072:	2300      	movs	r3, #0
 800a074:	602b      	str	r3, [r5, #0]
 800a076:	89b3      	ldrh	r3, [r6, #12]
 800a078:	061a      	lsls	r2, r3, #24
 800a07a:	d410      	bmi.n	800a09e <__swhatbuf_r+0x3e>
 800a07c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a080:	e00e      	b.n	800a0a0 <__swhatbuf_r+0x40>
 800a082:	466a      	mov	r2, sp
 800a084:	f000 f8fa 	bl	800a27c <_fstat_r>
 800a088:	2800      	cmp	r0, #0
 800a08a:	dbf2      	blt.n	800a072 <__swhatbuf_r+0x12>
 800a08c:	9a01      	ldr	r2, [sp, #4]
 800a08e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a092:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a096:	425a      	negs	r2, r3
 800a098:	415a      	adcs	r2, r3
 800a09a:	602a      	str	r2, [r5, #0]
 800a09c:	e7ee      	b.n	800a07c <__swhatbuf_r+0x1c>
 800a09e:	2340      	movs	r3, #64	; 0x40
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	b016      	add	sp, #88	; 0x58
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}

0800a0a8 <__smakebuf_r>:
 800a0a8:	898b      	ldrh	r3, [r1, #12]
 800a0aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a0ac:	079d      	lsls	r5, r3, #30
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	d507      	bpl.n	800a0c4 <__smakebuf_r+0x1c>
 800a0b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	2301      	movs	r3, #1
 800a0be:	6163      	str	r3, [r4, #20]
 800a0c0:	b002      	add	sp, #8
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	ab01      	add	r3, sp, #4
 800a0c6:	466a      	mov	r2, sp
 800a0c8:	f7ff ffca 	bl	800a060 <__swhatbuf_r>
 800a0cc:	9900      	ldr	r1, [sp, #0]
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7ff fb23 	bl	800971c <_malloc_r>
 800a0d6:	b948      	cbnz	r0, 800a0ec <__smakebuf_r+0x44>
 800a0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0dc:	059a      	lsls	r2, r3, #22
 800a0de:	d4ef      	bmi.n	800a0c0 <__smakebuf_r+0x18>
 800a0e0:	f023 0303 	bic.w	r3, r3, #3
 800a0e4:	f043 0302 	orr.w	r3, r3, #2
 800a0e8:	81a3      	strh	r3, [r4, #12]
 800a0ea:	e7e3      	b.n	800a0b4 <__smakebuf_r+0xc>
 800a0ec:	4b0d      	ldr	r3, [pc, #52]	; (800a124 <__smakebuf_r+0x7c>)
 800a0ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	6020      	str	r0, [r4, #0]
 800a0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	9b00      	ldr	r3, [sp, #0]
 800a0fc:	6163      	str	r3, [r4, #20]
 800a0fe:	9b01      	ldr	r3, [sp, #4]
 800a100:	6120      	str	r0, [r4, #16]
 800a102:	b15b      	cbz	r3, 800a11c <__smakebuf_r+0x74>
 800a104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 f8c9 	bl	800a2a0 <_isatty_r>
 800a10e:	b128      	cbz	r0, 800a11c <__smakebuf_r+0x74>
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f023 0303 	bic.w	r3, r3, #3
 800a116:	f043 0301 	orr.w	r3, r3, #1
 800a11a:	81a3      	strh	r3, [r4, #12]
 800a11c:	89a0      	ldrh	r0, [r4, #12]
 800a11e:	4305      	orrs	r5, r0
 800a120:	81a5      	strh	r5, [r4, #12]
 800a122:	e7cd      	b.n	800a0c0 <__smakebuf_r+0x18>
 800a124:	08009eb9 	.word	0x08009eb9

0800a128 <_raise_r>:
 800a128:	291f      	cmp	r1, #31
 800a12a:	b538      	push	{r3, r4, r5, lr}
 800a12c:	4604      	mov	r4, r0
 800a12e:	460d      	mov	r5, r1
 800a130:	d904      	bls.n	800a13c <_raise_r+0x14>
 800a132:	2316      	movs	r3, #22
 800a134:	6003      	str	r3, [r0, #0]
 800a136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a13e:	b112      	cbz	r2, 800a146 <_raise_r+0x1e>
 800a140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a144:	b94b      	cbnz	r3, 800a15a <_raise_r+0x32>
 800a146:	4620      	mov	r0, r4
 800a148:	f000 f830 	bl	800a1ac <_getpid_r>
 800a14c:	462a      	mov	r2, r5
 800a14e:	4601      	mov	r1, r0
 800a150:	4620      	mov	r0, r4
 800a152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a156:	f000 b817 	b.w	800a188 <_kill_r>
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d00a      	beq.n	800a174 <_raise_r+0x4c>
 800a15e:	1c59      	adds	r1, r3, #1
 800a160:	d103      	bne.n	800a16a <_raise_r+0x42>
 800a162:	2316      	movs	r3, #22
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	2001      	movs	r0, #1
 800a168:	e7e7      	b.n	800a13a <_raise_r+0x12>
 800a16a:	2400      	movs	r4, #0
 800a16c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a170:	4628      	mov	r0, r5
 800a172:	4798      	blx	r3
 800a174:	2000      	movs	r0, #0
 800a176:	e7e0      	b.n	800a13a <_raise_r+0x12>

0800a178 <raise>:
 800a178:	4b02      	ldr	r3, [pc, #8]	; (800a184 <raise+0xc>)
 800a17a:	4601      	mov	r1, r0
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	f7ff bfd3 	b.w	800a128 <_raise_r>
 800a182:	bf00      	nop
 800a184:	2000000c 	.word	0x2000000c

0800a188 <_kill_r>:
 800a188:	b538      	push	{r3, r4, r5, lr}
 800a18a:	4d07      	ldr	r5, [pc, #28]	; (800a1a8 <_kill_r+0x20>)
 800a18c:	2300      	movs	r3, #0
 800a18e:	4604      	mov	r4, r0
 800a190:	4608      	mov	r0, r1
 800a192:	4611      	mov	r1, r2
 800a194:	602b      	str	r3, [r5, #0]
 800a196:	f7f8 fec7 	bl	8002f28 <_kill>
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	d102      	bne.n	800a1a4 <_kill_r+0x1c>
 800a19e:	682b      	ldr	r3, [r5, #0]
 800a1a0:	b103      	cbz	r3, 800a1a4 <_kill_r+0x1c>
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	bd38      	pop	{r3, r4, r5, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000630 	.word	0x20000630

0800a1ac <_getpid_r>:
 800a1ac:	f7f8 beb4 	b.w	8002f18 <_getpid>

0800a1b0 <__sread>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b8:	f000 f894 	bl	800a2e4 <_read_r>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	bfab      	itete	ge
 800a1c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a1c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1c4:	181b      	addge	r3, r3, r0
 800a1c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a1ca:	bfac      	ite	ge
 800a1cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1ce:	81a3      	strhlt	r3, [r4, #12]
 800a1d0:	bd10      	pop	{r4, pc}

0800a1d2 <__swrite>:
 800a1d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d6:	461f      	mov	r7, r3
 800a1d8:	898b      	ldrh	r3, [r1, #12]
 800a1da:	05db      	lsls	r3, r3, #23
 800a1dc:	4605      	mov	r5, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	4616      	mov	r6, r2
 800a1e2:	d505      	bpl.n	800a1f0 <__swrite+0x1e>
 800a1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f000 f868 	bl	800a2c0 <_lseek_r>
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1fa:	81a3      	strh	r3, [r4, #12]
 800a1fc:	4632      	mov	r2, r6
 800a1fe:	463b      	mov	r3, r7
 800a200:	4628      	mov	r0, r5
 800a202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a206:	f000 b817 	b.w	800a238 <_write_r>

0800a20a <__sseek>:
 800a20a:	b510      	push	{r4, lr}
 800a20c:	460c      	mov	r4, r1
 800a20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a212:	f000 f855 	bl	800a2c0 <_lseek_r>
 800a216:	1c43      	adds	r3, r0, #1
 800a218:	89a3      	ldrh	r3, [r4, #12]
 800a21a:	bf15      	itete	ne
 800a21c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a21e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a222:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a226:	81a3      	strheq	r3, [r4, #12]
 800a228:	bf18      	it	ne
 800a22a:	81a3      	strhne	r3, [r4, #12]
 800a22c:	bd10      	pop	{r4, pc}

0800a22e <__sclose>:
 800a22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a232:	f000 b813 	b.w	800a25c <_close_r>
	...

0800a238 <_write_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d07      	ldr	r5, [pc, #28]	; (800a258 <_write_r+0x20>)
 800a23c:	4604      	mov	r4, r0
 800a23e:	4608      	mov	r0, r1
 800a240:	4611      	mov	r1, r2
 800a242:	2200      	movs	r2, #0
 800a244:	602a      	str	r2, [r5, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	f7f8 fea5 	bl	8002f96 <_write>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_write_r+0x1e>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_write_r+0x1e>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	20000630 	.word	0x20000630

0800a25c <_close_r>:
 800a25c:	b538      	push	{r3, r4, r5, lr}
 800a25e:	4d06      	ldr	r5, [pc, #24]	; (800a278 <_close_r+0x1c>)
 800a260:	2300      	movs	r3, #0
 800a262:	4604      	mov	r4, r0
 800a264:	4608      	mov	r0, r1
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	f7f8 feb1 	bl	8002fce <_close>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d102      	bne.n	800a276 <_close_r+0x1a>
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	b103      	cbz	r3, 800a276 <_close_r+0x1a>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd38      	pop	{r3, r4, r5, pc}
 800a278:	20000630 	.word	0x20000630

0800a27c <_fstat_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4d07      	ldr	r5, [pc, #28]	; (800a29c <_fstat_r+0x20>)
 800a280:	2300      	movs	r3, #0
 800a282:	4604      	mov	r4, r0
 800a284:	4608      	mov	r0, r1
 800a286:	4611      	mov	r1, r2
 800a288:	602b      	str	r3, [r5, #0]
 800a28a:	f7f8 feac 	bl	8002fe6 <_fstat>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	d102      	bne.n	800a298 <_fstat_r+0x1c>
 800a292:	682b      	ldr	r3, [r5, #0]
 800a294:	b103      	cbz	r3, 800a298 <_fstat_r+0x1c>
 800a296:	6023      	str	r3, [r4, #0]
 800a298:	bd38      	pop	{r3, r4, r5, pc}
 800a29a:	bf00      	nop
 800a29c:	20000630 	.word	0x20000630

0800a2a0 <_isatty_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4d06      	ldr	r5, [pc, #24]	; (800a2bc <_isatty_r+0x1c>)
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4604      	mov	r4, r0
 800a2a8:	4608      	mov	r0, r1
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	f7f8 feab 	bl	8003006 <_isatty>
 800a2b0:	1c43      	adds	r3, r0, #1
 800a2b2:	d102      	bne.n	800a2ba <_isatty_r+0x1a>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	b103      	cbz	r3, 800a2ba <_isatty_r+0x1a>
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	bd38      	pop	{r3, r4, r5, pc}
 800a2bc:	20000630 	.word	0x20000630

0800a2c0 <_lseek_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_lseek_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f8 fea4 	bl	800301c <_lseek>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_lseek_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_lseek_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20000630 	.word	0x20000630

0800a2e4 <_read_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	; (800a304 <_read_r+0x20>)
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	4608      	mov	r0, r1
 800a2ec:	4611      	mov	r1, r2
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	602a      	str	r2, [r5, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f7f8 fe32 	bl	8002f5c <_read>
 800a2f8:	1c43      	adds	r3, r0, #1
 800a2fa:	d102      	bne.n	800a302 <_read_r+0x1e>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	b103      	cbz	r3, 800a302 <_read_r+0x1e>
 800a300:	6023      	str	r3, [r4, #0]
 800a302:	bd38      	pop	{r3, r4, r5, pc}
 800a304:	20000630 	.word	0x20000630

0800a308 <asin>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	ed2d 8b02 	vpush	{d8}
 800a30e:	ec55 4b10 	vmov	r4, r5, d0
 800a312:	f000 f869 	bl	800a3e8 <__ieee754_asin>
 800a316:	4b16      	ldr	r3, [pc, #88]	; (800a370 <asin+0x68>)
 800a318:	eeb0 8a40 	vmov.f32	s16, s0
 800a31c:	eef0 8a60 	vmov.f32	s17, s1
 800a320:	f993 3000 	ldrsb.w	r3, [r3]
 800a324:	3301      	adds	r3, #1
 800a326:	d01c      	beq.n	800a362 <asin+0x5a>
 800a328:	4622      	mov	r2, r4
 800a32a:	462b      	mov	r3, r5
 800a32c:	4620      	mov	r0, r4
 800a32e:	4629      	mov	r1, r5
 800a330:	f7f6 fbfc 	bl	8000b2c <__aeabi_dcmpun>
 800a334:	b9a8      	cbnz	r0, 800a362 <asin+0x5a>
 800a336:	ec45 4b10 	vmov	d0, r4, r5
 800a33a:	f000 fb1d 	bl	800a978 <fabs>
 800a33e:	4b0d      	ldr	r3, [pc, #52]	; (800a374 <asin+0x6c>)
 800a340:	ec51 0b10 	vmov	r0, r1, d0
 800a344:	2200      	movs	r2, #0
 800a346:	f7f6 fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 800a34a:	b150      	cbz	r0, 800a362 <asin+0x5a>
 800a34c:	f7fd fada 	bl	8007904 <__errno>
 800a350:	ecbd 8b02 	vpop	{d8}
 800a354:	2321      	movs	r3, #33	; 0x21
 800a356:	6003      	str	r3, [r0, #0]
 800a358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a35c:	4806      	ldr	r0, [pc, #24]	; (800a378 <asin+0x70>)
 800a35e:	f000 bb17 	b.w	800a990 <nan>
 800a362:	eeb0 0a48 	vmov.f32	s0, s16
 800a366:	eef0 0a68 	vmov.f32	s1, s17
 800a36a:	ecbd 8b02 	vpop	{d8}
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	200001dc 	.word	0x200001dc
 800a374:	3ff00000 	.word	0x3ff00000
 800a378:	0800ac67 	.word	0x0800ac67

0800a37c <sqrt>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	ed2d 8b02 	vpush	{d8}
 800a382:	ec55 4b10 	vmov	r4, r5, d0
 800a386:	f000 fa43 	bl	800a810 <__ieee754_sqrt>
 800a38a:	4b15      	ldr	r3, [pc, #84]	; (800a3e0 <sqrt+0x64>)
 800a38c:	eeb0 8a40 	vmov.f32	s16, s0
 800a390:	eef0 8a60 	vmov.f32	s17, s1
 800a394:	f993 3000 	ldrsb.w	r3, [r3]
 800a398:	3301      	adds	r3, #1
 800a39a:	d019      	beq.n	800a3d0 <sqrt+0x54>
 800a39c:	4622      	mov	r2, r4
 800a39e:	462b      	mov	r3, r5
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	f7f6 fbc2 	bl	8000b2c <__aeabi_dcmpun>
 800a3a8:	b990      	cbnz	r0, 800a3d0 <sqrt+0x54>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f6 fb93 	bl	8000adc <__aeabi_dcmplt>
 800a3b6:	b158      	cbz	r0, 800a3d0 <sqrt+0x54>
 800a3b8:	f7fd faa4 	bl	8007904 <__errno>
 800a3bc:	2321      	movs	r3, #33	; 0x21
 800a3be:	6003      	str	r3, [r0, #0]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	f7f6 fa40 	bl	800084c <__aeabi_ddiv>
 800a3cc:	ec41 0b18 	vmov	d8, r0, r1
 800a3d0:	eeb0 0a48 	vmov.f32	s0, s16
 800a3d4:	eef0 0a68 	vmov.f32	s1, s17
 800a3d8:	ecbd 8b02 	vpop	{d8}
 800a3dc:	bd38      	pop	{r3, r4, r5, pc}
 800a3de:	bf00      	nop
 800a3e0:	200001dc 	.word	0x200001dc
 800a3e4:	00000000 	.word	0x00000000

0800a3e8 <__ieee754_asin>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	ed2d 8b04 	vpush	{d8-d9}
 800a3f0:	ec55 4b10 	vmov	r4, r5, d0
 800a3f4:	4bcc      	ldr	r3, [pc, #816]	; (800a728 <__ieee754_asin+0x340>)
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a3fc:	4598      	cmp	r8, r3
 800a3fe:	9501      	str	r5, [sp, #4]
 800a400:	dd35      	ble.n	800a46e <__ieee754_asin+0x86>
 800a402:	ee10 3a10 	vmov	r3, s0
 800a406:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a40a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a40e:	ea58 0303 	orrs.w	r3, r8, r3
 800a412:	d117      	bne.n	800a444 <__ieee754_asin+0x5c>
 800a414:	a3aa      	add	r3, pc, #680	; (adr r3, 800a6c0 <__ieee754_asin+0x2d8>)
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	ee10 0a10 	vmov	r0, s0
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f6 f8ea 	bl	80005f8 <__aeabi_dmul>
 800a424:	a3a8      	add	r3, pc, #672	; (adr r3, 800a6c8 <__ieee754_asin+0x2e0>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	4620      	mov	r0, r4
 800a430:	4629      	mov	r1, r5
 800a432:	f7f6 f8e1 	bl	80005f8 <__aeabi_dmul>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	4630      	mov	r0, r6
 800a43c:	4639      	mov	r1, r7
 800a43e:	f7f5 ff25 	bl	800028c <__adddf3>
 800a442:	e00b      	b.n	800a45c <__ieee754_asin+0x74>
 800a444:	ee10 2a10 	vmov	r2, s0
 800a448:	462b      	mov	r3, r5
 800a44a:	ee10 0a10 	vmov	r0, s0
 800a44e:	4629      	mov	r1, r5
 800a450:	f7f5 ff1a 	bl	8000288 <__aeabi_dsub>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	f7f6 f9f8 	bl	800084c <__aeabi_ddiv>
 800a45c:	4604      	mov	r4, r0
 800a45e:	460d      	mov	r5, r1
 800a460:	ec45 4b10 	vmov	d0, r4, r5
 800a464:	b003      	add	sp, #12
 800a466:	ecbd 8b04 	vpop	{d8-d9}
 800a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46e:	4baf      	ldr	r3, [pc, #700]	; (800a72c <__ieee754_asin+0x344>)
 800a470:	4598      	cmp	r8, r3
 800a472:	dc11      	bgt.n	800a498 <__ieee754_asin+0xb0>
 800a474:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a478:	f280 80ae 	bge.w	800a5d8 <__ieee754_asin+0x1f0>
 800a47c:	a394      	add	r3, pc, #592	; (adr r3, 800a6d0 <__ieee754_asin+0x2e8>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	ee10 0a10 	vmov	r0, s0
 800a486:	4629      	mov	r1, r5
 800a488:	f7f5 ff00 	bl	800028c <__adddf3>
 800a48c:	4ba8      	ldr	r3, [pc, #672]	; (800a730 <__ieee754_asin+0x348>)
 800a48e:	2200      	movs	r2, #0
 800a490:	f7f6 fb42 	bl	8000b18 <__aeabi_dcmpgt>
 800a494:	2800      	cmp	r0, #0
 800a496:	d1e3      	bne.n	800a460 <__ieee754_asin+0x78>
 800a498:	ec45 4b10 	vmov	d0, r4, r5
 800a49c:	f000 fa6c 	bl	800a978 <fabs>
 800a4a0:	49a3      	ldr	r1, [pc, #652]	; (800a730 <__ieee754_asin+0x348>)
 800a4a2:	ec53 2b10 	vmov	r2, r3, d0
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f7f5 feee 	bl	8000288 <__aeabi_dsub>
 800a4ac:	4ba1      	ldr	r3, [pc, #644]	; (800a734 <__ieee754_asin+0x34c>)
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f7f6 f8a2 	bl	80005f8 <__aeabi_dmul>
 800a4b4:	a388      	add	r3, pc, #544	; (adr r3, 800a6d8 <__ieee754_asin+0x2f0>)
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	460d      	mov	r5, r1
 800a4be:	f7f6 f89b 	bl	80005f8 <__aeabi_dmul>
 800a4c2:	a387      	add	r3, pc, #540	; (adr r3, 800a6e0 <__ieee754_asin+0x2f8>)
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f7f5 fee0 	bl	800028c <__adddf3>
 800a4cc:	4622      	mov	r2, r4
 800a4ce:	462b      	mov	r3, r5
 800a4d0:	f7f6 f892 	bl	80005f8 <__aeabi_dmul>
 800a4d4:	a384      	add	r3, pc, #528	; (adr r3, 800a6e8 <__ieee754_asin+0x300>)
 800a4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4da:	f7f5 fed5 	bl	8000288 <__aeabi_dsub>
 800a4de:	4622      	mov	r2, r4
 800a4e0:	462b      	mov	r3, r5
 800a4e2:	f7f6 f889 	bl	80005f8 <__aeabi_dmul>
 800a4e6:	a382      	add	r3, pc, #520	; (adr r3, 800a6f0 <__ieee754_asin+0x308>)
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f7f5 fece 	bl	800028c <__adddf3>
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	f7f6 f880 	bl	80005f8 <__aeabi_dmul>
 800a4f8:	a37f      	add	r3, pc, #508	; (adr r3, 800a6f8 <__ieee754_asin+0x310>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f7f5 fec3 	bl	8000288 <__aeabi_dsub>
 800a502:	4622      	mov	r2, r4
 800a504:	462b      	mov	r3, r5
 800a506:	f7f6 f877 	bl	80005f8 <__aeabi_dmul>
 800a50a:	a37d      	add	r3, pc, #500	; (adr r3, 800a700 <__ieee754_asin+0x318>)
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	f7f5 febc 	bl	800028c <__adddf3>
 800a514:	4622      	mov	r2, r4
 800a516:	462b      	mov	r3, r5
 800a518:	f7f6 f86e 	bl	80005f8 <__aeabi_dmul>
 800a51c:	a37a      	add	r3, pc, #488	; (adr r3, 800a708 <__ieee754_asin+0x320>)
 800a51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a522:	ec41 0b18 	vmov	d8, r0, r1
 800a526:	4620      	mov	r0, r4
 800a528:	4629      	mov	r1, r5
 800a52a:	f7f6 f865 	bl	80005f8 <__aeabi_dmul>
 800a52e:	a378      	add	r3, pc, #480	; (adr r3, 800a710 <__ieee754_asin+0x328>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f5 fea8 	bl	8000288 <__aeabi_dsub>
 800a538:	4622      	mov	r2, r4
 800a53a:	462b      	mov	r3, r5
 800a53c:	f7f6 f85c 	bl	80005f8 <__aeabi_dmul>
 800a540:	a375      	add	r3, pc, #468	; (adr r3, 800a718 <__ieee754_asin+0x330>)
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f7f5 fea1 	bl	800028c <__adddf3>
 800a54a:	4622      	mov	r2, r4
 800a54c:	462b      	mov	r3, r5
 800a54e:	f7f6 f853 	bl	80005f8 <__aeabi_dmul>
 800a552:	a373      	add	r3, pc, #460	; (adr r3, 800a720 <__ieee754_asin+0x338>)
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	f7f5 fe96 	bl	8000288 <__aeabi_dsub>
 800a55c:	4622      	mov	r2, r4
 800a55e:	462b      	mov	r3, r5
 800a560:	f7f6 f84a 	bl	80005f8 <__aeabi_dmul>
 800a564:	4b72      	ldr	r3, [pc, #456]	; (800a730 <__ieee754_asin+0x348>)
 800a566:	2200      	movs	r2, #0
 800a568:	f7f5 fe90 	bl	800028c <__adddf3>
 800a56c:	ec45 4b10 	vmov	d0, r4, r5
 800a570:	4606      	mov	r6, r0
 800a572:	460f      	mov	r7, r1
 800a574:	f000 f94c 	bl	800a810 <__ieee754_sqrt>
 800a578:	4b6f      	ldr	r3, [pc, #444]	; (800a738 <__ieee754_asin+0x350>)
 800a57a:	4598      	cmp	r8, r3
 800a57c:	ec5b ab10 	vmov	sl, fp, d0
 800a580:	f340 80dc 	ble.w	800a73c <__ieee754_asin+0x354>
 800a584:	4632      	mov	r2, r6
 800a586:	463b      	mov	r3, r7
 800a588:	ec51 0b18 	vmov	r0, r1, d8
 800a58c:	f7f6 f95e 	bl	800084c <__aeabi_ddiv>
 800a590:	4652      	mov	r2, sl
 800a592:	465b      	mov	r3, fp
 800a594:	f7f6 f830 	bl	80005f8 <__aeabi_dmul>
 800a598:	4652      	mov	r2, sl
 800a59a:	465b      	mov	r3, fp
 800a59c:	f7f5 fe76 	bl	800028c <__adddf3>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	f7f5 fe72 	bl	800028c <__adddf3>
 800a5a8:	a347      	add	r3, pc, #284	; (adr r3, 800a6c8 <__ieee754_asin+0x2e0>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	f7f5 fe6b 	bl	8000288 <__aeabi_dsub>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	a142      	add	r1, pc, #264	; (adr r1, 800a6c0 <__ieee754_asin+0x2d8>)
 800a5b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5bc:	f7f5 fe64 	bl	8000288 <__aeabi_dsub>
 800a5c0:	9b01      	ldr	r3, [sp, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	bfdc      	itt	le
 800a5c6:	4602      	movle	r2, r0
 800a5c8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	bfdc      	itt	le
 800a5d2:	4614      	movle	r4, r2
 800a5d4:	461d      	movle	r5, r3
 800a5d6:	e743      	b.n	800a460 <__ieee754_asin+0x78>
 800a5d8:	ee10 2a10 	vmov	r2, s0
 800a5dc:	ee10 0a10 	vmov	r0, s0
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	f7f6 f808 	bl	80005f8 <__aeabi_dmul>
 800a5e8:	a33b      	add	r3, pc, #236	; (adr r3, 800a6d8 <__ieee754_asin+0x2f0>)
 800a5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ee:	4606      	mov	r6, r0
 800a5f0:	460f      	mov	r7, r1
 800a5f2:	f7f6 f801 	bl	80005f8 <__aeabi_dmul>
 800a5f6:	a33a      	add	r3, pc, #232	; (adr r3, 800a6e0 <__ieee754_asin+0x2f8>)
 800a5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fc:	f7f5 fe46 	bl	800028c <__adddf3>
 800a600:	4632      	mov	r2, r6
 800a602:	463b      	mov	r3, r7
 800a604:	f7f5 fff8 	bl	80005f8 <__aeabi_dmul>
 800a608:	a337      	add	r3, pc, #220	; (adr r3, 800a6e8 <__ieee754_asin+0x300>)
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	f7f5 fe3b 	bl	8000288 <__aeabi_dsub>
 800a612:	4632      	mov	r2, r6
 800a614:	463b      	mov	r3, r7
 800a616:	f7f5 ffef 	bl	80005f8 <__aeabi_dmul>
 800a61a:	a335      	add	r3, pc, #212	; (adr r3, 800a6f0 <__ieee754_asin+0x308>)
 800a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a620:	f7f5 fe34 	bl	800028c <__adddf3>
 800a624:	4632      	mov	r2, r6
 800a626:	463b      	mov	r3, r7
 800a628:	f7f5 ffe6 	bl	80005f8 <__aeabi_dmul>
 800a62c:	a332      	add	r3, pc, #200	; (adr r3, 800a6f8 <__ieee754_asin+0x310>)
 800a62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a632:	f7f5 fe29 	bl	8000288 <__aeabi_dsub>
 800a636:	4632      	mov	r2, r6
 800a638:	463b      	mov	r3, r7
 800a63a:	f7f5 ffdd 	bl	80005f8 <__aeabi_dmul>
 800a63e:	a330      	add	r3, pc, #192	; (adr r3, 800a700 <__ieee754_asin+0x318>)
 800a640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a644:	f7f5 fe22 	bl	800028c <__adddf3>
 800a648:	4632      	mov	r2, r6
 800a64a:	463b      	mov	r3, r7
 800a64c:	f7f5 ffd4 	bl	80005f8 <__aeabi_dmul>
 800a650:	a32d      	add	r3, pc, #180	; (adr r3, 800a708 <__ieee754_asin+0x320>)
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	4680      	mov	r8, r0
 800a658:	4689      	mov	r9, r1
 800a65a:	4630      	mov	r0, r6
 800a65c:	4639      	mov	r1, r7
 800a65e:	f7f5 ffcb 	bl	80005f8 <__aeabi_dmul>
 800a662:	a32b      	add	r3, pc, #172	; (adr r3, 800a710 <__ieee754_asin+0x328>)
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	f7f5 fe0e 	bl	8000288 <__aeabi_dsub>
 800a66c:	4632      	mov	r2, r6
 800a66e:	463b      	mov	r3, r7
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	a328      	add	r3, pc, #160	; (adr r3, 800a718 <__ieee754_asin+0x330>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 fe07 	bl	800028c <__adddf3>
 800a67e:	4632      	mov	r2, r6
 800a680:	463b      	mov	r3, r7
 800a682:	f7f5 ffb9 	bl	80005f8 <__aeabi_dmul>
 800a686:	a326      	add	r3, pc, #152	; (adr r3, 800a720 <__ieee754_asin+0x338>)
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f7f5 fdfc 	bl	8000288 <__aeabi_dsub>
 800a690:	4632      	mov	r2, r6
 800a692:	463b      	mov	r3, r7
 800a694:	f7f5 ffb0 	bl	80005f8 <__aeabi_dmul>
 800a698:	4b25      	ldr	r3, [pc, #148]	; (800a730 <__ieee754_asin+0x348>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	f7f5 fdf6 	bl	800028c <__adddf3>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	4649      	mov	r1, r9
 800a6a8:	f7f6 f8d0 	bl	800084c <__aeabi_ddiv>
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	462b      	mov	r3, r5
 800a6b0:	f7f5 ffa2 	bl	80005f8 <__aeabi_dmul>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	e6bf      	b.n	800a43e <__ieee754_asin+0x56>
 800a6be:	bf00      	nop
 800a6c0:	54442d18 	.word	0x54442d18
 800a6c4:	3ff921fb 	.word	0x3ff921fb
 800a6c8:	33145c07 	.word	0x33145c07
 800a6cc:	3c91a626 	.word	0x3c91a626
 800a6d0:	8800759c 	.word	0x8800759c
 800a6d4:	7e37e43c 	.word	0x7e37e43c
 800a6d8:	0dfdf709 	.word	0x0dfdf709
 800a6dc:	3f023de1 	.word	0x3f023de1
 800a6e0:	7501b288 	.word	0x7501b288
 800a6e4:	3f49efe0 	.word	0x3f49efe0
 800a6e8:	b5688f3b 	.word	0xb5688f3b
 800a6ec:	3fa48228 	.word	0x3fa48228
 800a6f0:	0e884455 	.word	0x0e884455
 800a6f4:	3fc9c155 	.word	0x3fc9c155
 800a6f8:	03eb6f7d 	.word	0x03eb6f7d
 800a6fc:	3fd4d612 	.word	0x3fd4d612
 800a700:	55555555 	.word	0x55555555
 800a704:	3fc55555 	.word	0x3fc55555
 800a708:	b12e9282 	.word	0xb12e9282
 800a70c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a710:	1b8d0159 	.word	0x1b8d0159
 800a714:	3fe6066c 	.word	0x3fe6066c
 800a718:	9c598ac8 	.word	0x9c598ac8
 800a71c:	40002ae5 	.word	0x40002ae5
 800a720:	1c8a2d4b 	.word	0x1c8a2d4b
 800a724:	40033a27 	.word	0x40033a27
 800a728:	3fefffff 	.word	0x3fefffff
 800a72c:	3fdfffff 	.word	0x3fdfffff
 800a730:	3ff00000 	.word	0x3ff00000
 800a734:	3fe00000 	.word	0x3fe00000
 800a738:	3fef3332 	.word	0x3fef3332
 800a73c:	ee10 2a10 	vmov	r2, s0
 800a740:	ee10 0a10 	vmov	r0, s0
 800a744:	465b      	mov	r3, fp
 800a746:	4659      	mov	r1, fp
 800a748:	f7f5 fda0 	bl	800028c <__adddf3>
 800a74c:	4632      	mov	r2, r6
 800a74e:	463b      	mov	r3, r7
 800a750:	ec41 0b19 	vmov	d9, r0, r1
 800a754:	ec51 0b18 	vmov	r0, r1, d8
 800a758:	f7f6 f878 	bl	800084c <__aeabi_ddiv>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	ec51 0b19 	vmov	r0, r1, d9
 800a764:	f7f5 ff48 	bl	80005f8 <__aeabi_dmul>
 800a768:	f04f 0800 	mov.w	r8, #0
 800a76c:	4606      	mov	r6, r0
 800a76e:	460f      	mov	r7, r1
 800a770:	4642      	mov	r2, r8
 800a772:	465b      	mov	r3, fp
 800a774:	4640      	mov	r0, r8
 800a776:	4659      	mov	r1, fp
 800a778:	f7f5 ff3e 	bl	80005f8 <__aeabi_dmul>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4620      	mov	r0, r4
 800a782:	4629      	mov	r1, r5
 800a784:	f7f5 fd80 	bl	8000288 <__aeabi_dsub>
 800a788:	4642      	mov	r2, r8
 800a78a:	4604      	mov	r4, r0
 800a78c:	460d      	mov	r5, r1
 800a78e:	465b      	mov	r3, fp
 800a790:	4650      	mov	r0, sl
 800a792:	4659      	mov	r1, fp
 800a794:	f7f5 fd7a 	bl	800028c <__adddf3>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4620      	mov	r0, r4
 800a79e:	4629      	mov	r1, r5
 800a7a0:	f7f6 f854 	bl	800084c <__aeabi_ddiv>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	f7f5 fd70 	bl	800028c <__adddf3>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	a113      	add	r1, pc, #76	; (adr r1, 800a800 <__ieee754_asin+0x418>)
 800a7b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7b6:	f7f5 fd67 	bl	8000288 <__aeabi_dsub>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	f7f5 fd61 	bl	8000288 <__aeabi_dsub>
 800a7c6:	4642      	mov	r2, r8
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	4659      	mov	r1, fp
 800a7d2:	f7f5 fd5b 	bl	800028c <__adddf3>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	a10b      	add	r1, pc, #44	; (adr r1, 800a808 <__ieee754_asin+0x420>)
 800a7dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e0:	f7f5 fd52 	bl	8000288 <__aeabi_dsub>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	f7f5 fd4c 	bl	8000288 <__aeabi_dsub>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	a104      	add	r1, pc, #16	; (adr r1, 800a808 <__ieee754_asin+0x420>)
 800a7f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7fa:	e6df      	b.n	800a5bc <__ieee754_asin+0x1d4>
 800a7fc:	f3af 8000 	nop.w
 800a800:	33145c07 	.word	0x33145c07
 800a804:	3c91a626 	.word	0x3c91a626
 800a808:	54442d18 	.word	0x54442d18
 800a80c:	3fe921fb 	.word	0x3fe921fb

0800a810 <__ieee754_sqrt>:
 800a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a814:	ec55 4b10 	vmov	r4, r5, d0
 800a818:	4e56      	ldr	r6, [pc, #344]	; (800a974 <__ieee754_sqrt+0x164>)
 800a81a:	43ae      	bics	r6, r5
 800a81c:	ee10 0a10 	vmov	r0, s0
 800a820:	ee10 3a10 	vmov	r3, s0
 800a824:	4629      	mov	r1, r5
 800a826:	462a      	mov	r2, r5
 800a828:	d110      	bne.n	800a84c <__ieee754_sqrt+0x3c>
 800a82a:	ee10 2a10 	vmov	r2, s0
 800a82e:	462b      	mov	r3, r5
 800a830:	f7f5 fee2 	bl	80005f8 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4620      	mov	r0, r4
 800a83a:	4629      	mov	r1, r5
 800a83c:	f7f5 fd26 	bl	800028c <__adddf3>
 800a840:	4604      	mov	r4, r0
 800a842:	460d      	mov	r5, r1
 800a844:	ec45 4b10 	vmov	d0, r4, r5
 800a848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	dc10      	bgt.n	800a872 <__ieee754_sqrt+0x62>
 800a850:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a854:	4330      	orrs	r0, r6
 800a856:	d0f5      	beq.n	800a844 <__ieee754_sqrt+0x34>
 800a858:	b15d      	cbz	r5, 800a872 <__ieee754_sqrt+0x62>
 800a85a:	ee10 2a10 	vmov	r2, s0
 800a85e:	462b      	mov	r3, r5
 800a860:	ee10 0a10 	vmov	r0, s0
 800a864:	f7f5 fd10 	bl	8000288 <__aeabi_dsub>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	f7f5 ffee 	bl	800084c <__aeabi_ddiv>
 800a870:	e7e6      	b.n	800a840 <__ieee754_sqrt+0x30>
 800a872:	1509      	asrs	r1, r1, #20
 800a874:	d076      	beq.n	800a964 <__ieee754_sqrt+0x154>
 800a876:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a87a:	07ce      	lsls	r6, r1, #31
 800a87c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a880:	bf5e      	ittt	pl
 800a882:	0fda      	lsrpl	r2, r3, #31
 800a884:	005b      	lslpl	r3, r3, #1
 800a886:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a88a:	0fda      	lsrs	r2, r3, #31
 800a88c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a890:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a894:	2000      	movs	r0, #0
 800a896:	106d      	asrs	r5, r5, #1
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	f04f 0e16 	mov.w	lr, #22
 800a89e:	4684      	mov	ip, r0
 800a8a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8a4:	eb0c 0401 	add.w	r4, ip, r1
 800a8a8:	4294      	cmp	r4, r2
 800a8aa:	bfde      	ittt	le
 800a8ac:	1b12      	suble	r2, r2, r4
 800a8ae:	eb04 0c01 	addle.w	ip, r4, r1
 800a8b2:	1840      	addle	r0, r0, r1
 800a8b4:	0052      	lsls	r2, r2, #1
 800a8b6:	f1be 0e01 	subs.w	lr, lr, #1
 800a8ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a8be:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a8c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a8c6:	d1ed      	bne.n	800a8a4 <__ieee754_sqrt+0x94>
 800a8c8:	4671      	mov	r1, lr
 800a8ca:	2720      	movs	r7, #32
 800a8cc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a8d0:	4562      	cmp	r2, ip
 800a8d2:	eb04 060e 	add.w	r6, r4, lr
 800a8d6:	dc02      	bgt.n	800a8de <__ieee754_sqrt+0xce>
 800a8d8:	d113      	bne.n	800a902 <__ieee754_sqrt+0xf2>
 800a8da:	429e      	cmp	r6, r3
 800a8dc:	d811      	bhi.n	800a902 <__ieee754_sqrt+0xf2>
 800a8de:	2e00      	cmp	r6, #0
 800a8e0:	eb06 0e04 	add.w	lr, r6, r4
 800a8e4:	da43      	bge.n	800a96e <__ieee754_sqrt+0x15e>
 800a8e6:	f1be 0f00 	cmp.w	lr, #0
 800a8ea:	db40      	blt.n	800a96e <__ieee754_sqrt+0x15e>
 800a8ec:	f10c 0801 	add.w	r8, ip, #1
 800a8f0:	eba2 020c 	sub.w	r2, r2, ip
 800a8f4:	429e      	cmp	r6, r3
 800a8f6:	bf88      	it	hi
 800a8f8:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a8fc:	1b9b      	subs	r3, r3, r6
 800a8fe:	4421      	add	r1, r4
 800a900:	46c4      	mov	ip, r8
 800a902:	0052      	lsls	r2, r2, #1
 800a904:	3f01      	subs	r7, #1
 800a906:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a90a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a90e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a912:	d1dd      	bne.n	800a8d0 <__ieee754_sqrt+0xc0>
 800a914:	4313      	orrs	r3, r2
 800a916:	d006      	beq.n	800a926 <__ieee754_sqrt+0x116>
 800a918:	1c4c      	adds	r4, r1, #1
 800a91a:	bf13      	iteet	ne
 800a91c:	3101      	addne	r1, #1
 800a91e:	3001      	addeq	r0, #1
 800a920:	4639      	moveq	r1, r7
 800a922:	f021 0101 	bicne.w	r1, r1, #1
 800a926:	1043      	asrs	r3, r0, #1
 800a928:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a92c:	0849      	lsrs	r1, r1, #1
 800a92e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a932:	07c2      	lsls	r2, r0, #31
 800a934:	bf48      	it	mi
 800a936:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a93a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a93e:	460c      	mov	r4, r1
 800a940:	463d      	mov	r5, r7
 800a942:	e77f      	b.n	800a844 <__ieee754_sqrt+0x34>
 800a944:	0ada      	lsrs	r2, r3, #11
 800a946:	3815      	subs	r0, #21
 800a948:	055b      	lsls	r3, r3, #21
 800a94a:	2a00      	cmp	r2, #0
 800a94c:	d0fa      	beq.n	800a944 <__ieee754_sqrt+0x134>
 800a94e:	02d7      	lsls	r7, r2, #11
 800a950:	d50a      	bpl.n	800a968 <__ieee754_sqrt+0x158>
 800a952:	f1c1 0420 	rsb	r4, r1, #32
 800a956:	fa23 f404 	lsr.w	r4, r3, r4
 800a95a:	1e4d      	subs	r5, r1, #1
 800a95c:	408b      	lsls	r3, r1
 800a95e:	4322      	orrs	r2, r4
 800a960:	1b41      	subs	r1, r0, r5
 800a962:	e788      	b.n	800a876 <__ieee754_sqrt+0x66>
 800a964:	4608      	mov	r0, r1
 800a966:	e7f0      	b.n	800a94a <__ieee754_sqrt+0x13a>
 800a968:	0052      	lsls	r2, r2, #1
 800a96a:	3101      	adds	r1, #1
 800a96c:	e7ef      	b.n	800a94e <__ieee754_sqrt+0x13e>
 800a96e:	46e0      	mov	r8, ip
 800a970:	e7be      	b.n	800a8f0 <__ieee754_sqrt+0xe0>
 800a972:	bf00      	nop
 800a974:	7ff00000 	.word	0x7ff00000

0800a978 <fabs>:
 800a978:	ec51 0b10 	vmov	r0, r1, d0
 800a97c:	ee10 2a10 	vmov	r2, s0
 800a980:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a984:	ec43 2b10 	vmov	d0, r2, r3
 800a988:	4770      	bx	lr
 800a98a:	0000      	movs	r0, r0
 800a98c:	0000      	movs	r0, r0
	...

0800a990 <nan>:
 800a990:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a998 <nan+0x8>
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	00000000 	.word	0x00000000
 800a99c:	7ff80000 	.word	0x7ff80000

0800a9a0 <_init>:
 800a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a2:	bf00      	nop
 800a9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9a6:	bc08      	pop	{r3}
 800a9a8:	469e      	mov	lr, r3
 800a9aa:	4770      	bx	lr

0800a9ac <_fini>:
 800a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ae:	bf00      	nop
 800a9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b2:	bc08      	pop	{r3}
 800a9b4:	469e      	mov	lr, r3
 800a9b6:	4770      	bx	lr
